/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ifeed.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-03-06")
public class AssigningProblemEntities implements org.apache.thrift.TBase<AssigningProblemEntities, AssigningProblemEntities._Fields>, java.io.Serializable, Cloneable, Comparable<AssigningProblemEntities> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssigningProblemEntities");

  private static final org.apache.thrift.protocol.TField LEFT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("leftSet", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RIGHT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("rightSet", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AssigningProblemEntitiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AssigningProblemEntitiesTupleSchemeFactory();

  public java.util.List<java.lang.String> leftSet; // required
  public java.util.List<java.lang.String> rightSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_SET((short)1, "leftSet"),
    RIGHT_SET((short)2, "rightSet");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_SET
          return LEFT_SET;
        case 2: // RIGHT_SET
          return RIGHT_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_SET, new org.apache.thrift.meta_data.FieldMetaData("leftSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RIGHT_SET, new org.apache.thrift.meta_data.FieldMetaData("rightSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssigningProblemEntities.class, metaDataMap);
  }

  public AssigningProblemEntities() {
  }

  public AssigningProblemEntities(
    java.util.List<java.lang.String> leftSet,
    java.util.List<java.lang.String> rightSet)
  {
    this();
    this.leftSet = leftSet;
    this.rightSet = rightSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssigningProblemEntities(AssigningProblemEntities other) {
    if (other.isSetLeftSet()) {
      java.util.List<java.lang.String> __this__leftSet = new java.util.ArrayList<java.lang.String>(other.leftSet);
      this.leftSet = __this__leftSet;
    }
    if (other.isSetRightSet()) {
      java.util.List<java.lang.String> __this__rightSet = new java.util.ArrayList<java.lang.String>(other.rightSet);
      this.rightSet = __this__rightSet;
    }
  }

  public AssigningProblemEntities deepCopy() {
    return new AssigningProblemEntities(this);
  }

  @Override
  public void clear() {
    this.leftSet = null;
    this.rightSet = null;
  }

  public int getLeftSetSize() {
    return (this.leftSet == null) ? 0 : this.leftSet.size();
  }

  public java.util.Iterator<java.lang.String> getLeftSetIterator() {
    return (this.leftSet == null) ? null : this.leftSet.iterator();
  }

  public void addToLeftSet(java.lang.String elem) {
    if (this.leftSet == null) {
      this.leftSet = new java.util.ArrayList<java.lang.String>();
    }
    this.leftSet.add(elem);
  }

  public java.util.List<java.lang.String> getLeftSet() {
    return this.leftSet;
  }

  public AssigningProblemEntities setLeftSet(java.util.List<java.lang.String> leftSet) {
    this.leftSet = leftSet;
    return this;
  }

  public void unsetLeftSet() {
    this.leftSet = null;
  }

  /** Returns true if field leftSet is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftSet() {
    return this.leftSet != null;
  }

  public void setLeftSetIsSet(boolean value) {
    if (!value) {
      this.leftSet = null;
    }
  }

  public int getRightSetSize() {
    return (this.rightSet == null) ? 0 : this.rightSet.size();
  }

  public java.util.Iterator<java.lang.String> getRightSetIterator() {
    return (this.rightSet == null) ? null : this.rightSet.iterator();
  }

  public void addToRightSet(java.lang.String elem) {
    if (this.rightSet == null) {
      this.rightSet = new java.util.ArrayList<java.lang.String>();
    }
    this.rightSet.add(elem);
  }

  public java.util.List<java.lang.String> getRightSet() {
    return this.rightSet;
  }

  public AssigningProblemEntities setRightSet(java.util.List<java.lang.String> rightSet) {
    this.rightSet = rightSet;
    return this;
  }

  public void unsetRightSet() {
    this.rightSet = null;
  }

  /** Returns true if field rightSet is set (has been assigned a value) and false otherwise */
  public boolean isSetRightSet() {
    return this.rightSet != null;
  }

  public void setRightSetIsSet(boolean value) {
    if (!value) {
      this.rightSet = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LEFT_SET:
      if (value == null) {
        unsetLeftSet();
      } else {
        setLeftSet((java.util.List<java.lang.String>)value);
      }
      break;

    case RIGHT_SET:
      if (value == null) {
        unsetRightSet();
      } else {
        setRightSet((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_SET:
      return getLeftSet();

    case RIGHT_SET:
      return getRightSet();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LEFT_SET:
      return isSetLeftSet();
    case RIGHT_SET:
      return isSetRightSet();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AssigningProblemEntities)
      return this.equals((AssigningProblemEntities)that);
    return false;
  }

  public boolean equals(AssigningProblemEntities that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_leftSet = true && this.isSetLeftSet();
    boolean that_present_leftSet = true && that.isSetLeftSet();
    if (this_present_leftSet || that_present_leftSet) {
      if (!(this_present_leftSet && that_present_leftSet))
        return false;
      if (!this.leftSet.equals(that.leftSet))
        return false;
    }

    boolean this_present_rightSet = true && this.isSetRightSet();
    boolean that_present_rightSet = true && that.isSetRightSet();
    if (this_present_rightSet || that_present_rightSet) {
      if (!(this_present_rightSet && that_present_rightSet))
        return false;
      if (!this.rightSet.equals(that.rightSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLeftSet()) ? 131071 : 524287);
    if (isSetLeftSet())
      hashCode = hashCode * 8191 + leftSet.hashCode();

    hashCode = hashCode * 8191 + ((isSetRightSet()) ? 131071 : 524287);
    if (isSetRightSet())
      hashCode = hashCode * 8191 + rightSet.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AssigningProblemEntities other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLeftSet()).compareTo(other.isSetLeftSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftSet, other.leftSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRightSet()).compareTo(other.isSetRightSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightSet, other.rightSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AssigningProblemEntities(");
    boolean first = true;

    sb.append("leftSet:");
    if (this.leftSet == null) {
      sb.append("null");
    } else {
      sb.append(this.leftSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rightSet:");
    if (this.rightSet == null) {
      sb.append("null");
    } else {
      sb.append(this.rightSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssigningProblemEntitiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AssigningProblemEntitiesStandardScheme getScheme() {
      return new AssigningProblemEntitiesStandardScheme();
    }
  }

  private static class AssigningProblemEntitiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<AssigningProblemEntities> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssigningProblemEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.leftSet = new java.util.ArrayList<java.lang.String>(_list72.size);
                java.lang.String _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readString();
                  struct.leftSet.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setLeftSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RIGHT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.rightSet = new java.util.ArrayList<java.lang.String>(_list75.size);
                java.lang.String _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = iprot.readString();
                  struct.rightSet.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setRightSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssigningProblemEntities struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.leftSet != null) {
        oprot.writeFieldBegin(LEFT_SET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.leftSet.size()));
          for (java.lang.String _iter78 : struct.leftSet)
          {
            oprot.writeString(_iter78);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rightSet != null) {
        oprot.writeFieldBegin(RIGHT_SET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.rightSet.size()));
          for (java.lang.String _iter79 : struct.rightSet)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssigningProblemEntitiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AssigningProblemEntitiesTupleScheme getScheme() {
      return new AssigningProblemEntitiesTupleScheme();
    }
  }

  private static class AssigningProblemEntitiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<AssigningProblemEntities> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssigningProblemEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLeftSet()) {
        optionals.set(0);
      }
      if (struct.isSetRightSet()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLeftSet()) {
        {
          oprot.writeI32(struct.leftSet.size());
          for (java.lang.String _iter80 : struct.leftSet)
          {
            oprot.writeString(_iter80);
          }
        }
      }
      if (struct.isSetRightSet()) {
        {
          oprot.writeI32(struct.rightSet.size());
          for (java.lang.String _iter81 : struct.rightSet)
          {
            oprot.writeString(_iter81);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssigningProblemEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.leftSet = new java.util.ArrayList<java.lang.String>(_list82.size);
          java.lang.String _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = iprot.readString();
            struct.leftSet.add(_elem83);
          }
        }
        struct.setLeftSetIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.rightSet = new java.util.ArrayList<java.lang.String>(_list85.size);
          java.lang.String _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readString();
            struct.rightSet.add(_elem86);
          }
        }
        struct.setRightSetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

