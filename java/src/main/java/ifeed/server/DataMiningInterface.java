/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ifeed.server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-16")
public class DataMiningInterface {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public int getMarginalDrivingFeaturesBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEABinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEAContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public int generalizeFeatureBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesWithGeneralizationBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public java.lang.String simplifyFeatureExpression(java.lang.String session, java.lang.String problem, java.lang.String expression) throws org.apache.thrift.TException;

    public int stopSearch(java.lang.String session) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Double> computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Integer> computeAlgebraicTypicality(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException;

    public double computeComplexity(java.lang.String expression) throws org.apache.thrift.TException;

    public java.lang.String convertToCNF(java.lang.String expression) throws org.apache.thrift.TException;

    public java.lang.String convertToDNF(java.lang.String expression) throws org.apache.thrift.TException;

    public boolean setAssigningProblemEntities(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities) throws org.apache.thrift.TException;

    public boolean setAssigningProblemGeneralizedConcepts(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts) throws org.apache.thrift.TException;

    public AssigningProblemEntities getAssigningProblemEntities(java.lang.String session, java.lang.String problem) throws org.apache.thrift.TException;

    public FlattenedConceptHierarchy getAssigningProblemConceptHierarchy(java.lang.String session, java.lang.String problem, AssigningProblemEntities params) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Integer> computeAlgebraicTypicalityWithStringInput(java.lang.String problem, java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesEpsilonMOEABinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesEpsilonMOEAContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void generalizeFeatureBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesWithGeneralizationBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void simplifyFeatureExpression(java.lang.String session, java.lang.String problem, java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void stopSearch(java.lang.String session, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void computeComplexityOfFeatures(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

    public void computeAlgebraicTypicality(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

    public void computeComplexity(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void convertToCNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void convertToDNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void setAssigningProblemEntities(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void setAssigningProblemGeneralizedConcepts(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAssigningProblemEntities(java.lang.String session, java.lang.String problem, org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities> resultHandler) throws org.apache.thrift.TException;

    public void getAssigningProblemConceptHierarchy(java.lang.String session, java.lang.String problem, AssigningProblemEntities params, org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy> resultHandler) throws org.apache.thrift.TException;

    public void computeAlgebraicTypicalityWithStringInput(java.lang.String problem, java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesBinary();
    }

    public void send_getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesBinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
      receiveBase(result, "getDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesBinary failed: unknown result");
    }

    public int getMarginalDrivingFeaturesBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesBinary(session, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective);
      return recv_getMarginalDrivingFeaturesBinary();
    }

    public void send_getMarginalDrivingFeaturesBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setLogical_connective(logical_connective);
      sendBase("getMarginalDrivingFeaturesBinary", args);
    }

    public int recv_getMarginalDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
      receiveBase(result, "getMarginalDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesBinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEABinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesEpsilonMOEABinary(session, problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesEpsilonMOEABinary();
    }

    public void send_getDrivingFeaturesEpsilonMOEABinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEABinary_args args = new getDrivingFeaturesEpsilonMOEABinary_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesEpsilonMOEABinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesEpsilonMOEABinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
      receiveBase(result, "getDrivingFeaturesEpsilonMOEABinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEABinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesDiscrete();
    }

    public void send_getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
      receiveBase(result, "getDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesDiscrete(session, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective);
      return recv_getMarginalDrivingFeaturesDiscrete();
    }

    public void send_getMarginalDrivingFeaturesDiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setLogical_connective(logical_connective);
      sendBase("getMarginalDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
      receiveBase(result, "getMarginalDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesEpsilonMOEADiscrete(session, problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesEpsilonMOEADiscrete();
    }

    public void send_getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEADiscrete_args args = new getDrivingFeaturesEpsilonMOEADiscrete_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesEpsilonMOEADiscrete", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesEpsilonMOEADiscrete() throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
      receiveBase(result, "getDrivingFeaturesEpsilonMOEADiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEADiscrete failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesContinuous(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesContinuous();
    }

    public void send_getDrivingFeaturesContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesContinuous_args args = new getDrivingFeaturesContinuous_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesContinuous", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesContinuous() throws org.apache.thrift.TException
    {
      getDrivingFeaturesContinuous_result result = new getDrivingFeaturesContinuous_result();
      receiveBase(result, "getDrivingFeaturesContinuous");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesContinuous failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEAContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesEpsilonMOEAContinuous(problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesEpsilonMOEAContinuous();
    }

    public void send_getDrivingFeaturesEpsilonMOEAContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEAContinuous_args args = new getDrivingFeaturesEpsilonMOEAContinuous_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesEpsilonMOEAContinuous", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesEpsilonMOEAContinuous() throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEAContinuous_result result = new getDrivingFeaturesEpsilonMOEAContinuous_result();
      receiveBase(result, "getDrivingFeaturesEpsilonMOEAContinuous");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEAContinuous failed: unknown result");
    }

    public int generalizeFeatureBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression) throws org.apache.thrift.TException
    {
      send_generalizeFeatureBinary(session, problem, behavioral, non_behavioral, all_archs, rootfeatureExpression, nodeFeatureExpression);
      return recv_generalizeFeatureBinary();
    }

    public void send_generalizeFeatureBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression) throws org.apache.thrift.TException
    {
      generalizeFeatureBinary_args args = new generalizeFeatureBinary_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setRootfeatureExpression(rootfeatureExpression);
      args.setNodeFeatureExpression(nodeFeatureExpression);
      sendBase("generalizeFeatureBinary", args);
    }

    public int recv_generalizeFeatureBinary() throws org.apache.thrift.TException
    {
      generalizeFeatureBinary_result result = new generalizeFeatureBinary_result();
      receiveBase(result, "generalizeFeatureBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generalizeFeatureBinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesWithGeneralizationBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesWithGeneralizationBinary(session, problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesWithGeneralizationBinary();
    }

    public void send_getDrivingFeaturesWithGeneralizationBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesWithGeneralizationBinary_args args = new getDrivingFeaturesWithGeneralizationBinary_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesWithGeneralizationBinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesWithGeneralizationBinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesWithGeneralizationBinary_result result = new getDrivingFeaturesWithGeneralizationBinary_result();
      receiveBase(result, "getDrivingFeaturesWithGeneralizationBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesWithGeneralizationBinary failed: unknown result");
    }

    public java.lang.String simplifyFeatureExpression(java.lang.String session, java.lang.String problem, java.lang.String expression) throws org.apache.thrift.TException
    {
      send_simplifyFeatureExpression(session, problem, expression);
      return recv_simplifyFeatureExpression();
    }

    public void send_simplifyFeatureExpression(java.lang.String session, java.lang.String problem, java.lang.String expression) throws org.apache.thrift.TException
    {
      simplifyFeatureExpression_args args = new simplifyFeatureExpression_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setExpression(expression);
      sendBase("simplifyFeatureExpression", args);
    }

    public java.lang.String recv_simplifyFeatureExpression() throws org.apache.thrift.TException
    {
      simplifyFeatureExpression_result result = new simplifyFeatureExpression_result();
      receiveBase(result, "simplifyFeatureExpression");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "simplifyFeatureExpression failed: unknown result");
    }

    public int stopSearch(java.lang.String session) throws org.apache.thrift.TException
    {
      send_stopSearch(session);
      return recv_stopSearch();
    }

    public void send_stopSearch(java.lang.String session) throws org.apache.thrift.TException
    {
      stopSearch_args args = new stopSearch_args();
      args.setSession(session);
      sendBase("stopSearch", args);
    }

    public int recv_stopSearch() throws org.apache.thrift.TException
    {
      stopSearch_result result = new stopSearch_result();
      receiveBase(result, "stopSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopSearch failed: unknown result");
    }

    public java.util.List<java.lang.Double> computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException
    {
      send_computeComplexityOfFeatures(expressions);
      return recv_computeComplexityOfFeatures();
    }

    public void send_computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException
    {
      computeComplexityOfFeatures_args args = new computeComplexityOfFeatures_args();
      args.setExpressions(expressions);
      sendBase("computeComplexityOfFeatures", args);
    }

    public java.util.List<java.lang.Double> recv_computeComplexityOfFeatures() throws org.apache.thrift.TException
    {
      computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
      receiveBase(result, "computeComplexityOfFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeComplexityOfFeatures failed: unknown result");
    }

    public java.util.List<java.lang.Integer> computeAlgebraicTypicality(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException
    {
      send_computeAlgebraicTypicality(problem, arch, feature);
      return recv_computeAlgebraicTypicality();
    }

    public void send_computeAlgebraicTypicality(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException
    {
      computeAlgebraicTypicality_args args = new computeAlgebraicTypicality_args();
      args.setProblem(problem);
      args.setArch(arch);
      args.setFeature(feature);
      sendBase("computeAlgebraicTypicality", args);
    }

    public java.util.List<java.lang.Integer> recv_computeAlgebraicTypicality() throws org.apache.thrift.TException
    {
      computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
      receiveBase(result, "computeAlgebraicTypicality");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeAlgebraicTypicality failed: unknown result");
    }

    public double computeComplexity(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_computeComplexity(expression);
      return recv_computeComplexity();
    }

    public void send_computeComplexity(java.lang.String expression) throws org.apache.thrift.TException
    {
      computeComplexity_args args = new computeComplexity_args();
      args.setExpression(expression);
      sendBase("computeComplexity", args);
    }

    public double recv_computeComplexity() throws org.apache.thrift.TException
    {
      computeComplexity_result result = new computeComplexity_result();
      receiveBase(result, "computeComplexity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeComplexity failed: unknown result");
    }

    public java.lang.String convertToCNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_convertToCNF(expression);
      return recv_convertToCNF();
    }

    public void send_convertToCNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      convertToCNF_args args = new convertToCNF_args();
      args.setExpression(expression);
      sendBase("convertToCNF", args);
    }

    public java.lang.String recv_convertToCNF() throws org.apache.thrift.TException
    {
      convertToCNF_result result = new convertToCNF_result();
      receiveBase(result, "convertToCNF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "convertToCNF failed: unknown result");
    }

    public java.lang.String convertToDNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_convertToDNF(expression);
      return recv_convertToDNF();
    }

    public void send_convertToDNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      convertToDNF_args args = new convertToDNF_args();
      args.setExpression(expression);
      sendBase("convertToDNF", args);
    }

    public java.lang.String recv_convertToDNF() throws org.apache.thrift.TException
    {
      convertToDNF_result result = new convertToDNF_result();
      receiveBase(result, "convertToDNF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "convertToDNF failed: unknown result");
    }

    public boolean setAssigningProblemEntities(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities) throws org.apache.thrift.TException
    {
      send_setAssigningProblemEntities(session, problem, entities);
      return recv_setAssigningProblemEntities();
    }

    public void send_setAssigningProblemEntities(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities) throws org.apache.thrift.TException
    {
      setAssigningProblemEntities_args args = new setAssigningProblemEntities_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setEntities(entities);
      sendBase("setAssigningProblemEntities", args);
    }

    public boolean recv_setAssigningProblemEntities() throws org.apache.thrift.TException
    {
      setAssigningProblemEntities_result result = new setAssigningProblemEntities_result();
      receiveBase(result, "setAssigningProblemEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAssigningProblemEntities failed: unknown result");
    }

    public boolean setAssigningProblemGeneralizedConcepts(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts) throws org.apache.thrift.TException
    {
      send_setAssigningProblemGeneralizedConcepts(session, problem, generalizedConcepts);
      return recv_setAssigningProblemGeneralizedConcepts();
    }

    public void send_setAssigningProblemGeneralizedConcepts(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts) throws org.apache.thrift.TException
    {
      setAssigningProblemGeneralizedConcepts_args args = new setAssigningProblemGeneralizedConcepts_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setGeneralizedConcepts(generalizedConcepts);
      sendBase("setAssigningProblemGeneralizedConcepts", args);
    }

    public boolean recv_setAssigningProblemGeneralizedConcepts() throws org.apache.thrift.TException
    {
      setAssigningProblemGeneralizedConcepts_result result = new setAssigningProblemGeneralizedConcepts_result();
      receiveBase(result, "setAssigningProblemGeneralizedConcepts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAssigningProblemGeneralizedConcepts failed: unknown result");
    }

    public AssigningProblemEntities getAssigningProblemEntities(java.lang.String session, java.lang.String problem) throws org.apache.thrift.TException
    {
      send_getAssigningProblemEntities(session, problem);
      return recv_getAssigningProblemEntities();
    }

    public void send_getAssigningProblemEntities(java.lang.String session, java.lang.String problem) throws org.apache.thrift.TException
    {
      getAssigningProblemEntities_args args = new getAssigningProblemEntities_args();
      args.setSession(session);
      args.setProblem(problem);
      sendBase("getAssigningProblemEntities", args);
    }

    public AssigningProblemEntities recv_getAssigningProblemEntities() throws org.apache.thrift.TException
    {
      getAssigningProblemEntities_result result = new getAssigningProblemEntities_result();
      receiveBase(result, "getAssigningProblemEntities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssigningProblemEntities failed: unknown result");
    }

    public FlattenedConceptHierarchy getAssigningProblemConceptHierarchy(java.lang.String session, java.lang.String problem, AssigningProblemEntities params) throws org.apache.thrift.TException
    {
      send_getAssigningProblemConceptHierarchy(session, problem, params);
      return recv_getAssigningProblemConceptHierarchy();
    }

    public void send_getAssigningProblemConceptHierarchy(java.lang.String session, java.lang.String problem, AssigningProblemEntities params) throws org.apache.thrift.TException
    {
      getAssigningProblemConceptHierarchy_args args = new getAssigningProblemConceptHierarchy_args();
      args.setSession(session);
      args.setProblem(problem);
      args.setParams(params);
      sendBase("getAssigningProblemConceptHierarchy", args);
    }

    public FlattenedConceptHierarchy recv_getAssigningProblemConceptHierarchy() throws org.apache.thrift.TException
    {
      getAssigningProblemConceptHierarchy_result result = new getAssigningProblemConceptHierarchy_result();
      receiveBase(result, "getAssigningProblemConceptHierarchy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAssigningProblemConceptHierarchy failed: unknown result");
    }

    public java.util.List<java.lang.Integer> computeAlgebraicTypicalityWithStringInput(java.lang.String problem, java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException
    {
      send_computeAlgebraicTypicalityWithStringInput(problem, architecture, feature);
      return recv_computeAlgebraicTypicalityWithStringInput();
    }

    public void send_computeAlgebraicTypicalityWithStringInput(java.lang.String problem, java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException
    {
      computeAlgebraicTypicalityWithStringInput_args args = new computeAlgebraicTypicalityWithStringInput_args();
      args.setProblem(problem);
      args.setArchitecture(architecture);
      args.setFeature(feature);
      sendBase("computeAlgebraicTypicalityWithStringInput", args);
    }

    public java.util.List<java.lang.Integer> recv_computeAlgebraicTypicalityWithStringInput() throws org.apache.thrift.TException
    {
      computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
      receiveBase(result, "computeAlgebraicTypicalityWithStringInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeAlgebraicTypicalityWithStringInput failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesBinary_call method_call = new getDrivingFeaturesBinary_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesBinary();
      }
    }

    public void getMarginalDrivingFeaturesBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesBinary_call method_call = new getMarginalDrivingFeaturesBinary_call(session, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private java.lang.String logical_connective;
      public getMarginalDrivingFeaturesBinary_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.logical_connective = logical_connective;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setLogical_connective(logical_connective);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesBinary();
      }
    }

    public void getDrivingFeaturesEpsilonMOEABinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesEpsilonMOEABinary_call method_call = new getDrivingFeaturesEpsilonMOEABinary_call(session, problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesEpsilonMOEABinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      public getDrivingFeaturesEpsilonMOEABinary_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesEpsilonMOEABinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesEpsilonMOEABinary_args args = new getDrivingFeaturesEpsilonMOEABinary_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesEpsilonMOEABinary();
      }
    }

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesDiscrete_call method_call = new getDrivingFeaturesDiscrete_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesDiscrete();
      }
    }

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesDiscrete_call method_call = new getMarginalDrivingFeaturesDiscrete_call(session, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private java.lang.String logical_connective;
      public getMarginalDrivingFeaturesDiscrete_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.logical_connective = logical_connective;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setLogical_connective(logical_connective);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesDiscrete();
      }
    }

    public void getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesEpsilonMOEADiscrete_call method_call = new getDrivingFeaturesEpsilonMOEADiscrete_call(session, problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      public getDrivingFeaturesEpsilonMOEADiscrete_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesEpsilonMOEADiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesEpsilonMOEADiscrete_args args = new getDrivingFeaturesEpsilonMOEADiscrete_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesEpsilonMOEADiscrete();
      }
    }

    public void getDrivingFeaturesContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesContinuous_call method_call = new getDrivingFeaturesContinuous_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesContinuous_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<ContinuousInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesContinuous_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesContinuous", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesContinuous_args args = new getDrivingFeaturesContinuous_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesContinuous();
      }
    }

    public void getDrivingFeaturesEpsilonMOEAContinuous(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesEpsilonMOEAContinuous_call method_call = new getDrivingFeaturesEpsilonMOEAContinuous_call(problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesEpsilonMOEAContinuous_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<ContinuousInputArchitecture> all_archs;
      public getDrivingFeaturesEpsilonMOEAContinuous_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<ContinuousInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesEpsilonMOEAContinuous", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesEpsilonMOEAContinuous_args args = new getDrivingFeaturesEpsilonMOEAContinuous_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesEpsilonMOEAContinuous();
      }
    }

    public void generalizeFeatureBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generalizeFeatureBinary_call method_call = new generalizeFeatureBinary_call(session, problem, behavioral, non_behavioral, all_archs, rootfeatureExpression, nodeFeatureExpression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generalizeFeatureBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String rootfeatureExpression;
      private java.lang.String nodeFeatureExpression;
      public generalizeFeatureBinary_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String rootfeatureExpression, java.lang.String nodeFeatureExpression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.rootfeatureExpression = rootfeatureExpression;
        this.nodeFeatureExpression = nodeFeatureExpression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generalizeFeatureBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generalizeFeatureBinary_args args = new generalizeFeatureBinary_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setRootfeatureExpression(rootfeatureExpression);
        args.setNodeFeatureExpression(nodeFeatureExpression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generalizeFeatureBinary();
      }
    }

    public void getDrivingFeaturesWithGeneralizationBinary(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesWithGeneralizationBinary_call method_call = new getDrivingFeaturesWithGeneralizationBinary_call(session, problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesWithGeneralizationBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      public getDrivingFeaturesWithGeneralizationBinary_call(java.lang.String session, java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesWithGeneralizationBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesWithGeneralizationBinary_args args = new getDrivingFeaturesWithGeneralizationBinary_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesWithGeneralizationBinary();
      }
    }

    public void simplifyFeatureExpression(java.lang.String session, java.lang.String problem, java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      simplifyFeatureExpression_call method_call = new simplifyFeatureExpression_call(session, problem, expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class simplifyFeatureExpression_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String session;
      private java.lang.String problem;
      private java.lang.String expression;
      public simplifyFeatureExpression_call(java.lang.String session, java.lang.String problem, java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("simplifyFeatureExpression", org.apache.thrift.protocol.TMessageType.CALL, 0));
        simplifyFeatureExpression_args args = new simplifyFeatureExpression_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_simplifyFeatureExpression();
      }
    }

    public void stopSearch(java.lang.String session, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopSearch_call method_call = new stopSearch_call(session, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopSearch_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String session;
      public stopSearch_call(java.lang.String session, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopSearch_args args = new stopSearch_args();
        args.setSession(session);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopSearch();
      }
    }

    public void computeComplexityOfFeatures(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeComplexityOfFeatures_call method_call = new computeComplexityOfFeatures_call(expressions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeComplexityOfFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private java.util.List<java.lang.String> expressions;
      public computeComplexityOfFeatures_call(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expressions = expressions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeComplexityOfFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeComplexityOfFeatures_args args = new computeComplexityOfFeatures_args();
        args.setExpressions(expressions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeComplexityOfFeatures();
      }
    }

    public void computeAlgebraicTypicality(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeAlgebraicTypicality_call method_call = new computeAlgebraicTypicality_call(problem, arch, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeAlgebraicTypicality_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private java.lang.String problem;
      private BinaryInputArchitecture arch;
      private java.lang.String feature;
      public computeAlgebraicTypicality_call(java.lang.String problem, BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.arch = arch;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeAlgebraicTypicality", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeAlgebraicTypicality_args args = new computeAlgebraicTypicality_args();
        args.setProblem(problem);
        args.setArch(arch);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeAlgebraicTypicality();
      }
    }

    public void computeComplexity(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeComplexity_call method_call = new computeComplexity_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeComplexity_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String expression;
      public computeComplexity_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeComplexity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeComplexity_args args = new computeComplexity_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeComplexity();
      }
    }

    public void convertToCNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      convertToCNF_call method_call = new convertToCNF_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class convertToCNF_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String expression;
      public convertToCNF_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("convertToCNF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        convertToCNF_args args = new convertToCNF_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_convertToCNF();
      }
    }

    public void convertToDNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      convertToDNF_call method_call = new convertToDNF_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class convertToDNF_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String expression;
      public convertToDNF_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("convertToDNF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        convertToDNF_args args = new convertToDNF_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_convertToDNF();
      }
    }

    public void setAssigningProblemEntities(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAssigningProblemEntities_call method_call = new setAssigningProblemEntities_call(session, problem, entities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAssigningProblemEntities_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String session;
      private java.lang.String problem;
      private AssigningProblemEntities entities;
      public setAssigningProblemEntities_call(java.lang.String session, java.lang.String problem, AssigningProblemEntities entities, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.entities = entities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAssigningProblemEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAssigningProblemEntities_args args = new setAssigningProblemEntities_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setEntities(entities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAssigningProblemEntities();
      }
    }

    public void setAssigningProblemGeneralizedConcepts(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAssigningProblemGeneralizedConcepts_call method_call = new setAssigningProblemGeneralizedConcepts_call(session, problem, generalizedConcepts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAssigningProblemGeneralizedConcepts_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String session;
      private java.lang.String problem;
      private AssigningProblemEntities generalizedConcepts;
      public setAssigningProblemGeneralizedConcepts_call(java.lang.String session, java.lang.String problem, AssigningProblemEntities generalizedConcepts, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.generalizedConcepts = generalizedConcepts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAssigningProblemGeneralizedConcepts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAssigningProblemGeneralizedConcepts_args args = new setAssigningProblemGeneralizedConcepts_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setGeneralizedConcepts(generalizedConcepts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAssigningProblemGeneralizedConcepts();
      }
    }

    public void getAssigningProblemEntities(java.lang.String session, java.lang.String problem, org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssigningProblemEntities_call method_call = new getAssigningProblemEntities_call(session, problem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssigningProblemEntities_call extends org.apache.thrift.async.TAsyncMethodCall<AssigningProblemEntities> {
      private java.lang.String session;
      private java.lang.String problem;
      public getAssigningProblemEntities_call(java.lang.String session, java.lang.String problem, org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssigningProblemEntities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssigningProblemEntities_args args = new getAssigningProblemEntities_args();
        args.setSession(session);
        args.setProblem(problem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AssigningProblemEntities getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssigningProblemEntities();
      }
    }

    public void getAssigningProblemConceptHierarchy(java.lang.String session, java.lang.String problem, AssigningProblemEntities params, org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAssigningProblemConceptHierarchy_call method_call = new getAssigningProblemConceptHierarchy_call(session, problem, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAssigningProblemConceptHierarchy_call extends org.apache.thrift.async.TAsyncMethodCall<FlattenedConceptHierarchy> {
      private java.lang.String session;
      private java.lang.String problem;
      private AssigningProblemEntities params;
      public getAssigningProblemConceptHierarchy_call(java.lang.String session, java.lang.String problem, AssigningProblemEntities params, org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session = session;
        this.problem = problem;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAssigningProblemConceptHierarchy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAssigningProblemConceptHierarchy_args args = new getAssigningProblemConceptHierarchy_args();
        args.setSession(session);
        args.setProblem(problem);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FlattenedConceptHierarchy getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAssigningProblemConceptHierarchy();
      }
    }

    public void computeAlgebraicTypicalityWithStringInput(java.lang.String problem, java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeAlgebraicTypicalityWithStringInput_call method_call = new computeAlgebraicTypicalityWithStringInput_call(problem, architecture, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeAlgebraicTypicalityWithStringInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private java.lang.String problem;
      private java.lang.String architecture;
      private java.lang.String feature;
      public computeAlgebraicTypicalityWithStringInput_call(java.lang.String problem, java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.architecture = architecture;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeAlgebraicTypicalityWithStringInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeAlgebraicTypicalityWithStringInput_args args = new computeAlgebraicTypicalityWithStringInput_args();
        args.setProblem(problem);
        args.setArchitecture(architecture);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeAlgebraicTypicalityWithStringInput();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesEpsilonMOEABinary", new getDrivingFeaturesEpsilonMOEABinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      processMap.put("getDrivingFeaturesEpsilonMOEADiscrete", new getDrivingFeaturesEpsilonMOEADiscrete());
      processMap.put("getDrivingFeaturesContinuous", new getDrivingFeaturesContinuous());
      processMap.put("getDrivingFeaturesEpsilonMOEAContinuous", new getDrivingFeaturesEpsilonMOEAContinuous());
      processMap.put("generalizeFeatureBinary", new generalizeFeatureBinary());
      processMap.put("getDrivingFeaturesWithGeneralizationBinary", new getDrivingFeaturesWithGeneralizationBinary());
      processMap.put("simplifyFeatureExpression", new simplifyFeatureExpression());
      processMap.put("stopSearch", new stopSearch());
      processMap.put("computeComplexityOfFeatures", new computeComplexityOfFeatures());
      processMap.put("computeAlgebraicTypicality", new computeAlgebraicTypicality());
      processMap.put("computeComplexity", new computeComplexity());
      processMap.put("convertToCNF", new convertToCNF());
      processMap.put("convertToDNF", new convertToDNF());
      processMap.put("setAssigningProblemEntities", new setAssigningProblemEntities());
      processMap.put("setAssigningProblemGeneralizedConcepts", new setAssigningProblemGeneralizedConcepts());
      processMap.put("getAssigningProblemEntities", new getAssigningProblemEntities());
      processMap.put("getAssigningProblemConceptHierarchy", new getAssigningProblemConceptHierarchy());
      processMap.put("computeAlgebraicTypicalityWithStringInput", new computeAlgebraicTypicalityWithStringInput());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class getDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesBinary_args> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesBinary_result getResult(I iface, getDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
        result.success = iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesBinary_args> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesBinary_result getResult(I iface, getMarginalDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
        result.success = iface.getMarginalDrivingFeaturesBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDrivingFeaturesEpsilonMOEABinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesEpsilonMOEABinary_args> {
      public getDrivingFeaturesEpsilonMOEABinary() {
        super("getDrivingFeaturesEpsilonMOEABinary");
      }

      public getDrivingFeaturesEpsilonMOEABinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEABinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesEpsilonMOEABinary_result getResult(I iface, getDrivingFeaturesEpsilonMOEABinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
        result.success = iface.getDrivingFeaturesEpsilonMOEABinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesDiscrete_args> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesDiscrete_result getResult(I iface, getDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
        result.success = iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesDiscrete_result getResult(I iface, getMarginalDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
        result.success = iface.getMarginalDrivingFeaturesDiscrete(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective);
        return result;
      }
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesEpsilonMOEADiscrete_args> {
      public getDrivingFeaturesEpsilonMOEADiscrete() {
        super("getDrivingFeaturesEpsilonMOEADiscrete");
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_result getResult(I iface, getDrivingFeaturesEpsilonMOEADiscrete_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
        result.success = iface.getDrivingFeaturesEpsilonMOEADiscrete(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class getDrivingFeaturesContinuous<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesContinuous_args> {
      public getDrivingFeaturesContinuous() {
        super("getDrivingFeaturesContinuous");
      }

      public getDrivingFeaturesContinuous_args getEmptyArgsInstance() {
        return new getDrivingFeaturesContinuous_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesContinuous_result getResult(I iface, getDrivingFeaturesContinuous_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesContinuous_result result = new getDrivingFeaturesContinuous_result();
        result.success = iface.getDrivingFeaturesContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getDrivingFeaturesEpsilonMOEAContinuous<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesEpsilonMOEAContinuous_args> {
      public getDrivingFeaturesEpsilonMOEAContinuous() {
        super("getDrivingFeaturesEpsilonMOEAContinuous");
      }

      public getDrivingFeaturesEpsilonMOEAContinuous_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesEpsilonMOEAContinuous_result getResult(I iface, getDrivingFeaturesEpsilonMOEAContinuous_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesEpsilonMOEAContinuous_result result = new getDrivingFeaturesEpsilonMOEAContinuous_result();
        result.success = iface.getDrivingFeaturesEpsilonMOEAContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class generalizeFeatureBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generalizeFeatureBinary_args> {
      public generalizeFeatureBinary() {
        super("generalizeFeatureBinary");
      }

      public generalizeFeatureBinary_args getEmptyArgsInstance() {
        return new generalizeFeatureBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public generalizeFeatureBinary_result getResult(I iface, generalizeFeatureBinary_args args) throws org.apache.thrift.TException {
        generalizeFeatureBinary_result result = new generalizeFeatureBinary_result();
        result.success = iface.generalizeFeatureBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.rootfeatureExpression, args.nodeFeatureExpression);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDrivingFeaturesWithGeneralizationBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesWithGeneralizationBinary_args> {
      public getDrivingFeaturesWithGeneralizationBinary() {
        super("getDrivingFeaturesWithGeneralizationBinary");
      }

      public getDrivingFeaturesWithGeneralizationBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesWithGeneralizationBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesWithGeneralizationBinary_result getResult(I iface, getDrivingFeaturesWithGeneralizationBinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesWithGeneralizationBinary_result result = new getDrivingFeaturesWithGeneralizationBinary_result();
        result.success = iface.getDrivingFeaturesWithGeneralizationBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class simplifyFeatureExpression<I extends Iface> extends org.apache.thrift.ProcessFunction<I, simplifyFeatureExpression_args> {
      public simplifyFeatureExpression() {
        super("simplifyFeatureExpression");
      }

      public simplifyFeatureExpression_args getEmptyArgsInstance() {
        return new simplifyFeatureExpression_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public simplifyFeatureExpression_result getResult(I iface, simplifyFeatureExpression_args args) throws org.apache.thrift.TException {
        simplifyFeatureExpression_result result = new simplifyFeatureExpression_result();
        result.success = iface.simplifyFeatureExpression(args.session, args.problem, args.expression);
        return result;
      }
    }

    public static class stopSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopSearch_args> {
      public stopSearch() {
        super("stopSearch");
      }

      public stopSearch_args getEmptyArgsInstance() {
        return new stopSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public stopSearch_result getResult(I iface, stopSearch_args args) throws org.apache.thrift.TException {
        stopSearch_result result = new stopSearch_result();
        result.success = iface.stopSearch(args.session);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class computeComplexityOfFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeComplexityOfFeatures_args> {
      public computeComplexityOfFeatures() {
        super("computeComplexityOfFeatures");
      }

      public computeComplexityOfFeatures_args getEmptyArgsInstance() {
        return new computeComplexityOfFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeComplexityOfFeatures_result getResult(I iface, computeComplexityOfFeatures_args args) throws org.apache.thrift.TException {
        computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
        result.success = iface.computeComplexityOfFeatures(args.expressions);
        return result;
      }
    }

    public static class computeAlgebraicTypicality<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeAlgebraicTypicality_args> {
      public computeAlgebraicTypicality() {
        super("computeAlgebraicTypicality");
      }

      public computeAlgebraicTypicality_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicality_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeAlgebraicTypicality_result getResult(I iface, computeAlgebraicTypicality_args args) throws org.apache.thrift.TException {
        computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
        result.success = iface.computeAlgebraicTypicality(args.problem, args.arch, args.feature);
        return result;
      }
    }

    public static class computeComplexity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeComplexity_args> {
      public computeComplexity() {
        super("computeComplexity");
      }

      public computeComplexity_args getEmptyArgsInstance() {
        return new computeComplexity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeComplexity_result getResult(I iface, computeComplexity_args args) throws org.apache.thrift.TException {
        computeComplexity_result result = new computeComplexity_result();
        result.success = iface.computeComplexity(args.expression);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class convertToCNF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, convertToCNF_args> {
      public convertToCNF() {
        super("convertToCNF");
      }

      public convertToCNF_args getEmptyArgsInstance() {
        return new convertToCNF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public convertToCNF_result getResult(I iface, convertToCNF_args args) throws org.apache.thrift.TException {
        convertToCNF_result result = new convertToCNF_result();
        result.success = iface.convertToCNF(args.expression);
        return result;
      }
    }

    public static class convertToDNF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, convertToDNF_args> {
      public convertToDNF() {
        super("convertToDNF");
      }

      public convertToDNF_args getEmptyArgsInstance() {
        return new convertToDNF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public convertToDNF_result getResult(I iface, convertToDNF_args args) throws org.apache.thrift.TException {
        convertToDNF_result result = new convertToDNF_result();
        result.success = iface.convertToDNF(args.expression);
        return result;
      }
    }

    public static class setAssigningProblemEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAssigningProblemEntities_args> {
      public setAssigningProblemEntities() {
        super("setAssigningProblemEntities");
      }

      public setAssigningProblemEntities_args getEmptyArgsInstance() {
        return new setAssigningProblemEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public setAssigningProblemEntities_result getResult(I iface, setAssigningProblemEntities_args args) throws org.apache.thrift.TException {
        setAssigningProblemEntities_result result = new setAssigningProblemEntities_result();
        result.success = iface.setAssigningProblemEntities(args.session, args.problem, args.entities);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setAssigningProblemGeneralizedConcepts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAssigningProblemGeneralizedConcepts_args> {
      public setAssigningProblemGeneralizedConcepts() {
        super("setAssigningProblemGeneralizedConcepts");
      }

      public setAssigningProblemGeneralizedConcepts_args getEmptyArgsInstance() {
        return new setAssigningProblemGeneralizedConcepts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public setAssigningProblemGeneralizedConcepts_result getResult(I iface, setAssigningProblemGeneralizedConcepts_args args) throws org.apache.thrift.TException {
        setAssigningProblemGeneralizedConcepts_result result = new setAssigningProblemGeneralizedConcepts_result();
        result.success = iface.setAssigningProblemGeneralizedConcepts(args.session, args.problem, args.generalizedConcepts);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAssigningProblemEntities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssigningProblemEntities_args> {
      public getAssigningProblemEntities() {
        super("getAssigningProblemEntities");
      }

      public getAssigningProblemEntities_args getEmptyArgsInstance() {
        return new getAssigningProblemEntities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAssigningProblemEntities_result getResult(I iface, getAssigningProblemEntities_args args) throws org.apache.thrift.TException {
        getAssigningProblemEntities_result result = new getAssigningProblemEntities_result();
        result.success = iface.getAssigningProblemEntities(args.session, args.problem);
        return result;
      }
    }

    public static class getAssigningProblemConceptHierarchy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAssigningProblemConceptHierarchy_args> {
      public getAssigningProblemConceptHierarchy() {
        super("getAssigningProblemConceptHierarchy");
      }

      public getAssigningProblemConceptHierarchy_args getEmptyArgsInstance() {
        return new getAssigningProblemConceptHierarchy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAssigningProblemConceptHierarchy_result getResult(I iface, getAssigningProblemConceptHierarchy_args args) throws org.apache.thrift.TException {
        getAssigningProblemConceptHierarchy_result result = new getAssigningProblemConceptHierarchy_result();
        result.success = iface.getAssigningProblemConceptHierarchy(args.session, args.problem, args.params);
        return result;
      }
    }

    public static class computeAlgebraicTypicalityWithStringInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeAlgebraicTypicalityWithStringInput_args> {
      public computeAlgebraicTypicalityWithStringInput() {
        super("computeAlgebraicTypicalityWithStringInput");
      }

      public computeAlgebraicTypicalityWithStringInput_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicalityWithStringInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeAlgebraicTypicalityWithStringInput_result getResult(I iface, computeAlgebraicTypicalityWithStringInput_args args) throws org.apache.thrift.TException {
        computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
        result.success = iface.computeAlgebraicTypicalityWithStringInput(args.problem, args.architecture, args.feature);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesEpsilonMOEABinary", new getDrivingFeaturesEpsilonMOEABinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      processMap.put("getDrivingFeaturesEpsilonMOEADiscrete", new getDrivingFeaturesEpsilonMOEADiscrete());
      processMap.put("getDrivingFeaturesContinuous", new getDrivingFeaturesContinuous());
      processMap.put("getDrivingFeaturesEpsilonMOEAContinuous", new getDrivingFeaturesEpsilonMOEAContinuous());
      processMap.put("generalizeFeatureBinary", new generalizeFeatureBinary());
      processMap.put("getDrivingFeaturesWithGeneralizationBinary", new getDrivingFeaturesWithGeneralizationBinary());
      processMap.put("simplifyFeatureExpression", new simplifyFeatureExpression());
      processMap.put("stopSearch", new stopSearch());
      processMap.put("computeComplexityOfFeatures", new computeComplexityOfFeatures());
      processMap.put("computeAlgebraicTypicality", new computeAlgebraicTypicality());
      processMap.put("computeComplexity", new computeComplexity());
      processMap.put("convertToCNF", new convertToCNF());
      processMap.put("convertToDNF", new convertToDNF());
      processMap.put("setAssigningProblemEntities", new setAssigningProblemEntities());
      processMap.put("setAssigningProblemGeneralizedConcepts", new setAssigningProblemGeneralizedConcepts());
      processMap.put("getAssigningProblemEntities", new getAssigningProblemEntities());
      processMap.put("getAssigningProblemConceptHierarchy", new getAssigningProblemConceptHierarchy());
      processMap.put("computeAlgebraicTypicalityWithStringInput", new computeAlgebraicTypicalityWithStringInput());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesBinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesBinary_args, java.lang.Integer> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective,resultHandler);
      }
    }

    public static class getDrivingFeaturesEpsilonMOEABinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesEpsilonMOEABinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesEpsilonMOEABinary() {
        super("getDrivingFeaturesEpsilonMOEABinary");
      }

      public getDrivingFeaturesEpsilonMOEABinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEABinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesEpsilonMOEABinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesEpsilonMOEABinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesDiscrete(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective,resultHandler);
      }
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesEpsilonMOEADiscrete_args, java.util.List<Feature>> {
      public getDrivingFeaturesEpsilonMOEADiscrete() {
        super("getDrivingFeaturesEpsilonMOEADiscrete");
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesEpsilonMOEADiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesEpsilonMOEADiscrete(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class getDrivingFeaturesContinuous<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesContinuous_args, java.util.List<Feature>> {
      public getDrivingFeaturesContinuous() {
        super("getDrivingFeaturesContinuous");
      }

      public getDrivingFeaturesContinuous_args getEmptyArgsInstance() {
        return new getDrivingFeaturesContinuous_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesContinuous_result result = new getDrivingFeaturesContinuous_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesContinuous_result result = new getDrivingFeaturesContinuous_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesContinuous_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getDrivingFeaturesEpsilonMOEAContinuous<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesEpsilonMOEAContinuous_args, java.util.List<Feature>> {
      public getDrivingFeaturesEpsilonMOEAContinuous() {
        super("getDrivingFeaturesEpsilonMOEAContinuous");
      }

      public getDrivingFeaturesEpsilonMOEAContinuous_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesEpsilonMOEAContinuous_result result = new getDrivingFeaturesEpsilonMOEAContinuous_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesEpsilonMOEAContinuous_result result = new getDrivingFeaturesEpsilonMOEAContinuous_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesEpsilonMOEAContinuous_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesEpsilonMOEAContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class generalizeFeatureBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generalizeFeatureBinary_args, java.lang.Integer> {
      public generalizeFeatureBinary() {
        super("generalizeFeatureBinary");
      }

      public generalizeFeatureBinary_args getEmptyArgsInstance() {
        return new generalizeFeatureBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            generalizeFeatureBinary_result result = new generalizeFeatureBinary_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            generalizeFeatureBinary_result result = new generalizeFeatureBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, generalizeFeatureBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.generalizeFeatureBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.rootfeatureExpression, args.nodeFeatureExpression,resultHandler);
      }
    }

    public static class getDrivingFeaturesWithGeneralizationBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesWithGeneralizationBinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesWithGeneralizationBinary() {
        super("getDrivingFeaturesWithGeneralizationBinary");
      }

      public getDrivingFeaturesWithGeneralizationBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesWithGeneralizationBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesWithGeneralizationBinary_result result = new getDrivingFeaturesWithGeneralizationBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesWithGeneralizationBinary_result result = new getDrivingFeaturesWithGeneralizationBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesWithGeneralizationBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesWithGeneralizationBinary(args.session, args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class simplifyFeatureExpression<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, simplifyFeatureExpression_args, java.lang.String> {
      public simplifyFeatureExpression() {
        super("simplifyFeatureExpression");
      }

      public simplifyFeatureExpression_args getEmptyArgsInstance() {
        return new simplifyFeatureExpression_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            simplifyFeatureExpression_result result = new simplifyFeatureExpression_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            simplifyFeatureExpression_result result = new simplifyFeatureExpression_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, simplifyFeatureExpression_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.simplifyFeatureExpression(args.session, args.problem, args.expression,resultHandler);
      }
    }

    public static class stopSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopSearch_args, java.lang.Integer> {
      public stopSearch() {
        super("stopSearch");
      }

      public stopSearch_args getEmptyArgsInstance() {
        return new stopSearch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            stopSearch_result result = new stopSearch_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            stopSearch_result result = new stopSearch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopSearch_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.stopSearch(args.session,resultHandler);
      }
    }

    public static class computeComplexityOfFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeComplexityOfFeatures_args, java.util.List<java.lang.Double>> {
      public computeComplexityOfFeatures() {
        super("computeComplexityOfFeatures");
      }

      public computeComplexityOfFeatures_args getEmptyArgsInstance() {
        return new computeComplexityOfFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          public void onComplete(java.util.List<java.lang.Double> o) {
            computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeComplexityOfFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.computeComplexityOfFeatures(args.expressions,resultHandler);
      }
    }

    public static class computeAlgebraicTypicality<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeAlgebraicTypicality_args, java.util.List<java.lang.Integer>> {
      public computeAlgebraicTypicality() {
        super("computeAlgebraicTypicality");
      }

      public computeAlgebraicTypicality_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicality_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeAlgebraicTypicality_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.computeAlgebraicTypicality(args.problem, args.arch, args.feature,resultHandler);
      }
    }

    public static class computeComplexity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeComplexity_args, java.lang.Double> {
      public computeComplexity() {
        super("computeComplexity");
      }

      public computeComplexity_args getEmptyArgsInstance() {
        return new computeComplexity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            computeComplexity_result result = new computeComplexity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeComplexity_result result = new computeComplexity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeComplexity_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.computeComplexity(args.expression,resultHandler);
      }
    }

    public static class convertToCNF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, convertToCNF_args, java.lang.String> {
      public convertToCNF() {
        super("convertToCNF");
      }

      public convertToCNF_args getEmptyArgsInstance() {
        return new convertToCNF_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            convertToCNF_result result = new convertToCNF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            convertToCNF_result result = new convertToCNF_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, convertToCNF_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.convertToCNF(args.expression,resultHandler);
      }
    }

    public static class convertToDNF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, convertToDNF_args, java.lang.String> {
      public convertToDNF() {
        super("convertToDNF");
      }

      public convertToDNF_args getEmptyArgsInstance() {
        return new convertToDNF_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            convertToDNF_result result = new convertToDNF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            convertToDNF_result result = new convertToDNF_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, convertToDNF_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.convertToDNF(args.expression,resultHandler);
      }
    }

    public static class setAssigningProblemEntities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setAssigningProblemEntities_args, java.lang.Boolean> {
      public setAssigningProblemEntities() {
        super("setAssigningProblemEntities");
      }

      public setAssigningProblemEntities_args getEmptyArgsInstance() {
        return new setAssigningProblemEntities_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            setAssigningProblemEntities_result result = new setAssigningProblemEntities_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setAssigningProblemEntities_result result = new setAssigningProblemEntities_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setAssigningProblemEntities_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setAssigningProblemEntities(args.session, args.problem, args.entities,resultHandler);
      }
    }

    public static class setAssigningProblemGeneralizedConcepts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setAssigningProblemGeneralizedConcepts_args, java.lang.Boolean> {
      public setAssigningProblemGeneralizedConcepts() {
        super("setAssigningProblemGeneralizedConcepts");
      }

      public setAssigningProblemGeneralizedConcepts_args getEmptyArgsInstance() {
        return new setAssigningProblemGeneralizedConcepts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            setAssigningProblemGeneralizedConcepts_result result = new setAssigningProblemGeneralizedConcepts_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setAssigningProblemGeneralizedConcepts_result result = new setAssigningProblemGeneralizedConcepts_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setAssigningProblemGeneralizedConcepts_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setAssigningProblemGeneralizedConcepts(args.session, args.problem, args.generalizedConcepts,resultHandler);
      }
    }

    public static class getAssigningProblemEntities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssigningProblemEntities_args, AssigningProblemEntities> {
      public getAssigningProblemEntities() {
        super("getAssigningProblemEntities");
      }

      public getAssigningProblemEntities_args getEmptyArgsInstance() {
        return new getAssigningProblemEntities_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities>() { 
          public void onComplete(AssigningProblemEntities o) {
            getAssigningProblemEntities_result result = new getAssigningProblemEntities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAssigningProblemEntities_result result = new getAssigningProblemEntities_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssigningProblemEntities_args args, org.apache.thrift.async.AsyncMethodCallback<AssigningProblemEntities> resultHandler) throws org.apache.thrift.TException {
        iface.getAssigningProblemEntities(args.session, args.problem,resultHandler);
      }
    }

    public static class getAssigningProblemConceptHierarchy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAssigningProblemConceptHierarchy_args, FlattenedConceptHierarchy> {
      public getAssigningProblemConceptHierarchy() {
        super("getAssigningProblemConceptHierarchy");
      }

      public getAssigningProblemConceptHierarchy_args getEmptyArgsInstance() {
        return new getAssigningProblemConceptHierarchy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy>() { 
          public void onComplete(FlattenedConceptHierarchy o) {
            getAssigningProblemConceptHierarchy_result result = new getAssigningProblemConceptHierarchy_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAssigningProblemConceptHierarchy_result result = new getAssigningProblemConceptHierarchy_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAssigningProblemConceptHierarchy_args args, org.apache.thrift.async.AsyncMethodCallback<FlattenedConceptHierarchy> resultHandler) throws org.apache.thrift.TException {
        iface.getAssigningProblemConceptHierarchy(args.session, args.problem, args.params,resultHandler);
      }
    }

    public static class computeAlgebraicTypicalityWithStringInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeAlgebraicTypicalityWithStringInput_args, java.util.List<java.lang.Integer>> {
      public computeAlgebraicTypicalityWithStringInput() {
        super("computeAlgebraicTypicalityWithStringInput");
      }

      public computeAlgebraicTypicalityWithStringInput_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicalityWithStringInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeAlgebraicTypicalityWithStringInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.computeAlgebraicTypicalityWithStringInput(args.problem, args.architecture, args.feature,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getDrivingFeaturesBinary_args, getDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_args() {
    }

    public getDrivingFeaturesBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_args(getDrivingFeaturesBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesBinary_args deepCopy() {
      return new getDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_args)
        return this.equals((getDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list124.size);
                  int _elem125;
                  for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                  {
                    _elem125 = iprot.readI32();
                    struct.behavioral.add(_elem125);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list127 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list127.size);
                  int _elem128;
                  for (int _i129 = 0; _i129 < _list127.size; ++_i129)
                  {
                    _elem128 = iprot.readI32();
                    struct.non_behavioral.add(_elem128);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list130.size);
                  BinaryInputArchitecture _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = new BinaryInputArchitecture();
                    _elem131.read(iprot);
                    struct.all_archs.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter133 : struct.behavioral)
            {
              oprot.writeI32(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter134 : struct.non_behavioral)
            {
              oprot.writeI32(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter135 : struct.all_archs)
            {
              _iter135.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter136 : struct.behavioral)
            {
              oprot.writeI32(_iter136);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter137 : struct.non_behavioral)
            {
              oprot.writeI32(_iter137);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter138 : struct.all_archs)
            {
              _iter138.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list139.size);
            int _elem140;
            for (int _i141 = 0; _i141 < _list139.size; ++_i141)
            {
              _elem140 = iprot.readI32();
              struct.behavioral.add(_elem140);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list142 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list142.size);
            int _elem143;
            for (int _i144 = 0; _i144 < _list142.size; ++_i144)
            {
              _elem143 = iprot.readI32();
              struct.non_behavioral.add(_elem143);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list145 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list145.size);
            BinaryInputArchitecture _elem146;
            for (int _i147 = 0; _i147 < _list145.size; ++_i147)
            {
              _elem146 = new BinaryInputArchitecture();
              _elem146.read(iprot);
              struct.all_archs.add(_elem146);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getDrivingFeaturesBinary_result, getDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_result() {
    }

    public getDrivingFeaturesBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_result(getDrivingFeaturesBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesBinary_result deepCopy() {
      return new getDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_result)
        return this.equals((getDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list148.size);
                  Feature _elem149;
                  for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                  {
                    _elem149 = new Feature();
                    _elem149.read(iprot);
                    struct.success.add(_elem149);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter151 : struct.success)
            {
              _iter151.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter152 : struct.success)
            {
              _iter152.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list153.size);
            Feature _elem154;
            for (int _i155 = 0; _i155 < _list153.size; ++_i155)
            {
              _elem154 = new Feature();
              _elem154.read(iprot);
              struct.success.add(_elem154);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_args, getMarginalDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField LOGICAL_CONNECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("logical_connective", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public java.lang.String logical_connective; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs"),
      FEATURE_EXPRESSION((short)6, "featureExpression"),
      LOGICAL_CONNECTIVE((short)7, "logical_connective");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          case 6: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 7: // LOGICAL_CONNECTIVE
            return LOGICAL_CONNECTIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGICAL_CONNECTIVE, new org.apache.thrift.meta_data.FieldMetaData("logical_connective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_args() {
    }

    public getMarginalDrivingFeaturesBinary_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String featureExpression,
      java.lang.String logical_connective)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.logical_connective = logical_connective;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_args(getMarginalDrivingFeaturesBinary_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      if (other.isSetLogical_connective()) {
        this.logical_connective = other.logical_connective;
      }
    }

    public getMarginalDrivingFeaturesBinary_args deepCopy() {
      return new getMarginalDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      this.logical_connective = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getMarginalDrivingFeaturesBinary_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesBinary_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public java.lang.String getLogical_connective() {
      return this.logical_connective;
    }

    public getMarginalDrivingFeaturesBinary_args setLogical_connective(java.lang.String logical_connective) {
      this.logical_connective = logical_connective;
      return this;
    }

    public void unsetLogical_connective() {
      this.logical_connective = null;
    }

    /** Returns true if field logical_connective is set (has been assigned a value) and false otherwise */
    public boolean isSetLogical_connective() {
      return this.logical_connective != null;
    }

    public void setLogical_connectiveIsSet(boolean value) {
      if (!value) {
        this.logical_connective = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case LOGICAL_CONNECTIVE:
        if (value == null) {
          unsetLogical_connective();
        } else {
          setLogical_connective((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case LOGICAL_CONNECTIVE:
        return getLogical_connective();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case LOGICAL_CONNECTIVE:
        return isSetLogical_connective();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_args)
        return this.equals((getMarginalDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_logical_connective = true && this.isSetLogical_connective();
      boolean that_present_logical_connective = true && that.isSetLogical_connective();
      if (this_present_logical_connective || that_present_logical_connective) {
        if (!(this_present_logical_connective && that_present_logical_connective))
          return false;
        if (!this.logical_connective.equals(that.logical_connective))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogical_connective()) ? 131071 : 524287);
      if (isSetLogical_connective())
        hashCode = hashCode * 8191 + logical_connective.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogical_connective()).compareTo(other.isSetLogical_connective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogical_connective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logical_connective, other.logical_connective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logical_connective:");
      if (this.logical_connective == null) {
        sb.append("null");
      } else {
        sb.append(this.logical_connective);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list156.size);
                  int _elem157;
                  for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                  {
                    _elem157 = iprot.readI32();
                    struct.behavioral.add(_elem157);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list159 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list159.size);
                  int _elem160;
                  for (int _i161 = 0; _i161 < _list159.size; ++_i161)
                  {
                    _elem160 = iprot.readI32();
                    struct.non_behavioral.add(_elem160);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list162.size);
                  BinaryInputArchitecture _elem163;
                  for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                  {
                    _elem163 = new BinaryInputArchitecture();
                    _elem163.read(iprot);
                    struct.all_archs.add(_elem163);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LOGICAL_CONNECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logical_connective = iprot.readString();
                struct.setLogical_connectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter165 : struct.behavioral)
            {
              oprot.writeI32(_iter165);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter166 : struct.non_behavioral)
            {
              oprot.writeI32(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter167 : struct.all_archs)
            {
              _iter167.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        if (struct.logical_connective != null) {
          oprot.writeFieldBegin(LOGICAL_CONNECTIVE_FIELD_DESC);
          oprot.writeString(struct.logical_connective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(5);
        }
        if (struct.isSetLogical_connective()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter168 : struct.behavioral)
            {
              oprot.writeI32(_iter168);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter169 : struct.non_behavioral)
            {
              oprot.writeI32(_iter169);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter170 : struct.all_archs)
            {
              _iter170.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetLogical_connective()) {
          oprot.writeString(struct.logical_connective);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list171.size);
            int _elem172;
            for (int _i173 = 0; _i173 < _list171.size; ++_i173)
            {
              _elem172 = iprot.readI32();
              struct.behavioral.add(_elem172);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list174 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list174.size);
            int _elem175;
            for (int _i176 = 0; _i176 < _list174.size; ++_i176)
            {
              _elem175 = iprot.readI32();
              struct.non_behavioral.add(_elem175);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list177.size);
            BinaryInputArchitecture _elem178;
            for (int _i179 = 0; _i179 < _list177.size; ++_i179)
            {
              _elem178 = new BinaryInputArchitecture();
              _elem178.read(iprot);
              struct.all_archs.add(_elem178);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.logical_connective = iprot.readString();
          struct.setLogical_connectiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_result, getMarginalDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_result() {
    }

    public getMarginalDrivingFeaturesBinary_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_result(getMarginalDrivingFeaturesBinary_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMarginalDrivingFeaturesBinary_result deepCopy() {
      return new getMarginalDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesBinary_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_result)
        return this.equals((getMarginalDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEABinary_args implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEABinary_args, getDrivingFeaturesEpsilonMOEABinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEABinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEABinary_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEABinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEABinary_args() {
    }

    public getDrivingFeaturesEpsilonMOEABinary_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEABinary_args(getDrivingFeaturesEpsilonMOEABinary_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesEpsilonMOEABinary_args deepCopy() {
      return new getDrivingFeaturesEpsilonMOEABinary_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEABinary_args)
        return this.equals((getDrivingFeaturesEpsilonMOEABinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEABinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEABinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEABinary_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEABinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list180.size);
                  int _elem181;
                  for (int _i182 = 0; _i182 < _list180.size; ++_i182)
                  {
                    _elem181 = iprot.readI32();
                    struct.behavioral.add(_elem181);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list183 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list183.size);
                  int _elem184;
                  for (int _i185 = 0; _i185 < _list183.size; ++_i185)
                  {
                    _elem184 = iprot.readI32();
                    struct.non_behavioral.add(_elem184);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list186.size);
                  BinaryInputArchitecture _elem187;
                  for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                  {
                    _elem187 = new BinaryInputArchitecture();
                    _elem187.read(iprot);
                    struct.all_archs.add(_elem187);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter189 : struct.behavioral)
            {
              oprot.writeI32(_iter189);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter190 : struct.non_behavioral)
            {
              oprot.writeI32(_iter190);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter191 : struct.all_archs)
            {
              _iter191.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEABinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter192 : struct.behavioral)
            {
              oprot.writeI32(_iter192);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter193 : struct.non_behavioral)
            {
              oprot.writeI32(_iter193);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter194 : struct.all_archs)
            {
              _iter194.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list195.size);
            int _elem196;
            for (int _i197 = 0; _i197 < _list195.size; ++_i197)
            {
              _elem196 = iprot.readI32();
              struct.behavioral.add(_elem196);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list198 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list198.size);
            int _elem199;
            for (int _i200 = 0; _i200 < _list198.size; ++_i200)
            {
              _elem199 = iprot.readI32();
              struct.non_behavioral.add(_elem199);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list201.size);
            BinaryInputArchitecture _elem202;
            for (int _i203 = 0; _i203 < _list201.size; ++_i203)
            {
              _elem202 = new BinaryInputArchitecture();
              _elem202.read(iprot);
              struct.all_archs.add(_elem202);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEABinary_result implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEABinary_result, getDrivingFeaturesEpsilonMOEABinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEABinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEABinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEABinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEABinary_result() {
    }

    public getDrivingFeaturesEpsilonMOEABinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEABinary_result(getDrivingFeaturesEpsilonMOEABinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesEpsilonMOEABinary_result deepCopy() {
      return new getDrivingFeaturesEpsilonMOEABinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesEpsilonMOEABinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEABinary_result)
        return this.equals((getDrivingFeaturesEpsilonMOEABinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEABinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEABinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEABinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEABinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list204.size);
                  Feature _elem205;
                  for (int _i206 = 0; _i206 < _list204.size; ++_i206)
                  {
                    _elem205 = new Feature();
                    _elem205.read(iprot);
                    struct.success.add(_elem205);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter207 : struct.success)
            {
              _iter207.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEABinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter208 : struct.success)
            {
              _iter208.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list209 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list209.size);
            Feature _elem210;
            for (int _i211 = 0; _i211 < _list209.size; ++_i211)
            {
              _elem210 = new Feature();
              _elem210.read(iprot);
              struct.success.add(_elem210);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_args, getDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_args() {
    }

    public getDrivingFeaturesDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_args(getDrivingFeaturesDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesDiscrete_args deepCopy() {
      return new getDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_args)
        return this.equals((getDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list212 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list212.size);
                  int _elem213;
                  for (int _i214 = 0; _i214 < _list212.size; ++_i214)
                  {
                    _elem213 = iprot.readI32();
                    struct.behavioral.add(_elem213);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list215 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list215.size);
                  int _elem216;
                  for (int _i217 = 0; _i217 < _list215.size; ++_i217)
                  {
                    _elem216 = iprot.readI32();
                    struct.non_behavioral.add(_elem216);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list218.size);
                  DiscreteInputArchitecture _elem219;
                  for (int _i220 = 0; _i220 < _list218.size; ++_i220)
                  {
                    _elem219 = new DiscreteInputArchitecture();
                    _elem219.read(iprot);
                    struct.all_archs.add(_elem219);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter221 : struct.behavioral)
            {
              oprot.writeI32(_iter221);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter222 : struct.non_behavioral)
            {
              oprot.writeI32(_iter222);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter223 : struct.all_archs)
            {
              _iter223.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter224 : struct.behavioral)
            {
              oprot.writeI32(_iter224);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter225 : struct.non_behavioral)
            {
              oprot.writeI32(_iter225);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter226 : struct.all_archs)
            {
              _iter226.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list227.size);
            int _elem228;
            for (int _i229 = 0; _i229 < _list227.size; ++_i229)
            {
              _elem228 = iprot.readI32();
              struct.behavioral.add(_elem228);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list230 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list230.size);
            int _elem231;
            for (int _i232 = 0; _i232 < _list230.size; ++_i232)
            {
              _elem231 = iprot.readI32();
              struct.non_behavioral.add(_elem231);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list233.size);
            DiscreteInputArchitecture _elem234;
            for (int _i235 = 0; _i235 < _list233.size; ++_i235)
            {
              _elem234 = new DiscreteInputArchitecture();
              _elem234.read(iprot);
              struct.all_archs.add(_elem234);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_result, getDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_result() {
    }

    public getDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_result(getDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesDiscrete_result deepCopy() {
      return new getDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_result)
        return this.equals((getDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list236.size);
                  Feature _elem237;
                  for (int _i238 = 0; _i238 < _list236.size; ++_i238)
                  {
                    _elem237 = new Feature();
                    _elem237.read(iprot);
                    struct.success.add(_elem237);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter239 : struct.success)
            {
              _iter239.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter240 : struct.success)
            {
              _iter240.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list241.size);
            Feature _elem242;
            for (int _i243 = 0; _i243 < _list241.size; ++_i243)
            {
              _elem242 = new Feature();
              _elem242.read(iprot);
              struct.success.add(_elem242);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_args, getMarginalDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField LOGICAL_CONNECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("logical_connective", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public java.lang.String logical_connective; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs"),
      FEATURE_EXPRESSION((short)6, "featureExpression"),
      LOGICAL_CONNECTIVE((short)7, "logical_connective");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          case 6: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 7: // LOGICAL_CONNECTIVE
            return LOGICAL_CONNECTIVE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGICAL_CONNECTIVE, new org.apache.thrift.meta_data.FieldMetaData("logical_connective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_args() {
    }

    public getMarginalDrivingFeaturesDiscrete_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      java.lang.String featureExpression,
      java.lang.String logical_connective)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.logical_connective = logical_connective;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_args(getMarginalDrivingFeaturesDiscrete_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      if (other.isSetLogical_connective()) {
        this.logical_connective = other.logical_connective;
      }
    }

    public getMarginalDrivingFeaturesDiscrete_args deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      this.logical_connective = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getMarginalDrivingFeaturesDiscrete_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesDiscrete_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public java.lang.String getLogical_connective() {
      return this.logical_connective;
    }

    public getMarginalDrivingFeaturesDiscrete_args setLogical_connective(java.lang.String logical_connective) {
      this.logical_connective = logical_connective;
      return this;
    }

    public void unsetLogical_connective() {
      this.logical_connective = null;
    }

    /** Returns true if field logical_connective is set (has been assigned a value) and false otherwise */
    public boolean isSetLogical_connective() {
      return this.logical_connective != null;
    }

    public void setLogical_connectiveIsSet(boolean value) {
      if (!value) {
        this.logical_connective = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case LOGICAL_CONNECTIVE:
        if (value == null) {
          unsetLogical_connective();
        } else {
          setLogical_connective((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case LOGICAL_CONNECTIVE:
        return getLogical_connective();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case LOGICAL_CONNECTIVE:
        return isSetLogical_connective();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_args)
        return this.equals((getMarginalDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_logical_connective = true && this.isSetLogical_connective();
      boolean that_present_logical_connective = true && that.isSetLogical_connective();
      if (this_present_logical_connective || that_present_logical_connective) {
        if (!(this_present_logical_connective && that_present_logical_connective))
          return false;
        if (!this.logical_connective.equals(that.logical_connective))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogical_connective()) ? 131071 : 524287);
      if (isSetLogical_connective())
        hashCode = hashCode * 8191 + logical_connective.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogical_connective()).compareTo(other.isSetLogical_connective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogical_connective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logical_connective, other.logical_connective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logical_connective:");
      if (this.logical_connective == null) {
        sb.append("null");
      } else {
        sb.append(this.logical_connective);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list244.size);
                  int _elem245;
                  for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                  {
                    _elem245 = iprot.readI32();
                    struct.behavioral.add(_elem245);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list247.size);
                  int _elem248;
                  for (int _i249 = 0; _i249 < _list247.size; ++_i249)
                  {
                    _elem248 = iprot.readI32();
                    struct.non_behavioral.add(_elem248);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list250.size);
                  DiscreteInputArchitecture _elem251;
                  for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                  {
                    _elem251 = new DiscreteInputArchitecture();
                    _elem251.read(iprot);
                    struct.all_archs.add(_elem251);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LOGICAL_CONNECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logical_connective = iprot.readString();
                struct.setLogical_connectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter253 : struct.behavioral)
            {
              oprot.writeI32(_iter253);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter254 : struct.non_behavioral)
            {
              oprot.writeI32(_iter254);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter255 : struct.all_archs)
            {
              _iter255.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        if (struct.logical_connective != null) {
          oprot.writeFieldBegin(LOGICAL_CONNECTIVE_FIELD_DESC);
          oprot.writeString(struct.logical_connective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(5);
        }
        if (struct.isSetLogical_connective()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter256 : struct.behavioral)
            {
              oprot.writeI32(_iter256);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter257 : struct.non_behavioral)
            {
              oprot.writeI32(_iter257);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter258 : struct.all_archs)
            {
              _iter258.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetLogical_connective()) {
          oprot.writeString(struct.logical_connective);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list259 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list259.size);
            int _elem260;
            for (int _i261 = 0; _i261 < _list259.size; ++_i261)
            {
              _elem260 = iprot.readI32();
              struct.behavioral.add(_elem260);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list262 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list262.size);
            int _elem263;
            for (int _i264 = 0; _i264 < _list262.size; ++_i264)
            {
              _elem263 = iprot.readI32();
              struct.non_behavioral.add(_elem263);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list265.size);
            DiscreteInputArchitecture _elem266;
            for (int _i267 = 0; _i267 < _list265.size; ++_i267)
            {
              _elem266 = new DiscreteInputArchitecture();
              _elem266.read(iprot);
              struct.all_archs.add(_elem266);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.logical_connective = iprot.readString();
          struct.setLogical_connectiveIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_result, getMarginalDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_result() {
    }

    public getMarginalDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_result(getMarginalDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesDiscrete_result deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_result)
        return this.equals((getMarginalDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list268 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list268.size);
                  Feature _elem269;
                  for (int _i270 = 0; _i270 < _list268.size; ++_i270)
                  {
                    _elem269 = new Feature();
                    _elem269.read(iprot);
                    struct.success.add(_elem269);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter271 : struct.success)
            {
              _iter271.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter272 : struct.success)
            {
              _iter272.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list273 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list273.size);
            Feature _elem274;
            for (int _i275 = 0; _i275 < _list273.size; ++_i275)
            {
              _elem274 = new Feature();
              _elem274.read(iprot);
              struct.success.add(_elem274);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEADiscrete_args implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEADiscrete_args, getDrivingFeaturesEpsilonMOEADiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEADiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEADiscrete_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEADiscrete_args.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args() {
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEADiscrete_args(getDrivingFeaturesEpsilonMOEADiscrete_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args deepCopy() {
      return new getDrivingFeaturesEpsilonMOEADiscrete_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEADiscrete_args)
        return this.equals((getDrivingFeaturesEpsilonMOEADiscrete_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEADiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEADiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEADiscrete_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEADiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list276 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list276.size);
                  int _elem277;
                  for (int _i278 = 0; _i278 < _list276.size; ++_i278)
                  {
                    _elem277 = iprot.readI32();
                    struct.behavioral.add(_elem277);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list279 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list279.size);
                  int _elem280;
                  for (int _i281 = 0; _i281 < _list279.size; ++_i281)
                  {
                    _elem280 = iprot.readI32();
                    struct.non_behavioral.add(_elem280);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list282 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list282.size);
                  DiscreteInputArchitecture _elem283;
                  for (int _i284 = 0; _i284 < _list282.size; ++_i284)
                  {
                    _elem283 = new DiscreteInputArchitecture();
                    _elem283.read(iprot);
                    struct.all_archs.add(_elem283);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter285 : struct.behavioral)
            {
              oprot.writeI32(_iter285);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter286 : struct.non_behavioral)
            {
              oprot.writeI32(_iter286);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter287 : struct.all_archs)
            {
              _iter287.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEADiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter288 : struct.behavioral)
            {
              oprot.writeI32(_iter288);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter289 : struct.non_behavioral)
            {
              oprot.writeI32(_iter289);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter290 : struct.all_archs)
            {
              _iter290.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list291.size);
            int _elem292;
            for (int _i293 = 0; _i293 < _list291.size; ++_i293)
            {
              _elem292 = iprot.readI32();
              struct.behavioral.add(_elem292);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list294 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list294.size);
            int _elem295;
            for (int _i296 = 0; _i296 < _list294.size; ++_i296)
            {
              _elem295 = iprot.readI32();
              struct.non_behavioral.add(_elem295);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list297 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list297.size);
            DiscreteInputArchitecture _elem298;
            for (int _i299 = 0; _i299 < _list297.size; ++_i299)
            {
              _elem298 = new DiscreteInputArchitecture();
              _elem298.read(iprot);
              struct.all_archs.add(_elem298);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEADiscrete_result implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEADiscrete_result, getDrivingFeaturesEpsilonMOEADiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEADiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEADiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEADiscrete_result.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result() {
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEADiscrete_result(getDrivingFeaturesEpsilonMOEADiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result deepCopy() {
      return new getDrivingFeaturesEpsilonMOEADiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEADiscrete_result)
        return this.equals((getDrivingFeaturesEpsilonMOEADiscrete_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEADiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEADiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEADiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEADiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list300 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list300.size);
                  Feature _elem301;
                  for (int _i302 = 0; _i302 < _list300.size; ++_i302)
                  {
                    _elem301 = new Feature();
                    _elem301.read(iprot);
                    struct.success.add(_elem301);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter303 : struct.success)
            {
              _iter303.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEADiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter304 : struct.success)
            {
              _iter304.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list305 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list305.size);
            Feature _elem306;
            for (int _i307 = 0; _i307 < _list305.size; ++_i307)
            {
              _elem306 = new Feature();
              _elem306.read(iprot);
              struct.success.add(_elem306);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesContinuous_args implements org.apache.thrift.TBase<getDrivingFeaturesContinuous_args, getDrivingFeaturesContinuous_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesContinuous_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesContinuous_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesContinuous_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesContinuous_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<ContinuousInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContinuousInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesContinuous_args.class, metaDataMap);
    }

    public getDrivingFeaturesContinuous_args() {
    }

    public getDrivingFeaturesContinuous_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<ContinuousInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesContinuous_args(getDrivingFeaturesContinuous_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<ContinuousInputArchitecture> __this__all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(other.all_archs.size());
        for (ContinuousInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new ContinuousInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesContinuous_args deepCopy() {
      return new getDrivingFeaturesContinuous_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesContinuous_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesContinuous_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesContinuous_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<ContinuousInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(ContinuousInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<ContinuousInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesContinuous_args setAll_archs(java.util.List<ContinuousInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesContinuous_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesContinuous_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesContinuous_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<ContinuousInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesContinuous_args)
        return this.equals((getDrivingFeaturesContinuous_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesContinuous_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesContinuous_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesContinuous_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesContinuous_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesContinuous_argsStandardScheme getScheme() {
        return new getDrivingFeaturesContinuous_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesContinuous_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesContinuous_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list308 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list308.size);
                  int _elem309;
                  for (int _i310 = 0; _i310 < _list308.size; ++_i310)
                  {
                    _elem309 = iprot.readI32();
                    struct.behavioral.add(_elem309);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list311 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list311.size);
                  int _elem312;
                  for (int _i313 = 0; _i313 < _list311.size; ++_i313)
                  {
                    _elem312 = iprot.readI32();
                    struct.non_behavioral.add(_elem312);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(_list314.size);
                  ContinuousInputArchitecture _elem315;
                  for (int _i316 = 0; _i316 < _list314.size; ++_i316)
                  {
                    _elem315 = new ContinuousInputArchitecture();
                    _elem315.read(iprot);
                    struct.all_archs.add(_elem315);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesContinuous_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter317 : struct.behavioral)
            {
              oprot.writeI32(_iter317);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter318 : struct.non_behavioral)
            {
              oprot.writeI32(_iter318);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (ContinuousInputArchitecture _iter319 : struct.all_archs)
            {
              _iter319.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesContinuous_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesContinuous_argsTupleScheme getScheme() {
        return new getDrivingFeaturesContinuous_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesContinuous_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesContinuous_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter320 : struct.behavioral)
            {
              oprot.writeI32(_iter320);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter321 : struct.non_behavioral)
            {
              oprot.writeI32(_iter321);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (ContinuousInputArchitecture _iter322 : struct.all_archs)
            {
              _iter322.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list323 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list323.size);
            int _elem324;
            for (int _i325 = 0; _i325 < _list323.size; ++_i325)
            {
              _elem324 = iprot.readI32();
              struct.behavioral.add(_elem324);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list326 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list326.size);
            int _elem327;
            for (int _i328 = 0; _i328 < _list326.size; ++_i328)
            {
              _elem327 = iprot.readI32();
              struct.non_behavioral.add(_elem327);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list329 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(_list329.size);
            ContinuousInputArchitecture _elem330;
            for (int _i331 = 0; _i331 < _list329.size; ++_i331)
            {
              _elem330 = new ContinuousInputArchitecture();
              _elem330.read(iprot);
              struct.all_archs.add(_elem330);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesContinuous_result implements org.apache.thrift.TBase<getDrivingFeaturesContinuous_result, getDrivingFeaturesContinuous_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesContinuous_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesContinuous_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesContinuous_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesContinuous_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesContinuous_result.class, metaDataMap);
    }

    public getDrivingFeaturesContinuous_result() {
    }

    public getDrivingFeaturesContinuous_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesContinuous_result(getDrivingFeaturesContinuous_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesContinuous_result deepCopy() {
      return new getDrivingFeaturesContinuous_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesContinuous_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesContinuous_result)
        return this.equals((getDrivingFeaturesContinuous_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesContinuous_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesContinuous_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesContinuous_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesContinuous_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesContinuous_resultStandardScheme getScheme() {
        return new getDrivingFeaturesContinuous_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesContinuous_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesContinuous_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list332 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list332.size);
                  Feature _elem333;
                  for (int _i334 = 0; _i334 < _list332.size; ++_i334)
                  {
                    _elem333 = new Feature();
                    _elem333.read(iprot);
                    struct.success.add(_elem333);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesContinuous_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter335 : struct.success)
            {
              _iter335.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesContinuous_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesContinuous_resultTupleScheme getScheme() {
        return new getDrivingFeaturesContinuous_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesContinuous_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesContinuous_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter336 : struct.success)
            {
              _iter336.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list337 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list337.size);
            Feature _elem338;
            for (int _i339 = 0; _i339 < _list337.size; ++_i339)
            {
              _elem338 = new Feature();
              _elem338.read(iprot);
              struct.success.add(_elem338);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEAContinuous_args implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEAContinuous_args, getDrivingFeaturesEpsilonMOEAContinuous_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEAContinuous_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEAContinuous_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEAContinuous_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEAContinuous_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<ContinuousInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContinuousInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEAContinuous_args.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args() {
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<ContinuousInputArchitecture> all_archs)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEAContinuous_args(getDrivingFeaturesEpsilonMOEAContinuous_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<ContinuousInputArchitecture> __this__all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(other.all_archs.size());
        for (ContinuousInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new ContinuousInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args deepCopy() {
      return new getDrivingFeaturesEpsilonMOEAContinuous_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<ContinuousInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(ContinuousInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<ContinuousInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_args setAll_archs(java.util.List<ContinuousInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<ContinuousInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEAContinuous_args)
        return this.equals((getDrivingFeaturesEpsilonMOEAContinuous_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEAContinuous_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEAContinuous_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEAContinuous_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEAContinuous_argsStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEAContinuous_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEAContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list340.size);
                  int _elem341;
                  for (int _i342 = 0; _i342 < _list340.size; ++_i342)
                  {
                    _elem341 = iprot.readI32();
                    struct.behavioral.add(_elem341);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list343 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list343.size);
                  int _elem344;
                  for (int _i345 = 0; _i345 < _list343.size; ++_i345)
                  {
                    _elem344 = iprot.readI32();
                    struct.non_behavioral.add(_elem344);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list346 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(_list346.size);
                  ContinuousInputArchitecture _elem347;
                  for (int _i348 = 0; _i348 < _list346.size; ++_i348)
                  {
                    _elem347 = new ContinuousInputArchitecture();
                    _elem347.read(iprot);
                    struct.all_archs.add(_elem347);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEAContinuous_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter349 : struct.behavioral)
            {
              oprot.writeI32(_iter349);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter350 : struct.non_behavioral)
            {
              oprot.writeI32(_iter350);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (ContinuousInputArchitecture _iter351 : struct.all_archs)
            {
              _iter351.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEAContinuous_argsTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEAContinuous_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEAContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter352 : struct.behavioral)
            {
              oprot.writeI32(_iter352);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter353 : struct.non_behavioral)
            {
              oprot.writeI32(_iter353);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (ContinuousInputArchitecture _iter354 : struct.all_archs)
            {
              _iter354.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEAContinuous_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list355 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list355.size);
            int _elem356;
            for (int _i357 = 0; _i357 < _list355.size; ++_i357)
            {
              _elem356 = iprot.readI32();
              struct.behavioral.add(_elem356);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list358 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list358.size);
            int _elem359;
            for (int _i360 = 0; _i360 < _list358.size; ++_i360)
            {
              _elem359 = iprot.readI32();
              struct.non_behavioral.add(_elem359);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<ContinuousInputArchitecture>(_list361.size);
            ContinuousInputArchitecture _elem362;
            for (int _i363 = 0; _i363 < _list361.size; ++_i363)
            {
              _elem362 = new ContinuousInputArchitecture();
              _elem362.read(iprot);
              struct.all_archs.add(_elem362);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEAContinuous_result implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEAContinuous_result, getDrivingFeaturesEpsilonMOEAContinuous_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEAContinuous_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEAContinuous_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEAContinuous_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEAContinuous_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEAContinuous_result.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_result() {
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEAContinuous_result(getDrivingFeaturesEpsilonMOEAContinuous_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_result deepCopy() {
      return new getDrivingFeaturesEpsilonMOEAContinuous_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesEpsilonMOEAContinuous_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEAContinuous_result)
        return this.equals((getDrivingFeaturesEpsilonMOEAContinuous_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEAContinuous_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEAContinuous_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEAContinuous_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEAContinuous_resultStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEAContinuous_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEAContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list364.size);
                  Feature _elem365;
                  for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                  {
                    _elem365 = new Feature();
                    _elem365.read(iprot);
                    struct.success.add(_elem365);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEAContinuous_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter367 : struct.success)
            {
              _iter367.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEAContinuous_resultTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEAContinuous_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEAContinuous_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEAContinuous_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEAContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter368 : struct.success)
            {
              _iter368.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEAContinuous_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list369 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list369.size);
            Feature _elem370;
            for (int _i371 = 0; _i371 < _list369.size; ++_i371)
            {
              _elem370 = new Feature();
              _elem370.read(iprot);
              struct.success.add(_elem370);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class generalizeFeatureBinary_args implements org.apache.thrift.TBase<generalizeFeatureBinary_args, generalizeFeatureBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<generalizeFeatureBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generalizeFeatureBinary_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField ROOTFEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("rootfeatureExpression", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField NODE_FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeFeatureExpression", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generalizeFeatureBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generalizeFeatureBinary_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String rootfeatureExpression; // required
    public java.lang.String nodeFeatureExpression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs"),
      ROOTFEATURE_EXPRESSION((short)6, "rootfeatureExpression"),
      NODE_FEATURE_EXPRESSION((short)7, "nodeFeatureExpression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          case 6: // ROOTFEATURE_EXPRESSION
            return ROOTFEATURE_EXPRESSION;
          case 7: // NODE_FEATURE_EXPRESSION
            return NODE_FEATURE_EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.ROOTFEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("rootfeatureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("nodeFeatureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generalizeFeatureBinary_args.class, metaDataMap);
    }

    public generalizeFeatureBinary_args() {
    }

    public generalizeFeatureBinary_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String rootfeatureExpression,
      java.lang.String nodeFeatureExpression)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.rootfeatureExpression = rootfeatureExpression;
      this.nodeFeatureExpression = nodeFeatureExpression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generalizeFeatureBinary_args(generalizeFeatureBinary_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetRootfeatureExpression()) {
        this.rootfeatureExpression = other.rootfeatureExpression;
      }
      if (other.isSetNodeFeatureExpression()) {
        this.nodeFeatureExpression = other.nodeFeatureExpression;
      }
    }

    public generalizeFeatureBinary_args deepCopy() {
      return new generalizeFeatureBinary_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.rootfeatureExpression = null;
      this.nodeFeatureExpression = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public generalizeFeatureBinary_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public generalizeFeatureBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public generalizeFeatureBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public generalizeFeatureBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public generalizeFeatureBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getRootfeatureExpression() {
      return this.rootfeatureExpression;
    }

    public generalizeFeatureBinary_args setRootfeatureExpression(java.lang.String rootfeatureExpression) {
      this.rootfeatureExpression = rootfeatureExpression;
      return this;
    }

    public void unsetRootfeatureExpression() {
      this.rootfeatureExpression = null;
    }

    /** Returns true if field rootfeatureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetRootfeatureExpression() {
      return this.rootfeatureExpression != null;
    }

    public void setRootfeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.rootfeatureExpression = null;
      }
    }

    public java.lang.String getNodeFeatureExpression() {
      return this.nodeFeatureExpression;
    }

    public generalizeFeatureBinary_args setNodeFeatureExpression(java.lang.String nodeFeatureExpression) {
      this.nodeFeatureExpression = nodeFeatureExpression;
      return this;
    }

    public void unsetNodeFeatureExpression() {
      this.nodeFeatureExpression = null;
    }

    /** Returns true if field nodeFeatureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeFeatureExpression() {
      return this.nodeFeatureExpression != null;
    }

    public void setNodeFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.nodeFeatureExpression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case ROOTFEATURE_EXPRESSION:
        if (value == null) {
          unsetRootfeatureExpression();
        } else {
          setRootfeatureExpression((java.lang.String)value);
        }
        break;

      case NODE_FEATURE_EXPRESSION:
        if (value == null) {
          unsetNodeFeatureExpression();
        } else {
          setNodeFeatureExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case ROOTFEATURE_EXPRESSION:
        return getRootfeatureExpression();

      case NODE_FEATURE_EXPRESSION:
        return getNodeFeatureExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case ROOTFEATURE_EXPRESSION:
        return isSetRootfeatureExpression();
      case NODE_FEATURE_EXPRESSION:
        return isSetNodeFeatureExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof generalizeFeatureBinary_args)
        return this.equals((generalizeFeatureBinary_args)that);
      return false;
    }

    public boolean equals(generalizeFeatureBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_rootfeatureExpression = true && this.isSetRootfeatureExpression();
      boolean that_present_rootfeatureExpression = true && that.isSetRootfeatureExpression();
      if (this_present_rootfeatureExpression || that_present_rootfeatureExpression) {
        if (!(this_present_rootfeatureExpression && that_present_rootfeatureExpression))
          return false;
        if (!this.rootfeatureExpression.equals(that.rootfeatureExpression))
          return false;
      }

      boolean this_present_nodeFeatureExpression = true && this.isSetNodeFeatureExpression();
      boolean that_present_nodeFeatureExpression = true && that.isSetNodeFeatureExpression();
      if (this_present_nodeFeatureExpression || that_present_nodeFeatureExpression) {
        if (!(this_present_nodeFeatureExpression && that_present_nodeFeatureExpression))
          return false;
        if (!this.nodeFeatureExpression.equals(that.nodeFeatureExpression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetRootfeatureExpression()) ? 131071 : 524287);
      if (isSetRootfeatureExpression())
        hashCode = hashCode * 8191 + rootfeatureExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetNodeFeatureExpression()) ? 131071 : 524287);
      if (isSetNodeFeatureExpression())
        hashCode = hashCode * 8191 + nodeFeatureExpression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(generalizeFeatureBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRootfeatureExpression()).compareTo(other.isSetRootfeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRootfeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rootfeatureExpression, other.rootfeatureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeFeatureExpression()).compareTo(other.isSetNodeFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeFeatureExpression, other.nodeFeatureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generalizeFeatureBinary_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rootfeatureExpression:");
      if (this.rootfeatureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.rootfeatureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeFeatureExpression:");
      if (this.nodeFeatureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeFeatureExpression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generalizeFeatureBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public generalizeFeatureBinary_argsStandardScheme getScheme() {
        return new generalizeFeatureBinary_argsStandardScheme();
      }
    }

    private static class generalizeFeatureBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<generalizeFeatureBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generalizeFeatureBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list372 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list372.size);
                  int _elem373;
                  for (int _i374 = 0; _i374 < _list372.size; ++_i374)
                  {
                    _elem373 = iprot.readI32();
                    struct.behavioral.add(_elem373);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list375 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list375.size);
                  int _elem376;
                  for (int _i377 = 0; _i377 < _list375.size; ++_i377)
                  {
                    _elem376 = iprot.readI32();
                    struct.non_behavioral.add(_elem376);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list378 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list378.size);
                  BinaryInputArchitecture _elem379;
                  for (int _i380 = 0; _i380 < _list378.size; ++_i380)
                  {
                    _elem379 = new BinaryInputArchitecture();
                    _elem379.read(iprot);
                    struct.all_archs.add(_elem379);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ROOTFEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rootfeatureExpression = iprot.readString();
                struct.setRootfeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // NODE_FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeFeatureExpression = iprot.readString();
                struct.setNodeFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generalizeFeatureBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter381 : struct.behavioral)
            {
              oprot.writeI32(_iter381);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter382 : struct.non_behavioral)
            {
              oprot.writeI32(_iter382);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter383 : struct.all_archs)
            {
              _iter383.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.rootfeatureExpression != null) {
          oprot.writeFieldBegin(ROOTFEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.rootfeatureExpression);
          oprot.writeFieldEnd();
        }
        if (struct.nodeFeatureExpression != null) {
          oprot.writeFieldBegin(NODE_FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.nodeFeatureExpression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generalizeFeatureBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public generalizeFeatureBinary_argsTupleScheme getScheme() {
        return new generalizeFeatureBinary_argsTupleScheme();
      }
    }

    private static class generalizeFeatureBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<generalizeFeatureBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generalizeFeatureBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        if (struct.isSetRootfeatureExpression()) {
          optionals.set(5);
        }
        if (struct.isSetNodeFeatureExpression()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter384 : struct.behavioral)
            {
              oprot.writeI32(_iter384);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter385 : struct.non_behavioral)
            {
              oprot.writeI32(_iter385);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter386 : struct.all_archs)
            {
              _iter386.write(oprot);
            }
          }
        }
        if (struct.isSetRootfeatureExpression()) {
          oprot.writeString(struct.rootfeatureExpression);
        }
        if (struct.isSetNodeFeatureExpression()) {
          oprot.writeString(struct.nodeFeatureExpression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generalizeFeatureBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list387 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list387.size);
            int _elem388;
            for (int _i389 = 0; _i389 < _list387.size; ++_i389)
            {
              _elem388 = iprot.readI32();
              struct.behavioral.add(_elem388);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list390 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list390.size);
            int _elem391;
            for (int _i392 = 0; _i392 < _list390.size; ++_i392)
            {
              _elem391 = iprot.readI32();
              struct.non_behavioral.add(_elem391);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list393 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list393.size);
            BinaryInputArchitecture _elem394;
            for (int _i395 = 0; _i395 < _list393.size; ++_i395)
            {
              _elem394 = new BinaryInputArchitecture();
              _elem394.read(iprot);
              struct.all_archs.add(_elem394);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.rootfeatureExpression = iprot.readString();
          struct.setRootfeatureExpressionIsSet(true);
        }
        if (incoming.get(6)) {
          struct.nodeFeatureExpression = iprot.readString();
          struct.setNodeFeatureExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class generalizeFeatureBinary_result implements org.apache.thrift.TBase<generalizeFeatureBinary_result, generalizeFeatureBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<generalizeFeatureBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generalizeFeatureBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new generalizeFeatureBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new generalizeFeatureBinary_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generalizeFeatureBinary_result.class, metaDataMap);
    }

    public generalizeFeatureBinary_result() {
    }

    public generalizeFeatureBinary_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generalizeFeatureBinary_result(generalizeFeatureBinary_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public generalizeFeatureBinary_result deepCopy() {
      return new generalizeFeatureBinary_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public generalizeFeatureBinary_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof generalizeFeatureBinary_result)
        return this.equals((generalizeFeatureBinary_result)that);
      return false;
    }

    public boolean equals(generalizeFeatureBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(generalizeFeatureBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("generalizeFeatureBinary_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class generalizeFeatureBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public generalizeFeatureBinary_resultStandardScheme getScheme() {
        return new generalizeFeatureBinary_resultStandardScheme();
      }
    }

    private static class generalizeFeatureBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<generalizeFeatureBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, generalizeFeatureBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, generalizeFeatureBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class generalizeFeatureBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public generalizeFeatureBinary_resultTupleScheme getScheme() {
        return new generalizeFeatureBinary_resultTupleScheme();
      }
    }

    private static class generalizeFeatureBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<generalizeFeatureBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, generalizeFeatureBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, generalizeFeatureBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesWithGeneralizationBinary_args implements org.apache.thrift.TBase<getDrivingFeaturesWithGeneralizationBinary_args, getDrivingFeaturesWithGeneralizationBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesWithGeneralizationBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesWithGeneralizationBinary_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesWithGeneralizationBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesWithGeneralizationBinary_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      BEHAVIORAL((short)3, "behavioral"),
      NON_BEHAVIORAL((short)4, "non_behavioral"),
      ALL_ARCHS((short)5, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // BEHAVIORAL
            return BEHAVIORAL;
          case 4: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 5: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesWithGeneralizationBinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesWithGeneralizationBinary_args() {
    }

    public getDrivingFeaturesWithGeneralizationBinary_args(
      java.lang.String session,
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesWithGeneralizationBinary_args(getDrivingFeaturesWithGeneralizationBinary_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesWithGeneralizationBinary_args deepCopy() {
      return new getDrivingFeaturesWithGeneralizationBinary_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getDrivingFeaturesWithGeneralizationBinary_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesWithGeneralizationBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesWithGeneralizationBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesWithGeneralizationBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesWithGeneralizationBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesWithGeneralizationBinary_args)
        return this.equals((getDrivingFeaturesWithGeneralizationBinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesWithGeneralizationBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesWithGeneralizationBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesWithGeneralizationBinary_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesWithGeneralizationBinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesWithGeneralizationBinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesWithGeneralizationBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesWithGeneralizationBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list396 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list396.size);
                  int _elem397;
                  for (int _i398 = 0; _i398 < _list396.size; ++_i398)
                  {
                    _elem397 = iprot.readI32();
                    struct.behavioral.add(_elem397);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list399 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list399.size);
                  int _elem400;
                  for (int _i401 = 0; _i401 < _list399.size; ++_i401)
                  {
                    _elem400 = iprot.readI32();
                    struct.non_behavioral.add(_elem400);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list402 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list402.size);
                  BinaryInputArchitecture _elem403;
                  for (int _i404 = 0; _i404 < _list402.size; ++_i404)
                  {
                    _elem403 = new BinaryInputArchitecture();
                    _elem403.read(iprot);
                    struct.all_archs.add(_elem403);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesWithGeneralizationBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter405 : struct.behavioral)
            {
              oprot.writeI32(_iter405);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter406 : struct.non_behavioral)
            {
              oprot.writeI32(_iter406);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter407 : struct.all_archs)
            {
              _iter407.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesWithGeneralizationBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesWithGeneralizationBinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesWithGeneralizationBinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesWithGeneralizationBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesWithGeneralizationBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(2);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(3);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter408 : struct.behavioral)
            {
              oprot.writeI32(_iter408);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter409 : struct.non_behavioral)
            {
              oprot.writeI32(_iter409);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter410 : struct.all_archs)
            {
              _iter410.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesWithGeneralizationBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list411 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list411.size);
            int _elem412;
            for (int _i413 = 0; _i413 < _list411.size; ++_i413)
            {
              _elem412 = iprot.readI32();
              struct.behavioral.add(_elem412);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list414 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list414.size);
            int _elem415;
            for (int _i416 = 0; _i416 < _list414.size; ++_i416)
            {
              _elem415 = iprot.readI32();
              struct.non_behavioral.add(_elem415);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list417 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list417.size);
            BinaryInputArchitecture _elem418;
            for (int _i419 = 0; _i419 < _list417.size; ++_i419)
            {
              _elem418 = new BinaryInputArchitecture();
              _elem418.read(iprot);
              struct.all_archs.add(_elem418);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesWithGeneralizationBinary_result implements org.apache.thrift.TBase<getDrivingFeaturesWithGeneralizationBinary_result, getDrivingFeaturesWithGeneralizationBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesWithGeneralizationBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesWithGeneralizationBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesWithGeneralizationBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesWithGeneralizationBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesWithGeneralizationBinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesWithGeneralizationBinary_result() {
    }

    public getDrivingFeaturesWithGeneralizationBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesWithGeneralizationBinary_result(getDrivingFeaturesWithGeneralizationBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesWithGeneralizationBinary_result deepCopy() {
      return new getDrivingFeaturesWithGeneralizationBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesWithGeneralizationBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesWithGeneralizationBinary_result)
        return this.equals((getDrivingFeaturesWithGeneralizationBinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesWithGeneralizationBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesWithGeneralizationBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesWithGeneralizationBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesWithGeneralizationBinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesWithGeneralizationBinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesWithGeneralizationBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesWithGeneralizationBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list420 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list420.size);
                  Feature _elem421;
                  for (int _i422 = 0; _i422 < _list420.size; ++_i422)
                  {
                    _elem421 = new Feature();
                    _elem421.read(iprot);
                    struct.success.add(_elem421);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesWithGeneralizationBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter423 : struct.success)
            {
              _iter423.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesWithGeneralizationBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesWithGeneralizationBinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesWithGeneralizationBinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesWithGeneralizationBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesWithGeneralizationBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesWithGeneralizationBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter424 : struct.success)
            {
              _iter424.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesWithGeneralizationBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list425 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list425.size);
            Feature _elem426;
            for (int _i427 = 0; _i427 < _list425.size; ++_i427)
            {
              _elem426 = new Feature();
              _elem426.read(iprot);
              struct.success.add(_elem426);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class simplifyFeatureExpression_args implements org.apache.thrift.TBase<simplifyFeatureExpression_args, simplifyFeatureExpression_args._Fields>, java.io.Serializable, Cloneable, Comparable<simplifyFeatureExpression_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("simplifyFeatureExpression_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new simplifyFeatureExpression_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new simplifyFeatureExpression_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      EXPRESSION((short)3, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(simplifyFeatureExpression_args.class, metaDataMap);
    }

    public simplifyFeatureExpression_args() {
    }

    public simplifyFeatureExpression_args(
      java.lang.String session,
      java.lang.String problem,
      java.lang.String expression)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public simplifyFeatureExpression_args(simplifyFeatureExpression_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public simplifyFeatureExpression_args deepCopy() {
      return new simplifyFeatureExpression_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.expression = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public simplifyFeatureExpression_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public simplifyFeatureExpression_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public simplifyFeatureExpression_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof simplifyFeatureExpression_args)
        return this.equals((simplifyFeatureExpression_args)that);
      return false;
    }

    public boolean equals(simplifyFeatureExpression_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(simplifyFeatureExpression_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("simplifyFeatureExpression_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class simplifyFeatureExpression_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public simplifyFeatureExpression_argsStandardScheme getScheme() {
        return new simplifyFeatureExpression_argsStandardScheme();
      }
    }

    private static class simplifyFeatureExpression_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<simplifyFeatureExpression_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, simplifyFeatureExpression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, simplifyFeatureExpression_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class simplifyFeatureExpression_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public simplifyFeatureExpression_argsTupleScheme getScheme() {
        return new simplifyFeatureExpression_argsTupleScheme();
      }
    }

    private static class simplifyFeatureExpression_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<simplifyFeatureExpression_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, simplifyFeatureExpression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetExpression()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, simplifyFeatureExpression_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class simplifyFeatureExpression_result implements org.apache.thrift.TBase<simplifyFeatureExpression_result, simplifyFeatureExpression_result._Fields>, java.io.Serializable, Cloneable, Comparable<simplifyFeatureExpression_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("simplifyFeatureExpression_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new simplifyFeatureExpression_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new simplifyFeatureExpression_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(simplifyFeatureExpression_result.class, metaDataMap);
    }

    public simplifyFeatureExpression_result() {
    }

    public simplifyFeatureExpression_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public simplifyFeatureExpression_result(simplifyFeatureExpression_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public simplifyFeatureExpression_result deepCopy() {
      return new simplifyFeatureExpression_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public simplifyFeatureExpression_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof simplifyFeatureExpression_result)
        return this.equals((simplifyFeatureExpression_result)that);
      return false;
    }

    public boolean equals(simplifyFeatureExpression_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(simplifyFeatureExpression_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("simplifyFeatureExpression_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class simplifyFeatureExpression_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public simplifyFeatureExpression_resultStandardScheme getScheme() {
        return new simplifyFeatureExpression_resultStandardScheme();
      }
    }

    private static class simplifyFeatureExpression_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<simplifyFeatureExpression_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, simplifyFeatureExpression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, simplifyFeatureExpression_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class simplifyFeatureExpression_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public simplifyFeatureExpression_resultTupleScheme getScheme() {
        return new simplifyFeatureExpression_resultTupleScheme();
      }
    }

    private static class simplifyFeatureExpression_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<simplifyFeatureExpression_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, simplifyFeatureExpression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, simplifyFeatureExpression_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopSearch_args implements org.apache.thrift.TBase<stopSearch_args, stopSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopSearch_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopSearch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopSearch_argsTupleSchemeFactory();

    public java.lang.String session; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopSearch_args.class, metaDataMap);
    }

    public stopSearch_args() {
    }

    public stopSearch_args(
      java.lang.String session)
    {
      this();
      this.session = session;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSearch_args(stopSearch_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
    }

    public stopSearch_args deepCopy() {
      return new stopSearch_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public stopSearch_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSearch_args)
        return this.equals((stopSearch_args)that);
      return false;
    }

    public boolean equals(stopSearch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stopSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stopSearch_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopSearch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopSearch_argsStandardScheme getScheme() {
        return new stopSearch_argsStandardScheme();
      }
    }

    private static class stopSearch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopSearch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopSearch_argsTupleScheme getScheme() {
        return new stopSearch_argsTupleScheme();
      }
    }

    private static class stopSearch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopSearch_result implements org.apache.thrift.TBase<stopSearch_result, stopSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopSearch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopSearch_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopSearch_result.class, metaDataMap);
    }

    public stopSearch_result() {
    }

    public stopSearch_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSearch_result(stopSearch_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public stopSearch_result deepCopy() {
      return new stopSearch_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public stopSearch_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSearch_result)
        return this.equals((stopSearch_result)that);
      return false;
    }

    public boolean equals(stopSearch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(stopSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stopSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopSearch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopSearch_resultStandardScheme getScheme() {
        return new stopSearch_resultStandardScheme();
      }
    }

    private static class stopSearch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopSearch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopSearch_resultTupleScheme getScheme() {
        return new stopSearch_resultTupleScheme();
      }
    }

    private static class stopSearch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexityOfFeatures_args implements org.apache.thrift.TBase<computeComplexityOfFeatures_args, computeComplexityOfFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexityOfFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexityOfFeatures_args");

    private static final org.apache.thrift.protocol.TField EXPRESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexityOfFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexityOfFeatures_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> expressions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSIONS((short)1, "expressions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSIONS
            return EXPRESSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSIONS, new org.apache.thrift.meta_data.FieldMetaData("expressions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexityOfFeatures_args.class, metaDataMap);
    }

    public computeComplexityOfFeatures_args() {
    }

    public computeComplexityOfFeatures_args(
      java.util.List<java.lang.String> expressions)
    {
      this();
      this.expressions = expressions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexityOfFeatures_args(computeComplexityOfFeatures_args other) {
      if (other.isSetExpressions()) {
        java.util.List<java.lang.String> __this__expressions = new java.util.ArrayList<java.lang.String>(other.expressions);
        this.expressions = __this__expressions;
      }
    }

    public computeComplexityOfFeatures_args deepCopy() {
      return new computeComplexityOfFeatures_args(this);
    }

    @Override
    public void clear() {
      this.expressions = null;
    }

    public int getExpressionsSize() {
      return (this.expressions == null) ? 0 : this.expressions.size();
    }

    public java.util.Iterator<java.lang.String> getExpressionsIterator() {
      return (this.expressions == null) ? null : this.expressions.iterator();
    }

    public void addToExpressions(java.lang.String elem) {
      if (this.expressions == null) {
        this.expressions = new java.util.ArrayList<java.lang.String>();
      }
      this.expressions.add(elem);
    }

    public java.util.List<java.lang.String> getExpressions() {
      return this.expressions;
    }

    public computeComplexityOfFeatures_args setExpressions(java.util.List<java.lang.String> expressions) {
      this.expressions = expressions;
      return this;
    }

    public void unsetExpressions() {
      this.expressions = null;
    }

    /** Returns true if field expressions is set (has been assigned a value) and false otherwise */
    public boolean isSetExpressions() {
      return this.expressions != null;
    }

    public void setExpressionsIsSet(boolean value) {
      if (!value) {
        this.expressions = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSIONS:
        if (value == null) {
          unsetExpressions();
        } else {
          setExpressions((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSIONS:
        return getExpressions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSIONS:
        return isSetExpressions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexityOfFeatures_args)
        return this.equals((computeComplexityOfFeatures_args)that);
      return false;
    }

    public boolean equals(computeComplexityOfFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expressions = true && this.isSetExpressions();
      boolean that_present_expressions = true && that.isSetExpressions();
      if (this_present_expressions || that_present_expressions) {
        if (!(this_present_expressions && that_present_expressions))
          return false;
        if (!this.expressions.equals(that.expressions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpressions()) ? 131071 : 524287);
      if (isSetExpressions())
        hashCode = hashCode * 8191 + expressions.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexityOfFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpressions()).compareTo(other.isSetExpressions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpressions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressions, other.expressions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexityOfFeatures_args(");
      boolean first = true;

      sb.append("expressions:");
      if (this.expressions == null) {
        sb.append("null");
      } else {
        sb.append(this.expressions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexityOfFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_argsStandardScheme getScheme() {
        return new computeComplexityOfFeatures_argsStandardScheme();
      }
    }

    private static class computeComplexityOfFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexityOfFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list428 = iprot.readListBegin();
                  struct.expressions = new java.util.ArrayList<java.lang.String>(_list428.size);
                  java.lang.String _elem429;
                  for (int _i430 = 0; _i430 < _list428.size; ++_i430)
                  {
                    _elem429 = iprot.readString();
                    struct.expressions.add(_elem429);
                  }
                  iprot.readListEnd();
                }
                struct.setExpressionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expressions != null) {
          oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.expressions.size()));
            for (java.lang.String _iter431 : struct.expressions)
            {
              oprot.writeString(_iter431);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexityOfFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_argsTupleScheme getScheme() {
        return new computeComplexityOfFeatures_argsTupleScheme();
      }
    }

    private static class computeComplexityOfFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexityOfFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpressions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpressions()) {
          {
            oprot.writeI32(struct.expressions.size());
            for (java.lang.String _iter432 : struct.expressions)
            {
              oprot.writeString(_iter432);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list433 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.expressions = new java.util.ArrayList<java.lang.String>(_list433.size);
            java.lang.String _elem434;
            for (int _i435 = 0; _i435 < _list433.size; ++_i435)
            {
              _elem434 = iprot.readString();
              struct.expressions.add(_elem434);
            }
          }
          struct.setExpressionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexityOfFeatures_result implements org.apache.thrift.TBase<computeComplexityOfFeatures_result, computeComplexityOfFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexityOfFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexityOfFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexityOfFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexityOfFeatures_resultTupleSchemeFactory();

    public java.util.List<java.lang.Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexityOfFeatures_result.class, metaDataMap);
    }

    public computeComplexityOfFeatures_result() {
    }

    public computeComplexityOfFeatures_result(
      java.util.List<java.lang.Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexityOfFeatures_result(computeComplexityOfFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success);
        this.success = __this__success;
      }
    }

    public computeComplexityOfFeatures_result deepCopy() {
      return new computeComplexityOfFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public computeComplexityOfFeatures_result setSuccess(java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexityOfFeatures_result)
        return this.equals((computeComplexityOfFeatures_result)that);
      return false;
    }

    public boolean equals(computeComplexityOfFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexityOfFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexityOfFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexityOfFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_resultStandardScheme getScheme() {
        return new computeComplexityOfFeatures_resultStandardScheme();
      }
    }

    private static class computeComplexityOfFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexityOfFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list436 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list436.size);
                  double _elem437;
                  for (int _i438 = 0; _i438 < _list436.size; ++_i438)
                  {
                    _elem437 = iprot.readDouble();
                    struct.success.add(_elem437);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter439 : struct.success)
            {
              oprot.writeDouble(_iter439);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexityOfFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_resultTupleScheme getScheme() {
        return new computeComplexityOfFeatures_resultTupleScheme();
      }
    }

    private static class computeComplexityOfFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexityOfFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter440 : struct.success)
            {
              oprot.writeDouble(_iter440);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list441 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Double>(_list441.size);
            double _elem442;
            for (int _i443 = 0; _i443 < _list441.size; ++_i443)
            {
              _elem442 = iprot.readDouble();
              struct.success.add(_elem442);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicality_args implements org.apache.thrift.TBase<computeAlgebraicTypicality_args, computeAlgebraicTypicality_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicality_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicality_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicality_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicality_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public BinaryInputArchitecture arch; // required
    public java.lang.String feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCH((short)2, "arch"),
      FEATURE((short)3, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCH
            return ARCH;
          case 3: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicality_args.class, metaDataMap);
    }

    public computeAlgebraicTypicality_args() {
    }

    public computeAlgebraicTypicality_args(
      java.lang.String problem,
      BinaryInputArchitecture arch,
      java.lang.String feature)
    {
      this();
      this.problem = problem;
      this.arch = arch;
      this.feature = feature;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicality_args(computeAlgebraicTypicality_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
    }

    public computeAlgebraicTypicality_args deepCopy() {
      return new computeAlgebraicTypicality_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.arch = null;
      this.feature = null;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public computeAlgebraicTypicality_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public computeAlgebraicTypicality_args setArch(BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public computeAlgebraicTypicality_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCH:
        return getArch();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCH:
        return isSetArch();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicality_args)
        return this.equals((computeAlgebraicTypicality_args)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicality_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicality_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicality_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicality_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_argsStandardScheme getScheme() {
        return new computeAlgebraicTypicality_argsStandardScheme();
      }
    }

    private static class computeAlgebraicTypicality_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicality_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicality_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_argsTupleScheme getScheme() {
        return new computeAlgebraicTypicality_argsTupleScheme();
      }
    }

    private static class computeAlgebraicTypicality_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicality_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArch()) {
          optionals.set(1);
        }
        if (struct.isSetFeature()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(2)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicality_result implements org.apache.thrift.TBase<computeAlgebraicTypicality_result, computeAlgebraicTypicality_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicality_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicality_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicality_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicality_resultTupleSchemeFactory();

    public java.util.List<java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicality_result.class, metaDataMap);
    }

    public computeAlgebraicTypicality_result() {
    }

    public computeAlgebraicTypicality_result(
      java.util.List<java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicality_result(computeAlgebraicTypicality_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success.size());
        for (java.lang.Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public computeAlgebraicTypicality_result deepCopy() {
      return new computeAlgebraicTypicality_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public computeAlgebraicTypicality_result setSuccess(java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicality_result)
        return this.equals((computeAlgebraicTypicality_result)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicality_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicality_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicality_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicality_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_resultStandardScheme getScheme() {
        return new computeAlgebraicTypicality_resultStandardScheme();
      }
    }

    private static class computeAlgebraicTypicality_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicality_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list444 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list444.size);
                  int _elem445;
                  for (int _i446 = 0; _i446 < _list444.size; ++_i446)
                  {
                    _elem445 = iprot.readI32();
                    struct.success.add(_elem445);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter447 : struct.success)
            {
              oprot.writeI32(_iter447);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicality_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_resultTupleScheme getScheme() {
        return new computeAlgebraicTypicality_resultTupleScheme();
      }
    }

    private static class computeAlgebraicTypicality_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicality_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter448 : struct.success)
            {
              oprot.writeI32(_iter448);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list449 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list449.size);
            int _elem450;
            for (int _i451 = 0; _i451 < _list449.size; ++_i451)
            {
              _elem450 = iprot.readI32();
              struct.success.add(_elem450);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexity_args implements org.apache.thrift.TBase<computeComplexity_args, computeComplexity_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexity_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexity_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexity_args.class, metaDataMap);
    }

    public computeComplexity_args() {
    }

    public computeComplexity_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexity_args(computeComplexity_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public computeComplexity_args deepCopy() {
      return new computeComplexity_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public computeComplexity_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexity_args)
        return this.equals((computeComplexity_args)that);
      return false;
    }

    public boolean equals(computeComplexity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexity_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_argsStandardScheme getScheme() {
        return new computeComplexity_argsStandardScheme();
      }
    }

    private static class computeComplexity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_argsTupleScheme getScheme() {
        return new computeComplexity_argsTupleScheme();
      }
    }

    private static class computeComplexity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexity_result implements org.apache.thrift.TBase<computeComplexity_result, computeComplexity_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexity_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexity_result.class, metaDataMap);
    }

    public computeComplexity_result() {
    }

    public computeComplexity_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexity_result(computeComplexity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public computeComplexity_result deepCopy() {
      return new computeComplexity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public computeComplexity_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexity_result)
        return this.equals((computeComplexity_result)that);
      return false;
    }

    public boolean equals(computeComplexity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_resultStandardScheme getScheme() {
        return new computeComplexity_resultStandardScheme();
      }
    }

    private static class computeComplexity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_resultTupleScheme getScheme() {
        return new computeComplexity_resultTupleScheme();
      }
    }

    private static class computeComplexity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToCNF_args implements org.apache.thrift.TBase<convertToCNF_args, convertToCNF_args._Fields>, java.io.Serializable, Cloneable, Comparable<convertToCNF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToCNF_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToCNF_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToCNF_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToCNF_args.class, metaDataMap);
    }

    public convertToCNF_args() {
    }

    public convertToCNF_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToCNF_args(convertToCNF_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public convertToCNF_args deepCopy() {
      return new convertToCNF_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public convertToCNF_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToCNF_args)
        return this.equals((convertToCNF_args)that);
      return false;
    }

    public boolean equals(convertToCNF_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToCNF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToCNF_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToCNF_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_argsStandardScheme getScheme() {
        return new convertToCNF_argsStandardScheme();
      }
    }

    private static class convertToCNF_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToCNF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToCNF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToCNF_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_argsTupleScheme getScheme() {
        return new convertToCNF_argsTupleScheme();
      }
    }

    private static class convertToCNF_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToCNF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToCNF_result implements org.apache.thrift.TBase<convertToCNF_result, convertToCNF_result._Fields>, java.io.Serializable, Cloneable, Comparable<convertToCNF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToCNF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToCNF_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToCNF_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToCNF_result.class, metaDataMap);
    }

    public convertToCNF_result() {
    }

    public convertToCNF_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToCNF_result(convertToCNF_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public convertToCNF_result deepCopy() {
      return new convertToCNF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public convertToCNF_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToCNF_result)
        return this.equals((convertToCNF_result)that);
      return false;
    }

    public boolean equals(convertToCNF_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToCNF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToCNF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToCNF_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_resultStandardScheme getScheme() {
        return new convertToCNF_resultStandardScheme();
      }
    }

    private static class convertToCNF_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToCNF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToCNF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToCNF_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_resultTupleScheme getScheme() {
        return new convertToCNF_resultTupleScheme();
      }
    }

    private static class convertToCNF_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToCNF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToDNF_args implements org.apache.thrift.TBase<convertToDNF_args, convertToDNF_args._Fields>, java.io.Serializable, Cloneable, Comparable<convertToDNF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToDNF_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToDNF_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToDNF_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToDNF_args.class, metaDataMap);
    }

    public convertToDNF_args() {
    }

    public convertToDNF_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToDNF_args(convertToDNF_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public convertToDNF_args deepCopy() {
      return new convertToDNF_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public convertToDNF_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToDNF_args)
        return this.equals((convertToDNF_args)that);
      return false;
    }

    public boolean equals(convertToDNF_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToDNF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToDNF_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToDNF_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_argsStandardScheme getScheme() {
        return new convertToDNF_argsStandardScheme();
      }
    }

    private static class convertToDNF_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToDNF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToDNF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToDNF_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_argsTupleScheme getScheme() {
        return new convertToDNF_argsTupleScheme();
      }
    }

    private static class convertToDNF_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToDNF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToDNF_result implements org.apache.thrift.TBase<convertToDNF_result, convertToDNF_result._Fields>, java.io.Serializable, Cloneable, Comparable<convertToDNF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToDNF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToDNF_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToDNF_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToDNF_result.class, metaDataMap);
    }

    public convertToDNF_result() {
    }

    public convertToDNF_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToDNF_result(convertToDNF_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public convertToDNF_result deepCopy() {
      return new convertToDNF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public convertToDNF_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToDNF_result)
        return this.equals((convertToDNF_result)that);
      return false;
    }

    public boolean equals(convertToDNF_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToDNF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToDNF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToDNF_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_resultStandardScheme getScheme() {
        return new convertToDNF_resultStandardScheme();
      }
    }

    private static class convertToDNF_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToDNF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToDNF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToDNF_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_resultTupleScheme getScheme() {
        return new convertToDNF_resultTupleScheme();
      }
    }

    private static class convertToDNF_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToDNF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setAssigningProblemEntities_args implements org.apache.thrift.TBase<setAssigningProblemEntities_args, setAssigningProblemEntities_args._Fields>, java.io.Serializable, Cloneable, Comparable<setAssigningProblemEntities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssigningProblemEntities_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setAssigningProblemEntities_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setAssigningProblemEntities_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public AssigningProblemEntities entities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      ENTITIES((short)3, "entities");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // ENTITIES
            return ENTITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssigningProblemEntities.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssigningProblemEntities_args.class, metaDataMap);
    }

    public setAssigningProblemEntities_args() {
    }

    public setAssigningProblemEntities_args(
      java.lang.String session,
      java.lang.String problem,
      AssigningProblemEntities entities)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.entities = entities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssigningProblemEntities_args(setAssigningProblemEntities_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetEntities()) {
        this.entities = new AssigningProblemEntities(other.entities);
      }
    }

    public setAssigningProblemEntities_args deepCopy() {
      return new setAssigningProblemEntities_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.entities = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public setAssigningProblemEntities_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public setAssigningProblemEntities_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public AssigningProblemEntities getEntities() {
      return this.entities;
    }

    public setAssigningProblemEntities_args setEntities(AssigningProblemEntities entities) {
      this.entities = entities;
      return this;
    }

    public void unsetEntities() {
      this.entities = null;
    }

    /** Returns true if field entities is set (has been assigned a value) and false otherwise */
    public boolean isSetEntities() {
      return this.entities != null;
    }

    public void setEntitiesIsSet(boolean value) {
      if (!value) {
        this.entities = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case ENTITIES:
        if (value == null) {
          unsetEntities();
        } else {
          setEntities((AssigningProblemEntities)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case ENTITIES:
        return getEntities();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case ENTITIES:
        return isSetEntities();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssigningProblemEntities_args)
        return this.equals((setAssigningProblemEntities_args)that);
      return false;
    }

    public boolean equals(setAssigningProblemEntities_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_entities = true && this.isSetEntities();
      boolean that_present_entities = true && that.isSetEntities();
      if (this_present_entities || that_present_entities) {
        if (!(this_present_entities && that_present_entities))
          return false;
        if (!this.entities.equals(that.entities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetEntities()) ? 131071 : 524287);
      if (isSetEntities())
        hashCode = hashCode * 8191 + entities.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setAssigningProblemEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setAssigningProblemEntities_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (entities != null) {
        entities.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssigningProblemEntities_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemEntities_argsStandardScheme getScheme() {
        return new setAssigningProblemEntities_argsStandardScheme();
      }
    }

    private static class setAssigningProblemEntities_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setAssigningProblemEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.entities = new AssigningProblemEntities();
                struct.entities.read(iprot);
                struct.setEntitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.entities != null) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          struct.entities.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssigningProblemEntities_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemEntities_argsTupleScheme getScheme() {
        return new setAssigningProblemEntities_argsTupleScheme();
      }
    }

    private static class setAssigningProblemEntities_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setAssigningProblemEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetEntities()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetEntities()) {
          struct.entities.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entities = new AssigningProblemEntities();
          struct.entities.read(iprot);
          struct.setEntitiesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setAssigningProblemEntities_result implements org.apache.thrift.TBase<setAssigningProblemEntities_result, setAssigningProblemEntities_result._Fields>, java.io.Serializable, Cloneable, Comparable<setAssigningProblemEntities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssigningProblemEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setAssigningProblemEntities_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setAssigningProblemEntities_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssigningProblemEntities_result.class, metaDataMap);
    }

    public setAssigningProblemEntities_result() {
    }

    public setAssigningProblemEntities_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssigningProblemEntities_result(setAssigningProblemEntities_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setAssigningProblemEntities_result deepCopy() {
      return new setAssigningProblemEntities_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setAssigningProblemEntities_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssigningProblemEntities_result)
        return this.equals((setAssigningProblemEntities_result)that);
      return false;
    }

    public boolean equals(setAssigningProblemEntities_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setAssigningProblemEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setAssigningProblemEntities_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssigningProblemEntities_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemEntities_resultStandardScheme getScheme() {
        return new setAssigningProblemEntities_resultStandardScheme();
      }
    }

    private static class setAssigningProblemEntities_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setAssigningProblemEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssigningProblemEntities_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemEntities_resultTupleScheme getScheme() {
        return new setAssigningProblemEntities_resultTupleScheme();
      }
    }

    private static class setAssigningProblemEntities_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setAssigningProblemEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setAssigningProblemGeneralizedConcepts_args implements org.apache.thrift.TBase<setAssigningProblemGeneralizedConcepts_args, setAssigningProblemGeneralizedConcepts_args._Fields>, java.io.Serializable, Cloneable, Comparable<setAssigningProblemGeneralizedConcepts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssigningProblemGeneralizedConcepts_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GENERALIZED_CONCEPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("generalizedConcepts", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setAssigningProblemGeneralizedConcepts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setAssigningProblemGeneralizedConcepts_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public AssigningProblemEntities generalizedConcepts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      GENERALIZED_CONCEPTS((short)3, "generalizedConcepts");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // GENERALIZED_CONCEPTS
            return GENERALIZED_CONCEPTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GENERALIZED_CONCEPTS, new org.apache.thrift.meta_data.FieldMetaData("generalizedConcepts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssigningProblemEntities.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssigningProblemGeneralizedConcepts_args.class, metaDataMap);
    }

    public setAssigningProblemGeneralizedConcepts_args() {
    }

    public setAssigningProblemGeneralizedConcepts_args(
      java.lang.String session,
      java.lang.String problem,
      AssigningProblemEntities generalizedConcepts)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.generalizedConcepts = generalizedConcepts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssigningProblemGeneralizedConcepts_args(setAssigningProblemGeneralizedConcepts_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetGeneralizedConcepts()) {
        this.generalizedConcepts = new AssigningProblemEntities(other.generalizedConcepts);
      }
    }

    public setAssigningProblemGeneralizedConcepts_args deepCopy() {
      return new setAssigningProblemGeneralizedConcepts_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.generalizedConcepts = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public setAssigningProblemGeneralizedConcepts_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public setAssigningProblemGeneralizedConcepts_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public AssigningProblemEntities getGeneralizedConcepts() {
      return this.generalizedConcepts;
    }

    public setAssigningProblemGeneralizedConcepts_args setGeneralizedConcepts(AssigningProblemEntities generalizedConcepts) {
      this.generalizedConcepts = generalizedConcepts;
      return this;
    }

    public void unsetGeneralizedConcepts() {
      this.generalizedConcepts = null;
    }

    /** Returns true if field generalizedConcepts is set (has been assigned a value) and false otherwise */
    public boolean isSetGeneralizedConcepts() {
      return this.generalizedConcepts != null;
    }

    public void setGeneralizedConceptsIsSet(boolean value) {
      if (!value) {
        this.generalizedConcepts = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case GENERALIZED_CONCEPTS:
        if (value == null) {
          unsetGeneralizedConcepts();
        } else {
          setGeneralizedConcepts((AssigningProblemEntities)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case GENERALIZED_CONCEPTS:
        return getGeneralizedConcepts();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case GENERALIZED_CONCEPTS:
        return isSetGeneralizedConcepts();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssigningProblemGeneralizedConcepts_args)
        return this.equals((setAssigningProblemGeneralizedConcepts_args)that);
      return false;
    }

    public boolean equals(setAssigningProblemGeneralizedConcepts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_generalizedConcepts = true && this.isSetGeneralizedConcepts();
      boolean that_present_generalizedConcepts = true && that.isSetGeneralizedConcepts();
      if (this_present_generalizedConcepts || that_present_generalizedConcepts) {
        if (!(this_present_generalizedConcepts && that_present_generalizedConcepts))
          return false;
        if (!this.generalizedConcepts.equals(that.generalizedConcepts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetGeneralizedConcepts()) ? 131071 : 524287);
      if (isSetGeneralizedConcepts())
        hashCode = hashCode * 8191 + generalizedConcepts.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setAssigningProblemGeneralizedConcepts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGeneralizedConcepts()).compareTo(other.isSetGeneralizedConcepts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGeneralizedConcepts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalizedConcepts, other.generalizedConcepts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setAssigningProblemGeneralizedConcepts_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("generalizedConcepts:");
      if (this.generalizedConcepts == null) {
        sb.append("null");
      } else {
        sb.append(this.generalizedConcepts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (generalizedConcepts != null) {
        generalizedConcepts.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemGeneralizedConcepts_argsStandardScheme getScheme() {
        return new setAssigningProblemGeneralizedConcepts_argsStandardScheme();
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setAssigningProblemGeneralizedConcepts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssigningProblemGeneralizedConcepts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GENERALIZED_CONCEPTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.generalizedConcepts = new AssigningProblemEntities();
                struct.generalizedConcepts.read(iprot);
                struct.setGeneralizedConceptsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssigningProblemGeneralizedConcepts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.generalizedConcepts != null) {
          oprot.writeFieldBegin(GENERALIZED_CONCEPTS_FIELD_DESC);
          struct.generalizedConcepts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssigningProblemGeneralizedConcepts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemGeneralizedConcepts_argsTupleScheme getScheme() {
        return new setAssigningProblemGeneralizedConcepts_argsTupleScheme();
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setAssigningProblemGeneralizedConcepts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemGeneralizedConcepts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetGeneralizedConcepts()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetGeneralizedConcepts()) {
          struct.generalizedConcepts.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemGeneralizedConcepts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          struct.generalizedConcepts = new AssigningProblemEntities();
          struct.generalizedConcepts.read(iprot);
          struct.setGeneralizedConceptsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setAssigningProblemGeneralizedConcepts_result implements org.apache.thrift.TBase<setAssigningProblemGeneralizedConcepts_result, setAssigningProblemGeneralizedConcepts_result._Fields>, java.io.Serializable, Cloneable, Comparable<setAssigningProblemGeneralizedConcepts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAssigningProblemGeneralizedConcepts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setAssigningProblemGeneralizedConcepts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setAssigningProblemGeneralizedConcepts_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAssigningProblemGeneralizedConcepts_result.class, metaDataMap);
    }

    public setAssigningProblemGeneralizedConcepts_result() {
    }

    public setAssigningProblemGeneralizedConcepts_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAssigningProblemGeneralizedConcepts_result(setAssigningProblemGeneralizedConcepts_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setAssigningProblemGeneralizedConcepts_result deepCopy() {
      return new setAssigningProblemGeneralizedConcepts_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setAssigningProblemGeneralizedConcepts_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setAssigningProblemGeneralizedConcepts_result)
        return this.equals((setAssigningProblemGeneralizedConcepts_result)that);
      return false;
    }

    public boolean equals(setAssigningProblemGeneralizedConcepts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(setAssigningProblemGeneralizedConcepts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setAssigningProblemGeneralizedConcepts_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemGeneralizedConcepts_resultStandardScheme getScheme() {
        return new setAssigningProblemGeneralizedConcepts_resultStandardScheme();
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setAssigningProblemGeneralizedConcepts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAssigningProblemGeneralizedConcepts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAssigningProblemGeneralizedConcepts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAssigningProblemGeneralizedConcepts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setAssigningProblemGeneralizedConcepts_resultTupleScheme getScheme() {
        return new setAssigningProblemGeneralizedConcepts_resultTupleScheme();
      }
    }

    private static class setAssigningProblemGeneralizedConcepts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setAssigningProblemGeneralizedConcepts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemGeneralizedConcepts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAssigningProblemGeneralizedConcepts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAssigningProblemEntities_args implements org.apache.thrift.TBase<getAssigningProblemEntities_args, getAssigningProblemEntities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigningProblemEntities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigningProblemEntities_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAssigningProblemEntities_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAssigningProblemEntities_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigningProblemEntities_args.class, metaDataMap);
    }

    public getAssigningProblemEntities_args() {
    }

    public getAssigningProblemEntities_args(
      java.lang.String session,
      java.lang.String problem)
    {
      this();
      this.session = session;
      this.problem = problem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigningProblemEntities_args(getAssigningProblemEntities_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
    }

    public getAssigningProblemEntities_args deepCopy() {
      return new getAssigningProblemEntities_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getAssigningProblemEntities_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getAssigningProblemEntities_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigningProblemEntities_args)
        return this.equals((getAssigningProblemEntities_args)that);
      return false;
    }

    public boolean equals(getAssigningProblemEntities_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAssigningProblemEntities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAssigningProblemEntities_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigningProblemEntities_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemEntities_argsStandardScheme getScheme() {
        return new getAssigningProblemEntities_argsStandardScheme();
      }
    }

    private static class getAssigningProblemEntities_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAssigningProblemEntities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigningProblemEntities_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemEntities_argsTupleScheme getScheme() {
        return new getAssigningProblemEntities_argsTupleScheme();
      }
    }

    private static class getAssigningProblemEntities_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAssigningProblemEntities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemEntities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAssigningProblemEntities_result implements org.apache.thrift.TBase<getAssigningProblemEntities_result, getAssigningProblemEntities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigningProblemEntities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigningProblemEntities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAssigningProblemEntities_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAssigningProblemEntities_resultTupleSchemeFactory();

    public AssigningProblemEntities success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssigningProblemEntities.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigningProblemEntities_result.class, metaDataMap);
    }

    public getAssigningProblemEntities_result() {
    }

    public getAssigningProblemEntities_result(
      AssigningProblemEntities success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigningProblemEntities_result(getAssigningProblemEntities_result other) {
      if (other.isSetSuccess()) {
        this.success = new AssigningProblemEntities(other.success);
      }
    }

    public getAssigningProblemEntities_result deepCopy() {
      return new getAssigningProblemEntities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AssigningProblemEntities getSuccess() {
      return this.success;
    }

    public getAssigningProblemEntities_result setSuccess(AssigningProblemEntities success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AssigningProblemEntities)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigningProblemEntities_result)
        return this.equals((getAssigningProblemEntities_result)that);
      return false;
    }

    public boolean equals(getAssigningProblemEntities_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAssigningProblemEntities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAssigningProblemEntities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigningProblemEntities_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemEntities_resultStandardScheme getScheme() {
        return new getAssigningProblemEntities_resultStandardScheme();
      }
    }

    private static class getAssigningProblemEntities_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAssigningProblemEntities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AssigningProblemEntities();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigningProblemEntities_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemEntities_resultTupleScheme getScheme() {
        return new getAssigningProblemEntities_resultTupleScheme();
      }
    }

    private static class getAssigningProblemEntities_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAssigningProblemEntities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemEntities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AssigningProblemEntities();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAssigningProblemConceptHierarchy_args implements org.apache.thrift.TBase<getAssigningProblemConceptHierarchy_args, getAssigningProblemConceptHierarchy_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigningProblemConceptHierarchy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigningProblemConceptHierarchy_args");

    private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAssigningProblemConceptHierarchy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAssigningProblemConceptHierarchy_argsTupleSchemeFactory();

    public java.lang.String session; // required
    public java.lang.String problem; // required
    public AssigningProblemEntities params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION((short)1, "session"),
      PROBLEM((short)2, "problem"),
      PARAMS((short)3, "params");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION
            return SESSION;
          case 2: // PROBLEM
            return PROBLEM;
          case 3: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssigningProblemEntities.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigningProblemConceptHierarchy_args.class, metaDataMap);
    }

    public getAssigningProblemConceptHierarchy_args() {
    }

    public getAssigningProblemConceptHierarchy_args(
      java.lang.String session,
      java.lang.String problem,
      AssigningProblemEntities params)
    {
      this();
      this.session = session;
      this.problem = problem;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigningProblemConceptHierarchy_args(getAssigningProblemConceptHierarchy_args other) {
      if (other.isSetSession()) {
        this.session = other.session;
      }
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetParams()) {
        this.params = new AssigningProblemEntities(other.params);
      }
    }

    public getAssigningProblemConceptHierarchy_args deepCopy() {
      return new getAssigningProblemConceptHierarchy_args(this);
    }

    @Override
    public void clear() {
      this.session = null;
      this.problem = null;
      this.params = null;
    }

    public java.lang.String getSession() {
      return this.session;
    }

    public getAssigningProblemConceptHierarchy_args setSession(java.lang.String session) {
      this.session = session;
      return this;
    }

    public void unsetSession() {
      this.session = null;
    }

    /** Returns true if field session is set (has been assigned a value) and false otherwise */
    public boolean isSetSession() {
      return this.session != null;
    }

    public void setSessionIsSet(boolean value) {
      if (!value) {
        this.session = null;
      }
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getAssigningProblemConceptHierarchy_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public AssigningProblemEntities getParams() {
      return this.params;
    }

    public getAssigningProblemConceptHierarchy_args setParams(AssigningProblemEntities params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION:
        if (value == null) {
          unsetSession();
        } else {
          setSession((java.lang.String)value);
        }
        break;

      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((AssigningProblemEntities)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION:
        return getSession();

      case PROBLEM:
        return getProblem();

      case PARAMS:
        return getParams();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION:
        return isSetSession();
      case PROBLEM:
        return isSetProblem();
      case PARAMS:
        return isSetParams();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigningProblemConceptHierarchy_args)
        return this.equals((getAssigningProblemConceptHierarchy_args)that);
      return false;
    }

    public boolean equals(getAssigningProblemConceptHierarchy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_session = true && this.isSetSession();
      boolean that_present_session = true && that.isSetSession();
      if (this_present_session || that_present_session) {
        if (!(this_present_session && that_present_session))
          return false;
        if (!this.session.equals(that.session))
          return false;
      }

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSession()) ? 131071 : 524287);
      if (isSetSession())
        hashCode = hashCode * 8191 + session.hashCode();

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAssigningProblemConceptHierarchy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAssigningProblemConceptHierarchy_args(");
      boolean first = true;

      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigningProblemConceptHierarchy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemConceptHierarchy_argsStandardScheme getScheme() {
        return new getAssigningProblemConceptHierarchy_argsStandardScheme();
      }
    }

    private static class getAssigningProblemConceptHierarchy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAssigningProblemConceptHierarchy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigningProblemConceptHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.session = iprot.readString();
                struct.setSessionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new AssigningProblemEntities();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigningProblemConceptHierarchy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.session != null) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          oprot.writeString(struct.session);
          oprot.writeFieldEnd();
        }
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigningProblemConceptHierarchy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemConceptHierarchy_argsTupleScheme getScheme() {
        return new getAssigningProblemConceptHierarchy_argsTupleScheme();
      }
    }

    private static class getAssigningProblemConceptHierarchy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAssigningProblemConceptHierarchy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemConceptHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSession()) {
          optionals.set(0);
        }
        if (struct.isSetProblem()) {
          optionals.set(1);
        }
        if (struct.isSetParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSession()) {
          oprot.writeString(struct.session);
        }
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemConceptHierarchy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.session = iprot.readString();
          struct.setSessionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(2)) {
          struct.params = new AssigningProblemEntities();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAssigningProblemConceptHierarchy_result implements org.apache.thrift.TBase<getAssigningProblemConceptHierarchy_result, getAssigningProblemConceptHierarchy_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAssigningProblemConceptHierarchy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAssigningProblemConceptHierarchy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAssigningProblemConceptHierarchy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAssigningProblemConceptHierarchy_resultTupleSchemeFactory();

    public FlattenedConceptHierarchy success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FlattenedConceptHierarchy.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAssigningProblemConceptHierarchy_result.class, metaDataMap);
    }

    public getAssigningProblemConceptHierarchy_result() {
    }

    public getAssigningProblemConceptHierarchy_result(
      FlattenedConceptHierarchy success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAssigningProblemConceptHierarchy_result(getAssigningProblemConceptHierarchy_result other) {
      if (other.isSetSuccess()) {
        this.success = new FlattenedConceptHierarchy(other.success);
      }
    }

    public getAssigningProblemConceptHierarchy_result deepCopy() {
      return new getAssigningProblemConceptHierarchy_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FlattenedConceptHierarchy getSuccess() {
      return this.success;
    }

    public getAssigningProblemConceptHierarchy_result setSuccess(FlattenedConceptHierarchy success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FlattenedConceptHierarchy)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAssigningProblemConceptHierarchy_result)
        return this.equals((getAssigningProblemConceptHierarchy_result)that);
      return false;
    }

    public boolean equals(getAssigningProblemConceptHierarchy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAssigningProblemConceptHierarchy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAssigningProblemConceptHierarchy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAssigningProblemConceptHierarchy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemConceptHierarchy_resultStandardScheme getScheme() {
        return new getAssigningProblemConceptHierarchy_resultStandardScheme();
      }
    }

    private static class getAssigningProblemConceptHierarchy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAssigningProblemConceptHierarchy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAssigningProblemConceptHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FlattenedConceptHierarchy();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAssigningProblemConceptHierarchy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAssigningProblemConceptHierarchy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAssigningProblemConceptHierarchy_resultTupleScheme getScheme() {
        return new getAssigningProblemConceptHierarchy_resultTupleScheme();
      }
    }

    private static class getAssigningProblemConceptHierarchy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAssigningProblemConceptHierarchy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemConceptHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAssigningProblemConceptHierarchy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FlattenedConceptHierarchy();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicalityWithStringInput_args implements org.apache.thrift.TBase<computeAlgebraicTypicalityWithStringInput_args, computeAlgebraicTypicalityWithStringInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicalityWithStringInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicalityWithStringInput_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARCHITECTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("architecture", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.lang.String architecture; // required
    public java.lang.String feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      ARCHITECTURE((short)2, "architecture"),
      FEATURE((short)3, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // ARCHITECTURE
            return ARCHITECTURE;
          case 3: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCHITECTURE, new org.apache.thrift.meta_data.FieldMetaData("architecture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicalityWithStringInput_args.class, metaDataMap);
    }

    public computeAlgebraicTypicalityWithStringInput_args() {
    }

    public computeAlgebraicTypicalityWithStringInput_args(
      java.lang.String problem,
      java.lang.String architecture,
      java.lang.String feature)
    {
      this();
      this.problem = problem;
      this.architecture = architecture;
      this.feature = feature;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicalityWithStringInput_args(computeAlgebraicTypicalityWithStringInput_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetArchitecture()) {
        this.architecture = other.architecture;
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
    }

    public computeAlgebraicTypicalityWithStringInput_args deepCopy() {
      return new computeAlgebraicTypicalityWithStringInput_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.architecture = null;
      this.feature = null;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public computeAlgebraicTypicalityWithStringInput_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public java.lang.String getArchitecture() {
      return this.architecture;
    }

    public computeAlgebraicTypicalityWithStringInput_args setArchitecture(java.lang.String architecture) {
      this.architecture = architecture;
      return this;
    }

    public void unsetArchitecture() {
      this.architecture = null;
    }

    /** Returns true if field architecture is set (has been assigned a value) and false otherwise */
    public boolean isSetArchitecture() {
      return this.architecture != null;
    }

    public void setArchitectureIsSet(boolean value) {
      if (!value) {
        this.architecture = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public computeAlgebraicTypicalityWithStringInput_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case ARCHITECTURE:
        if (value == null) {
          unsetArchitecture();
        } else {
          setArchitecture((java.lang.String)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case ARCHITECTURE:
        return getArchitecture();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case ARCHITECTURE:
        return isSetArchitecture();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicalityWithStringInput_args)
        return this.equals((computeAlgebraicTypicalityWithStringInput_args)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicalityWithStringInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_architecture = true && this.isSetArchitecture();
      boolean that_present_architecture = true && that.isSetArchitecture();
      if (this_present_architecture || that_present_architecture) {
        if (!(this_present_architecture && that_present_architecture))
          return false;
        if (!this.architecture.equals(that.architecture))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetArchitecture()) ? 131071 : 524287);
      if (isSetArchitecture())
        hashCode = hashCode * 8191 + architecture.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicalityWithStringInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArchitecture()).compareTo(other.isSetArchitecture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchitecture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.architecture, other.architecture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicalityWithStringInput_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("architecture:");
      if (this.architecture == null) {
        sb.append("null");
      } else {
        sb.append(this.architecture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_argsStandardScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_argsStandardScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicalityWithStringInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARCHITECTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.architecture = iprot.readString();
                struct.setArchitectureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.architecture != null) {
          oprot.writeFieldBegin(ARCHITECTURE_FIELD_DESC);
          oprot.writeString(struct.architecture);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicalityWithStringInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_argsTupleScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_argsTupleScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicalityWithStringInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetArchitecture()) {
          optionals.set(1);
        }
        if (struct.isSetFeature()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetArchitecture()) {
          oprot.writeString(struct.architecture);
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.architecture = iprot.readString();
          struct.setArchitectureIsSet(true);
        }
        if (incoming.get(2)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicalityWithStringInput_result implements org.apache.thrift.TBase<computeAlgebraicTypicalityWithStringInput_result, computeAlgebraicTypicalityWithStringInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicalityWithStringInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicalityWithStringInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_resultTupleSchemeFactory();

    public java.util.List<java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicalityWithStringInput_result.class, metaDataMap);
    }

    public computeAlgebraicTypicalityWithStringInput_result() {
    }

    public computeAlgebraicTypicalityWithStringInput_result(
      java.util.List<java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicalityWithStringInput_result(computeAlgebraicTypicalityWithStringInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success.size());
        for (java.lang.Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public computeAlgebraicTypicalityWithStringInput_result deepCopy() {
      return new computeAlgebraicTypicalityWithStringInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public computeAlgebraicTypicalityWithStringInput_result setSuccess(java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicalityWithStringInput_result)
        return this.equals((computeAlgebraicTypicalityWithStringInput_result)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicalityWithStringInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicalityWithStringInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicalityWithStringInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_resultStandardScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_resultStandardScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicalityWithStringInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list452 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list452.size);
                  int _elem453;
                  for (int _i454 = 0; _i454 < _list452.size; ++_i454)
                  {
                    _elem453 = iprot.readI32();
                    struct.success.add(_elem453);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter455 : struct.success)
            {
              oprot.writeI32(_iter455);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicalityWithStringInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_resultTupleScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_resultTupleScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicalityWithStringInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter456 : struct.success)
            {
              oprot.writeI32(_iter456);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list457 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list457.size);
            int _elem458;
            for (int _i459 = 0; _i459 < _list457.size; ++_i459)
            {
              _elem458 = iprot.readI32();
              struct.success.add(_elem458);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
