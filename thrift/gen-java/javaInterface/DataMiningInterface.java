/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-02")
public class DataMiningInterface {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEABinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Double> computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Integer> computeAlgebraicTypicality(BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException;

    public double computeComplexity(java.lang.String expression) throws org.apache.thrift.TException;

    public java.lang.String convertToCNF(java.lang.String expression) throws org.apache.thrift.TException;

    public java.lang.String convertToDNF(java.lang.String expression) throws org.apache.thrift.TException;

    public java.util.List<java.lang.Integer> computeAlgebraicTypicalityWithStringInput(java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesEpsilonMOEABinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void computeComplexityOfFeatures(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException;

    public void computeAlgebraicTypicality(BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

    public void computeComplexity(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void convertToCNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void convertToDNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void computeAlgebraicTypicalityWithStringInput(java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesBinary();
    }

    public void send_getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesBinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
      receiveBase(result, "getDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesBinary failed: unknown result");
    }

    public java.util.List<Feature> runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_runAutomatedLocalSearchBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_runAutomatedLocalSearchBinary();
    }

    public void send_runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchBinary_args args = new runAutomatedLocalSearchBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("runAutomatedLocalSearchBinary", args);
    }

    public java.util.List<Feature> recv_runAutomatedLocalSearchBinary() throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
      receiveBase(result, "runAutomatedLocalSearchBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchBinary failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesBinary();
    }

    public void send_getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setLogical_connective(logical_connective);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesBinary", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
      receiveBase(result, "getMarginalDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesBinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEABinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesEpsilonMOEABinary(problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesEpsilonMOEABinary();
    }

    public void send_getDrivingFeaturesEpsilonMOEABinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEABinary_args args = new getDrivingFeaturesEpsilonMOEABinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesEpsilonMOEABinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesEpsilonMOEABinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
      receiveBase(result, "getDrivingFeaturesEpsilonMOEABinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEABinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesDiscrete();
    }

    public void send_getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
      receiveBase(result, "getDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesDiscrete failed: unknown result");
    }

    public java.util.List<Feature> runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_runAutomatedLocalSearchDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_runAutomatedLocalSearchDiscrete();
    }

    public void send_runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchDiscrete_args args = new runAutomatedLocalSearchDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("runAutomatedLocalSearchDiscrete", args);
    }

    public java.util.List<Feature> recv_runAutomatedLocalSearchDiscrete() throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
      receiveBase(result, "runAutomatedLocalSearchDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesDiscrete();
    }

    public void send_getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setLogical_connective(logical_connective);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
      receiveBase(result, "getMarginalDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesEpsilonMOEADiscrete(problem, behavioral, non_behavioral, all_archs);
      return recv_getDrivingFeaturesEpsilonMOEADiscrete();
    }

    public void send_getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs) throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEADiscrete_args args = new getDrivingFeaturesEpsilonMOEADiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      sendBase("getDrivingFeaturesEpsilonMOEADiscrete", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesEpsilonMOEADiscrete() throws org.apache.thrift.TException
    {
      getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
      receiveBase(result, "getDrivingFeaturesEpsilonMOEADiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEADiscrete failed: unknown result");
    }

    public java.util.List<java.lang.Double> computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException
    {
      send_computeComplexityOfFeatures(expressions);
      return recv_computeComplexityOfFeatures();
    }

    public void send_computeComplexityOfFeatures(java.util.List<java.lang.String> expressions) throws org.apache.thrift.TException
    {
      computeComplexityOfFeatures_args args = new computeComplexityOfFeatures_args();
      args.setExpressions(expressions);
      sendBase("computeComplexityOfFeatures", args);
    }

    public java.util.List<java.lang.Double> recv_computeComplexityOfFeatures() throws org.apache.thrift.TException
    {
      computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
      receiveBase(result, "computeComplexityOfFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeComplexityOfFeatures failed: unknown result");
    }

    public java.util.List<java.lang.Integer> computeAlgebraicTypicality(BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException
    {
      send_computeAlgebraicTypicality(arch, feature);
      return recv_computeAlgebraicTypicality();
    }

    public void send_computeAlgebraicTypicality(BinaryInputArchitecture arch, java.lang.String feature) throws org.apache.thrift.TException
    {
      computeAlgebraicTypicality_args args = new computeAlgebraicTypicality_args();
      args.setArch(arch);
      args.setFeature(feature);
      sendBase("computeAlgebraicTypicality", args);
    }

    public java.util.List<java.lang.Integer> recv_computeAlgebraicTypicality() throws org.apache.thrift.TException
    {
      computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
      receiveBase(result, "computeAlgebraicTypicality");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeAlgebraicTypicality failed: unknown result");
    }

    public double computeComplexity(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_computeComplexity(expression);
      return recv_computeComplexity();
    }

    public void send_computeComplexity(java.lang.String expression) throws org.apache.thrift.TException
    {
      computeComplexity_args args = new computeComplexity_args();
      args.setExpression(expression);
      sendBase("computeComplexity", args);
    }

    public double recv_computeComplexity() throws org.apache.thrift.TException
    {
      computeComplexity_result result = new computeComplexity_result();
      receiveBase(result, "computeComplexity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeComplexity failed: unknown result");
    }

    public java.lang.String convertToCNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_convertToCNF(expression);
      return recv_convertToCNF();
    }

    public void send_convertToCNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      convertToCNF_args args = new convertToCNF_args();
      args.setExpression(expression);
      sendBase("convertToCNF", args);
    }

    public java.lang.String recv_convertToCNF() throws org.apache.thrift.TException
    {
      convertToCNF_result result = new convertToCNF_result();
      receiveBase(result, "convertToCNF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "convertToCNF failed: unknown result");
    }

    public java.lang.String convertToDNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      send_convertToDNF(expression);
      return recv_convertToDNF();
    }

    public void send_convertToDNF(java.lang.String expression) throws org.apache.thrift.TException
    {
      convertToDNF_args args = new convertToDNF_args();
      args.setExpression(expression);
      sendBase("convertToDNF", args);
    }

    public java.lang.String recv_convertToDNF() throws org.apache.thrift.TException
    {
      convertToDNF_result result = new convertToDNF_result();
      receiveBase(result, "convertToDNF");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "convertToDNF failed: unknown result");
    }

    public java.util.List<java.lang.Integer> computeAlgebraicTypicalityWithStringInput(java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException
    {
      send_computeAlgebraicTypicalityWithStringInput(architecture, feature);
      return recv_computeAlgebraicTypicalityWithStringInput();
    }

    public void send_computeAlgebraicTypicalityWithStringInput(java.lang.String architecture, java.lang.String feature) throws org.apache.thrift.TException
    {
      computeAlgebraicTypicalityWithStringInput_args args = new computeAlgebraicTypicalityWithStringInput_args();
      args.setArchitecture(architecture);
      args.setFeature(feature);
      sendBase("computeAlgebraicTypicalityWithStringInput", args);
    }

    public java.util.List<java.lang.Integer> recv_computeAlgebraicTypicalityWithStringInput() throws org.apache.thrift.TException
    {
      computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
      receiveBase(result, "computeAlgebraicTypicalityWithStringInput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "computeAlgebraicTypicalityWithStringInput failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesBinary_call method_call = new getDrivingFeaturesBinary_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesBinary();
      }
    }

    public void runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runAutomatedLocalSearchBinary_call method_call = new runAutomatedLocalSearchBinary_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runAutomatedLocalSearchBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public runAutomatedLocalSearchBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runAutomatedLocalSearchBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runAutomatedLocalSearchBinary_args args = new runAutomatedLocalSearchBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runAutomatedLocalSearchBinary();
      }
    }

    public void getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesBinary_call method_call = new getMarginalDrivingFeaturesBinary_call(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private java.lang.String logical_connective;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.logical_connective = logical_connective;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setLogical_connective(logical_connective);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesBinary();
      }
    }

    public void getDrivingFeaturesEpsilonMOEABinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesEpsilonMOEABinary_call method_call = new getDrivingFeaturesEpsilonMOEABinary_call(problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesEpsilonMOEABinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      public getDrivingFeaturesEpsilonMOEABinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesEpsilonMOEABinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesEpsilonMOEABinary_args args = new getDrivingFeaturesEpsilonMOEABinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesEpsilonMOEABinary();
      }
    }

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesDiscrete_call method_call = new getDrivingFeaturesDiscrete_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesDiscrete();
      }
    }

    public void runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runAutomatedLocalSearchDiscrete_call method_call = new runAutomatedLocalSearchDiscrete_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runAutomatedLocalSearchDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public runAutomatedLocalSearchDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runAutomatedLocalSearchDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runAutomatedLocalSearchDiscrete_args args = new runAutomatedLocalSearchDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runAutomatedLocalSearchDiscrete();
      }
    }

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesDiscrete_call method_call = new getMarginalDrivingFeaturesDiscrete_call(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private java.lang.String logical_connective;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, java.lang.String logical_connective, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.logical_connective = logical_connective;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setLogical_connective(logical_connective);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesDiscrete();
      }
    }

    public void getDrivingFeaturesEpsilonMOEADiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesEpsilonMOEADiscrete_call method_call = new getDrivingFeaturesEpsilonMOEADiscrete_call(problem, behavioral, non_behavioral, all_archs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      public getDrivingFeaturesEpsilonMOEADiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesEpsilonMOEADiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesEpsilonMOEADiscrete_args args = new getDrivingFeaturesEpsilonMOEADiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesEpsilonMOEADiscrete();
      }
    }

    public void computeComplexityOfFeatures(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeComplexityOfFeatures_call method_call = new computeComplexityOfFeatures_call(expressions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeComplexityOfFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Double>> {
      private java.util.List<java.lang.String> expressions;
      public computeComplexityOfFeatures_call(java.util.List<java.lang.String> expressions, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expressions = expressions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeComplexityOfFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeComplexityOfFeatures_args args = new computeComplexityOfFeatures_args();
        args.setExpressions(expressions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeComplexityOfFeatures();
      }
    }

    public void computeAlgebraicTypicality(BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeAlgebraicTypicality_call method_call = new computeAlgebraicTypicality_call(arch, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeAlgebraicTypicality_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private BinaryInputArchitecture arch;
      private java.lang.String feature;
      public computeAlgebraicTypicality_call(BinaryInputArchitecture arch, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arch = arch;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeAlgebraicTypicality", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeAlgebraicTypicality_args args = new computeAlgebraicTypicality_args();
        args.setArch(arch);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeAlgebraicTypicality();
      }
    }

    public void computeComplexity(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeComplexity_call method_call = new computeComplexity_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeComplexity_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String expression;
      public computeComplexity_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeComplexity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeComplexity_args args = new computeComplexity_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeComplexity();
      }
    }

    public void convertToCNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      convertToCNF_call method_call = new convertToCNF_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class convertToCNF_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String expression;
      public convertToCNF_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("convertToCNF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        convertToCNF_args args = new convertToCNF_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_convertToCNF();
      }
    }

    public void convertToDNF(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      convertToDNF_call method_call = new convertToDNF_call(expression, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class convertToDNF_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String expression;
      public convertToDNF_call(java.lang.String expression, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expression = expression;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("convertToDNF", org.apache.thrift.protocol.TMessageType.CALL, 0));
        convertToDNF_args args = new convertToDNF_args();
        args.setExpression(expression);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_convertToDNF();
      }
    }

    public void computeAlgebraicTypicalityWithStringInput(java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      computeAlgebraicTypicalityWithStringInput_call method_call = new computeAlgebraicTypicalityWithStringInput_call(architecture, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class computeAlgebraicTypicalityWithStringInput_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.Integer>> {
      private java.lang.String architecture;
      private java.lang.String feature;
      public computeAlgebraicTypicalityWithStringInput_call(java.lang.String architecture, java.lang.String feature, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.architecture = architecture;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("computeAlgebraicTypicalityWithStringInput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        computeAlgebraicTypicalityWithStringInput_args args = new computeAlgebraicTypicalityWithStringInput_args();
        args.setArchitecture(architecture);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_computeAlgebraicTypicalityWithStringInput();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("runAutomatedLocalSearchBinary", new runAutomatedLocalSearchBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesEpsilonMOEABinary", new getDrivingFeaturesEpsilonMOEABinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("runAutomatedLocalSearchDiscrete", new runAutomatedLocalSearchDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      processMap.put("getDrivingFeaturesEpsilonMOEADiscrete", new getDrivingFeaturesEpsilonMOEADiscrete());
      processMap.put("computeComplexityOfFeatures", new computeComplexityOfFeatures());
      processMap.put("computeAlgebraicTypicality", new computeAlgebraicTypicality());
      processMap.put("computeComplexity", new computeComplexity());
      processMap.put("convertToCNF", new convertToCNF());
      processMap.put("convertToDNF", new convertToDNF());
      processMap.put("computeAlgebraicTypicalityWithStringInput", new computeAlgebraicTypicalityWithStringInput());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class getDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesBinary_args> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesBinary_result getResult(I iface, getDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
        result.success = iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class runAutomatedLocalSearchBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runAutomatedLocalSearchBinary_args> {
      public runAutomatedLocalSearchBinary() {
        super("runAutomatedLocalSearchBinary");
      }

      public runAutomatedLocalSearchBinary_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public runAutomatedLocalSearchBinary_result getResult(I iface, runAutomatedLocalSearchBinary_args args) throws org.apache.thrift.TException {
        runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
        result.success = iface.runAutomatedLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesBinary_args> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesBinary_result getResult(I iface, getMarginalDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
        result.success = iface.getMarginalDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getDrivingFeaturesEpsilonMOEABinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesEpsilonMOEABinary_args> {
      public getDrivingFeaturesEpsilonMOEABinary() {
        super("getDrivingFeaturesEpsilonMOEABinary");
      }

      public getDrivingFeaturesEpsilonMOEABinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEABinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesEpsilonMOEABinary_result getResult(I iface, getDrivingFeaturesEpsilonMOEABinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
        result.success = iface.getDrivingFeaturesEpsilonMOEABinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesDiscrete_args> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesDiscrete_result getResult(I iface, getDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
        result.success = iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class runAutomatedLocalSearchDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runAutomatedLocalSearchDiscrete_args> {
      public runAutomatedLocalSearchDiscrete() {
        super("runAutomatedLocalSearchDiscrete");
      }

      public runAutomatedLocalSearchDiscrete_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public runAutomatedLocalSearchDiscrete_result getResult(I iface, runAutomatedLocalSearchDiscrete_args args) throws org.apache.thrift.TException {
        runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
        result.success = iface.runAutomatedLocalSearchDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesDiscrete_result getResult(I iface, getMarginalDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
        result.success = iface.getMarginalDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesEpsilonMOEADiscrete_args> {
      public getDrivingFeaturesEpsilonMOEADiscrete() {
        super("getDrivingFeaturesEpsilonMOEADiscrete");
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_result getResult(I iface, getDrivingFeaturesEpsilonMOEADiscrete_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
        result.success = iface.getDrivingFeaturesEpsilonMOEADiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs);
        return result;
      }
    }

    public static class computeComplexityOfFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeComplexityOfFeatures_args> {
      public computeComplexityOfFeatures() {
        super("computeComplexityOfFeatures");
      }

      public computeComplexityOfFeatures_args getEmptyArgsInstance() {
        return new computeComplexityOfFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeComplexityOfFeatures_result getResult(I iface, computeComplexityOfFeatures_args args) throws org.apache.thrift.TException {
        computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
        result.success = iface.computeComplexityOfFeatures(args.expressions);
        return result;
      }
    }

    public static class computeAlgebraicTypicality<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeAlgebraicTypicality_args> {
      public computeAlgebraicTypicality() {
        super("computeAlgebraicTypicality");
      }

      public computeAlgebraicTypicality_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicality_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeAlgebraicTypicality_result getResult(I iface, computeAlgebraicTypicality_args args) throws org.apache.thrift.TException {
        computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
        result.success = iface.computeAlgebraicTypicality(args.arch, args.feature);
        return result;
      }
    }

    public static class computeComplexity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeComplexity_args> {
      public computeComplexity() {
        super("computeComplexity");
      }

      public computeComplexity_args getEmptyArgsInstance() {
        return new computeComplexity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeComplexity_result getResult(I iface, computeComplexity_args args) throws org.apache.thrift.TException {
        computeComplexity_result result = new computeComplexity_result();
        result.success = iface.computeComplexity(args.expression);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class convertToCNF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, convertToCNF_args> {
      public convertToCNF() {
        super("convertToCNF");
      }

      public convertToCNF_args getEmptyArgsInstance() {
        return new convertToCNF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public convertToCNF_result getResult(I iface, convertToCNF_args args) throws org.apache.thrift.TException {
        convertToCNF_result result = new convertToCNF_result();
        result.success = iface.convertToCNF(args.expression);
        return result;
      }
    }

    public static class convertToDNF<I extends Iface> extends org.apache.thrift.ProcessFunction<I, convertToDNF_args> {
      public convertToDNF() {
        super("convertToDNF");
      }

      public convertToDNF_args getEmptyArgsInstance() {
        return new convertToDNF_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public convertToDNF_result getResult(I iface, convertToDNF_args args) throws org.apache.thrift.TException {
        convertToDNF_result result = new convertToDNF_result();
        result.success = iface.convertToDNF(args.expression);
        return result;
      }
    }

    public static class computeAlgebraicTypicalityWithStringInput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, computeAlgebraicTypicalityWithStringInput_args> {
      public computeAlgebraicTypicalityWithStringInput() {
        super("computeAlgebraicTypicalityWithStringInput");
      }

      public computeAlgebraicTypicalityWithStringInput_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicalityWithStringInput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public computeAlgebraicTypicalityWithStringInput_result getResult(I iface, computeAlgebraicTypicalityWithStringInput_args args) throws org.apache.thrift.TException {
        computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
        result.success = iface.computeAlgebraicTypicalityWithStringInput(args.architecture, args.feature);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("runAutomatedLocalSearchBinary", new runAutomatedLocalSearchBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesEpsilonMOEABinary", new getDrivingFeaturesEpsilonMOEABinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("runAutomatedLocalSearchDiscrete", new runAutomatedLocalSearchDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      processMap.put("getDrivingFeaturesEpsilonMOEADiscrete", new getDrivingFeaturesEpsilonMOEADiscrete());
      processMap.put("computeComplexityOfFeatures", new computeComplexityOfFeatures());
      processMap.put("computeAlgebraicTypicality", new computeAlgebraicTypicality());
      processMap.put("computeComplexity", new computeComplexity());
      processMap.put("convertToCNF", new convertToCNF());
      processMap.put("convertToDNF", new convertToDNF());
      processMap.put("computeAlgebraicTypicalityWithStringInput", new computeAlgebraicTypicalityWithStringInput());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesBinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class runAutomatedLocalSearchBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runAutomatedLocalSearchBinary_args, java.util.List<Feature>> {
      public runAutomatedLocalSearchBinary() {
        super("runAutomatedLocalSearchBinary");
      }

      public runAutomatedLocalSearchBinary_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runAutomatedLocalSearchBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.runAutomatedLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesBinary_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getDrivingFeaturesEpsilonMOEABinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesEpsilonMOEABinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesEpsilonMOEABinary() {
        super("getDrivingFeaturesEpsilonMOEABinary");
      }

      public getDrivingFeaturesEpsilonMOEABinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEABinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesEpsilonMOEABinary_result result = new getDrivingFeaturesEpsilonMOEABinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesEpsilonMOEABinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesEpsilonMOEABinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class runAutomatedLocalSearchDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runAutomatedLocalSearchDiscrete_args, java.util.List<Feature>> {
      public runAutomatedLocalSearchDiscrete() {
        super("runAutomatedLocalSearchDiscrete");
      }

      public runAutomatedLocalSearchDiscrete_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runAutomatedLocalSearchDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.runAutomatedLocalSearchDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getDrivingFeaturesEpsilonMOEADiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesEpsilonMOEADiscrete_args, java.util.List<Feature>> {
      public getDrivingFeaturesEpsilonMOEADiscrete() {
        super("getDrivingFeaturesEpsilonMOEADiscrete");
      }

      public getDrivingFeaturesEpsilonMOEADiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesEpsilonMOEADiscrete_result result = new getDrivingFeaturesEpsilonMOEADiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesEpsilonMOEADiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesEpsilonMOEADiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs,resultHandler);
      }
    }

    public static class computeComplexityOfFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeComplexityOfFeatures_args, java.util.List<java.lang.Double>> {
      public computeComplexityOfFeatures() {
        super("computeComplexityOfFeatures");
      }

      public computeComplexityOfFeatures_args getEmptyArgsInstance() {
        return new computeComplexityOfFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>>() { 
          public void onComplete(java.util.List<java.lang.Double> o) {
            computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeComplexityOfFeatures_result result = new computeComplexityOfFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeComplexityOfFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Double>> resultHandler) throws org.apache.thrift.TException {
        iface.computeComplexityOfFeatures(args.expressions,resultHandler);
      }
    }

    public static class computeAlgebraicTypicality<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeAlgebraicTypicality_args, java.util.List<java.lang.Integer>> {
      public computeAlgebraicTypicality() {
        super("computeAlgebraicTypicality");
      }

      public computeAlgebraicTypicality_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicality_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeAlgebraicTypicality_result result = new computeAlgebraicTypicality_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeAlgebraicTypicality_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.computeAlgebraicTypicality(args.arch, args.feature,resultHandler);
      }
    }

    public static class computeComplexity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeComplexity_args, java.lang.Double> {
      public computeComplexity() {
        super("computeComplexity");
      }

      public computeComplexity_args getEmptyArgsInstance() {
        return new computeComplexity_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            computeComplexity_result result = new computeComplexity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeComplexity_result result = new computeComplexity_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeComplexity_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.computeComplexity(args.expression,resultHandler);
      }
    }

    public static class convertToCNF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, convertToCNF_args, java.lang.String> {
      public convertToCNF() {
        super("convertToCNF");
      }

      public convertToCNF_args getEmptyArgsInstance() {
        return new convertToCNF_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            convertToCNF_result result = new convertToCNF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            convertToCNF_result result = new convertToCNF_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, convertToCNF_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.convertToCNF(args.expression,resultHandler);
      }
    }

    public static class convertToDNF<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, convertToDNF_args, java.lang.String> {
      public convertToDNF() {
        super("convertToDNF");
      }

      public convertToDNF_args getEmptyArgsInstance() {
        return new convertToDNF_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            convertToDNF_result result = new convertToDNF_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            convertToDNF_result result = new convertToDNF_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, convertToDNF_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.convertToDNF(args.expression,resultHandler);
      }
    }

    public static class computeAlgebraicTypicalityWithStringInput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, computeAlgebraicTypicalityWithStringInput_args, java.util.List<java.lang.Integer>> {
      public computeAlgebraicTypicalityWithStringInput() {
        super("computeAlgebraicTypicalityWithStringInput");
      }

      public computeAlgebraicTypicalityWithStringInput_args getEmptyArgsInstance() {
        return new computeAlgebraicTypicalityWithStringInput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>>() { 
          public void onComplete(java.util.List<java.lang.Integer> o) {
            computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            computeAlgebraicTypicalityWithStringInput_result result = new computeAlgebraicTypicalityWithStringInput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, computeAlgebraicTypicalityWithStringInput_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.computeAlgebraicTypicalityWithStringInput(args.architecture, args.feature,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getDrivingFeaturesBinary_args, getDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_args() {
    }

    public getDrivingFeaturesBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_args(getDrivingFeaturesBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesBinary_args deepCopy() {
      return new getDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_args)
        return this.equals((getDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.behavioral.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list59.size);
                  int _elem60;
                  for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                  {
                    _elem60 = iprot.readI32();
                    struct.non_behavioral.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list62.size);
                  BinaryInputArchitecture _elem63;
                  for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                  {
                    _elem63 = new BinaryInputArchitecture();
                    _elem63.read(iprot);
                    struct.all_archs.add(_elem63);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter65 : struct.behavioral)
            {
              oprot.writeI32(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter66 : struct.non_behavioral)
            {
              oprot.writeI32(_iter66);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter67 : struct.all_archs)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter68 : struct.behavioral)
            {
              oprot.writeI32(_iter68);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter69 : struct.non_behavioral)
            {
              oprot.writeI32(_iter69);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter70 : struct.all_archs)
            {
              _iter70.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list71.size);
            int _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readI32();
              struct.behavioral.add(_elem72);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list74.size);
            int _elem75;
            for (int _i76 = 0; _i76 < _list74.size; ++_i76)
            {
              _elem75 = iprot.readI32();
              struct.non_behavioral.add(_elem75);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list77.size);
            BinaryInputArchitecture _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new BinaryInputArchitecture();
              _elem78.read(iprot);
              struct.all_archs.add(_elem78);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getDrivingFeaturesBinary_result, getDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_result() {
    }

    public getDrivingFeaturesBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_result(getDrivingFeaturesBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesBinary_result deepCopy() {
      return new getDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_result)
        return this.equals((getDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list80.size);
                  Feature _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new Feature();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list85.size);
            Feature _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new Feature();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchBinary_args implements org.apache.thrift.TBase<runAutomatedLocalSearchBinary_args, runAutomatedLocalSearchBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchBinary_args.class, metaDataMap);
    }

    public runAutomatedLocalSearchBinary_args() {
    }

    public runAutomatedLocalSearchBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchBinary_args(runAutomatedLocalSearchBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public runAutomatedLocalSearchBinary_args deepCopy() {
      return new runAutomatedLocalSearchBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public runAutomatedLocalSearchBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public runAutomatedLocalSearchBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public runAutomatedLocalSearchBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public runAutomatedLocalSearchBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public runAutomatedLocalSearchBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public runAutomatedLocalSearchBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public runAutomatedLocalSearchBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchBinary_args)
        return this.equals((runAutomatedLocalSearchBinary_args)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_argsStandardScheme getScheme() {
        return new runAutomatedLocalSearchBinary_argsStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list88.size);
                  int _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI32();
                    struct.behavioral.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list91.size);
                  int _elem92;
                  for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                  {
                    _elem92 = iprot.readI32();
                    struct.non_behavioral.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list94.size);
                  BinaryInputArchitecture _elem95;
                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                  {
                    _elem95 = new BinaryInputArchitecture();
                    _elem95.read(iprot);
                    struct.all_archs.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter97 : struct.behavioral)
            {
              oprot.writeI32(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter98 : struct.non_behavioral)
            {
              oprot.writeI32(_iter98);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter99 : struct.all_archs)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_argsTupleScheme getScheme() {
        return new runAutomatedLocalSearchBinary_argsTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter100 : struct.behavioral)
            {
              oprot.writeI32(_iter100);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter101 : struct.non_behavioral)
            {
              oprot.writeI32(_iter101);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter102 : struct.all_archs)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list103.size);
            int _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = iprot.readI32();
              struct.behavioral.add(_elem104);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list106.size);
            int _elem107;
            for (int _i108 = 0; _i108 < _list106.size; ++_i108)
            {
              _elem107 = iprot.readI32();
              struct.non_behavioral.add(_elem107);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list109.size);
            BinaryInputArchitecture _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new BinaryInputArchitecture();
              _elem110.read(iprot);
              struct.all_archs.add(_elem110);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchBinary_result implements org.apache.thrift.TBase<runAutomatedLocalSearchBinary_result, runAutomatedLocalSearchBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchBinary_result.class, metaDataMap);
    }

    public runAutomatedLocalSearchBinary_result() {
    }

    public runAutomatedLocalSearchBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchBinary_result(runAutomatedLocalSearchBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public runAutomatedLocalSearchBinary_result deepCopy() {
      return new runAutomatedLocalSearchBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public runAutomatedLocalSearchBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchBinary_result)
        return this.equals((runAutomatedLocalSearchBinary_result)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_resultStandardScheme getScheme() {
        return new runAutomatedLocalSearchBinary_resultStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list112.size);
                  Feature _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new Feature();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_resultTupleScheme getScheme() {
        return new runAutomatedLocalSearchBinary_resultTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list117.size);
            Feature _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new Feature();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_args, getMarginalDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LOGICAL_CONNECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("logical_connective", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public java.lang.String logical_connective; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE_EXPRESSION((short)5, "featureExpression"),
      LOGICAL_CONNECTIVE((short)6, "logical_connective"),
      SUPP((short)7, "supp"),
      CONF((short)8, "conf"),
      LIFT((short)9, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 6: // LOGICAL_CONNECTIVE
            return LOGICAL_CONNECTIVE;
          case 7: // SUPP
            return SUPP;
          case 8: // CONF
            return CONF;
          case 9: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGICAL_CONNECTIVE, new org.apache.thrift.meta_data.FieldMetaData("logical_connective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_args() {
    }

    public getMarginalDrivingFeaturesBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String featureExpression,
      java.lang.String logical_connective,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.logical_connective = logical_connective;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_args(getMarginalDrivingFeaturesBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      if (other.isSetLogical_connective()) {
        this.logical_connective = other.logical_connective;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesBinary_args deepCopy() {
      return new getMarginalDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      this.logical_connective = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesBinary_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public java.lang.String getLogical_connective() {
      return this.logical_connective;
    }

    public getMarginalDrivingFeaturesBinary_args setLogical_connective(java.lang.String logical_connective) {
      this.logical_connective = logical_connective;
      return this;
    }

    public void unsetLogical_connective() {
      this.logical_connective = null;
    }

    /** Returns true if field logical_connective is set (has been assigned a value) and false otherwise */
    public boolean isSetLogical_connective() {
      return this.logical_connective != null;
    }

    public void setLogical_connectiveIsSet(boolean value) {
      if (!value) {
        this.logical_connective = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case LOGICAL_CONNECTIVE:
        if (value == null) {
          unsetLogical_connective();
        } else {
          setLogical_connective((java.lang.String)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case LOGICAL_CONNECTIVE:
        return getLogical_connective();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case LOGICAL_CONNECTIVE:
        return isSetLogical_connective();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_args)
        return this.equals((getMarginalDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_logical_connective = true && this.isSetLogical_connective();
      boolean that_present_logical_connective = true && that.isSetLogical_connective();
      if (this_present_logical_connective || that_present_logical_connective) {
        if (!(this_present_logical_connective && that_present_logical_connective))
          return false;
        if (!this.logical_connective.equals(that.logical_connective))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogical_connective()) ? 131071 : 524287);
      if (isSetLogical_connective())
        hashCode = hashCode * 8191 + logical_connective.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogical_connective()).compareTo(other.isSetLogical_connective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogical_connective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logical_connective, other.logical_connective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logical_connective:");
      if (this.logical_connective == null) {
        sb.append("null");
      } else {
        sb.append(this.logical_connective);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list120.size);
                  int _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readI32();
                    struct.behavioral.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list123.size);
                  int _elem124;
                  for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                  {
                    _elem124 = iprot.readI32();
                    struct.non_behavioral.add(_elem124);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list126.size);
                  BinaryInputArchitecture _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new BinaryInputArchitecture();
                    _elem127.read(iprot);
                    struct.all_archs.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LOGICAL_CONNECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logical_connective = iprot.readString();
                struct.setLogical_connectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter129 : struct.behavioral)
            {
              oprot.writeI32(_iter129);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter130 : struct.non_behavioral)
            {
              oprot.writeI32(_iter130);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter131 : struct.all_archs)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        if (struct.logical_connective != null) {
          oprot.writeFieldBegin(LOGICAL_CONNECTIVE_FIELD_DESC);
          oprot.writeString(struct.logical_connective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(4);
        }
        if (struct.isSetLogical_connective()) {
          optionals.set(5);
        }
        if (struct.isSetSupp()) {
          optionals.set(6);
        }
        if (struct.isSetConf()) {
          optionals.set(7);
        }
        if (struct.isSetLift()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter132 : struct.behavioral)
            {
              oprot.writeI32(_iter132);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter133 : struct.non_behavioral)
            {
              oprot.writeI32(_iter133);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter134 : struct.all_archs)
            {
              _iter134.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetLogical_connective()) {
          oprot.writeString(struct.logical_connective);
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list135.size);
            int _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = iprot.readI32();
              struct.behavioral.add(_elem136);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list138.size);
            int _elem139;
            for (int _i140 = 0; _i140 < _list138.size; ++_i140)
            {
              _elem139 = iprot.readI32();
              struct.non_behavioral.add(_elem139);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list141.size);
            BinaryInputArchitecture _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new BinaryInputArchitecture();
              _elem142.read(iprot);
              struct.all_archs.add(_elem142);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.logical_connective = iprot.readString();
          struct.setLogical_connectiveIsSet(true);
        }
        if (incoming.get(6)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(7)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(8)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_result, getMarginalDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_result() {
    }

    public getMarginalDrivingFeaturesBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_result(getMarginalDrivingFeaturesBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesBinary_result deepCopy() {
      return new getMarginalDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_result)
        return this.equals((getMarginalDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list144.size);
                  Feature _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new Feature();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list149.size);
            Feature _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new Feature();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEABinary_args implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEABinary_args, getDrivingFeaturesEpsilonMOEABinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEABinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEABinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEABinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEABinary_args() {
    }

    public getDrivingFeaturesEpsilonMOEABinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEABinary_args(getDrivingFeaturesEpsilonMOEABinary_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesEpsilonMOEABinary_args deepCopy() {
      return new getDrivingFeaturesEpsilonMOEABinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesEpsilonMOEABinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEABinary_args)
        return this.equals((getDrivingFeaturesEpsilonMOEABinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEABinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEABinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEABinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEABinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list152.size);
                  int _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = iprot.readI32();
                    struct.behavioral.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list155.size);
                  int _elem156;
                  for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                  {
                    _elem156 = iprot.readI32();
                    struct.non_behavioral.add(_elem156);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list158.size);
                  BinaryInputArchitecture _elem159;
                  for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                  {
                    _elem159 = new BinaryInputArchitecture();
                    _elem159.read(iprot);
                    struct.all_archs.add(_elem159);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter161 : struct.behavioral)
            {
              oprot.writeI32(_iter161);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter162 : struct.non_behavioral)
            {
              oprot.writeI32(_iter162);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter163 : struct.all_archs)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEABinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter164 : struct.behavioral)
            {
              oprot.writeI32(_iter164);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter165 : struct.non_behavioral)
            {
              oprot.writeI32(_iter165);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter166 : struct.all_archs)
            {
              _iter166.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list167.size);
            int _elem168;
            for (int _i169 = 0; _i169 < _list167.size; ++_i169)
            {
              _elem168 = iprot.readI32();
              struct.behavioral.add(_elem168);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list170.size);
            int _elem171;
            for (int _i172 = 0; _i172 < _list170.size; ++_i172)
            {
              _elem171 = iprot.readI32();
              struct.non_behavioral.add(_elem171);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list173.size);
            BinaryInputArchitecture _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new BinaryInputArchitecture();
              _elem174.read(iprot);
              struct.all_archs.add(_elem174);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEABinary_result implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEABinary_result, getDrivingFeaturesEpsilonMOEABinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEABinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEABinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEABinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEABinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEABinary_result() {
    }

    public getDrivingFeaturesEpsilonMOEABinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEABinary_result(getDrivingFeaturesEpsilonMOEABinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesEpsilonMOEABinary_result deepCopy() {
      return new getDrivingFeaturesEpsilonMOEABinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesEpsilonMOEABinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEABinary_result)
        return this.equals((getDrivingFeaturesEpsilonMOEABinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEABinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEABinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEABinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEABinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list176.size);
                  Feature _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new Feature();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEABinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEABinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEABinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list181.size);
            Feature _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new Feature();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_args, getDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_args() {
    }

    public getDrivingFeaturesDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_args(getDrivingFeaturesDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesDiscrete_args deepCopy() {
      return new getDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_args)
        return this.equals((getDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list184.size);
                  int _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = iprot.readI32();
                    struct.behavioral.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list187.size);
                  int _elem188;
                  for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                  {
                    _elem188 = iprot.readI32();
                    struct.non_behavioral.add(_elem188);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list190.size);
                  DiscreteInputArchitecture _elem191;
                  for (int _i192 = 0; _i192 < _list190.size; ++_i192)
                  {
                    _elem191 = new DiscreteInputArchitecture();
                    _elem191.read(iprot);
                    struct.all_archs.add(_elem191);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter193 : struct.behavioral)
            {
              oprot.writeI32(_iter193);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter194 : struct.non_behavioral)
            {
              oprot.writeI32(_iter194);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter195 : struct.all_archs)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter196 : struct.behavioral)
            {
              oprot.writeI32(_iter196);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter197 : struct.non_behavioral)
            {
              oprot.writeI32(_iter197);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter198 : struct.all_archs)
            {
              _iter198.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list199.size);
            int _elem200;
            for (int _i201 = 0; _i201 < _list199.size; ++_i201)
            {
              _elem200 = iprot.readI32();
              struct.behavioral.add(_elem200);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list202 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list202.size);
            int _elem203;
            for (int _i204 = 0; _i204 < _list202.size; ++_i204)
            {
              _elem203 = iprot.readI32();
              struct.non_behavioral.add(_elem203);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list205.size);
            DiscreteInputArchitecture _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new DiscreteInputArchitecture();
              _elem206.read(iprot);
              struct.all_archs.add(_elem206);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_result, getDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_result() {
    }

    public getDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_result(getDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesDiscrete_result deepCopy() {
      return new getDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_result)
        return this.equals((getDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list208.size);
                  Feature _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new Feature();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list213.size);
            Feature _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new Feature();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchDiscrete_args implements org.apache.thrift.TBase<runAutomatedLocalSearchDiscrete_args, runAutomatedLocalSearchDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchDiscrete_args.class, metaDataMap);
    }

    public runAutomatedLocalSearchDiscrete_args() {
    }

    public runAutomatedLocalSearchDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchDiscrete_args(runAutomatedLocalSearchDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public runAutomatedLocalSearchDiscrete_args deepCopy() {
      return new runAutomatedLocalSearchDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public runAutomatedLocalSearchDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public runAutomatedLocalSearchDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public runAutomatedLocalSearchDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public runAutomatedLocalSearchDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public runAutomatedLocalSearchDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public runAutomatedLocalSearchDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public runAutomatedLocalSearchDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchDiscrete_args)
        return this.equals((runAutomatedLocalSearchDiscrete_args)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_argsStandardScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_argsStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list216.size);
                  int _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = iprot.readI32();
                    struct.behavioral.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list219 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list219.size);
                  int _elem220;
                  for (int _i221 = 0; _i221 < _list219.size; ++_i221)
                  {
                    _elem220 = iprot.readI32();
                    struct.non_behavioral.add(_elem220);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list222.size);
                  DiscreteInputArchitecture _elem223;
                  for (int _i224 = 0; _i224 < _list222.size; ++_i224)
                  {
                    _elem223 = new DiscreteInputArchitecture();
                    _elem223.read(iprot);
                    struct.all_archs.add(_elem223);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter225 : struct.behavioral)
            {
              oprot.writeI32(_iter225);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter226 : struct.non_behavioral)
            {
              oprot.writeI32(_iter226);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter227 : struct.all_archs)
            {
              _iter227.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_argsTupleScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_argsTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter228 : struct.behavioral)
            {
              oprot.writeI32(_iter228);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter229 : struct.non_behavioral)
            {
              oprot.writeI32(_iter229);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter230 : struct.all_archs)
            {
              _iter230.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list231 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list231.size);
            int _elem232;
            for (int _i233 = 0; _i233 < _list231.size; ++_i233)
            {
              _elem232 = iprot.readI32();
              struct.behavioral.add(_elem232);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list234 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list234.size);
            int _elem235;
            for (int _i236 = 0; _i236 < _list234.size; ++_i236)
            {
              _elem235 = iprot.readI32();
              struct.non_behavioral.add(_elem235);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list237.size);
            DiscreteInputArchitecture _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new DiscreteInputArchitecture();
              _elem238.read(iprot);
              struct.all_archs.add(_elem238);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchDiscrete_result implements org.apache.thrift.TBase<runAutomatedLocalSearchDiscrete_result, runAutomatedLocalSearchDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchDiscrete_result.class, metaDataMap);
    }

    public runAutomatedLocalSearchDiscrete_result() {
    }

    public runAutomatedLocalSearchDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchDiscrete_result(runAutomatedLocalSearchDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public runAutomatedLocalSearchDiscrete_result deepCopy() {
      return new runAutomatedLocalSearchDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public runAutomatedLocalSearchDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchDiscrete_result)
        return this.equals((runAutomatedLocalSearchDiscrete_result)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_resultStandardScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_resultStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list240.size);
                  Feature _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new Feature();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_resultTupleScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_resultTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list245.size);
            Feature _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new Feature();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_args, getMarginalDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LOGICAL_CONNECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("logical_connective", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public java.lang.String logical_connective; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE_EXPRESSION((short)5, "featureExpression"),
      LOGICAL_CONNECTIVE((short)6, "logical_connective"),
      SUPP((short)7, "supp"),
      CONF((short)8, "conf"),
      LIFT((short)9, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 6: // LOGICAL_CONNECTIVE
            return LOGICAL_CONNECTIVE;
          case 7: // SUPP
            return SUPP;
          case 8: // CONF
            return CONF;
          case 9: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGICAL_CONNECTIVE, new org.apache.thrift.meta_data.FieldMetaData("logical_connective", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_args() {
    }

    public getMarginalDrivingFeaturesDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      java.lang.String featureExpression,
      java.lang.String logical_connective,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.logical_connective = logical_connective;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_args(getMarginalDrivingFeaturesDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      if (other.isSetLogical_connective()) {
        this.logical_connective = other.logical_connective;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesDiscrete_args deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      this.logical_connective = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesDiscrete_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public java.lang.String getLogical_connective() {
      return this.logical_connective;
    }

    public getMarginalDrivingFeaturesDiscrete_args setLogical_connective(java.lang.String logical_connective) {
      this.logical_connective = logical_connective;
      return this;
    }

    public void unsetLogical_connective() {
      this.logical_connective = null;
    }

    /** Returns true if field logical_connective is set (has been assigned a value) and false otherwise */
    public boolean isSetLogical_connective() {
      return this.logical_connective != null;
    }

    public void setLogical_connectiveIsSet(boolean value) {
      if (!value) {
        this.logical_connective = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case LOGICAL_CONNECTIVE:
        if (value == null) {
          unsetLogical_connective();
        } else {
          setLogical_connective((java.lang.String)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case LOGICAL_CONNECTIVE:
        return getLogical_connective();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case LOGICAL_CONNECTIVE:
        return isSetLogical_connective();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_args)
        return this.equals((getMarginalDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_logical_connective = true && this.isSetLogical_connective();
      boolean that_present_logical_connective = true && that.isSetLogical_connective();
      if (this_present_logical_connective || that_present_logical_connective) {
        if (!(this_present_logical_connective && that_present_logical_connective))
          return false;
        if (!this.logical_connective.equals(that.logical_connective))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogical_connective()) ? 131071 : 524287);
      if (isSetLogical_connective())
        hashCode = hashCode * 8191 + logical_connective.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogical_connective()).compareTo(other.isSetLogical_connective());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogical_connective()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logical_connective, other.logical_connective);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logical_connective:");
      if (this.logical_connective == null) {
        sb.append("null");
      } else {
        sb.append(this.logical_connective);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list248.size);
                  int _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = iprot.readI32();
                    struct.behavioral.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list251 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list251.size);
                  int _elem252;
                  for (int _i253 = 0; _i253 < _list251.size; ++_i253)
                  {
                    _elem252 = iprot.readI32();
                    struct.non_behavioral.add(_elem252);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list254 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list254.size);
                  DiscreteInputArchitecture _elem255;
                  for (int _i256 = 0; _i256 < _list254.size; ++_i256)
                  {
                    _elem255 = new DiscreteInputArchitecture();
                    _elem255.read(iprot);
                    struct.all_archs.add(_elem255);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LOGICAL_CONNECTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logical_connective = iprot.readString();
                struct.setLogical_connectiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter257 : struct.behavioral)
            {
              oprot.writeI32(_iter257);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter258 : struct.non_behavioral)
            {
              oprot.writeI32(_iter258);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter259 : struct.all_archs)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        if (struct.logical_connective != null) {
          oprot.writeFieldBegin(LOGICAL_CONNECTIVE_FIELD_DESC);
          oprot.writeString(struct.logical_connective);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(4);
        }
        if (struct.isSetLogical_connective()) {
          optionals.set(5);
        }
        if (struct.isSetSupp()) {
          optionals.set(6);
        }
        if (struct.isSetConf()) {
          optionals.set(7);
        }
        if (struct.isSetLift()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter260 : struct.behavioral)
            {
              oprot.writeI32(_iter260);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter261 : struct.non_behavioral)
            {
              oprot.writeI32(_iter261);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter262 : struct.all_archs)
            {
              _iter262.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetLogical_connective()) {
          oprot.writeString(struct.logical_connective);
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list263.size);
            int _elem264;
            for (int _i265 = 0; _i265 < _list263.size; ++_i265)
            {
              _elem264 = iprot.readI32();
              struct.behavioral.add(_elem264);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list266 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list266.size);
            int _elem267;
            for (int _i268 = 0; _i268 < _list266.size; ++_i268)
            {
              _elem267 = iprot.readI32();
              struct.non_behavioral.add(_elem267);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list269.size);
            DiscreteInputArchitecture _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new DiscreteInputArchitecture();
              _elem270.read(iprot);
              struct.all_archs.add(_elem270);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.logical_connective = iprot.readString();
          struct.setLogical_connectiveIsSet(true);
        }
        if (incoming.get(6)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(7)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(8)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_result, getMarginalDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_result() {
    }

    public getMarginalDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_result(getMarginalDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesDiscrete_result deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_result)
        return this.equals((getMarginalDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list272.size);
                  Feature _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new Feature();
                    _elem273.read(iprot);
                    struct.success.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter275 : struct.success)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter276 : struct.success)
            {
              _iter276.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list277.size);
            Feature _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new Feature();
              _elem278.read(iprot);
              struct.success.add(_elem278);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEADiscrete_args implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEADiscrete_args, getDrivingFeaturesEpsilonMOEADiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEADiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEADiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEADiscrete_args.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args() {
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEADiscrete_args(getDrivingFeaturesEpsilonMOEADiscrete_args other) {
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args deepCopy() {
      return new getDrivingFeaturesEpsilonMOEADiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEADiscrete_args)
        return this.equals((getDrivingFeaturesEpsilonMOEADiscrete_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEADiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEADiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEADiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEADiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list280.size);
                  int _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = iprot.readI32();
                    struct.behavioral.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list283 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list283.size);
                  int _elem284;
                  for (int _i285 = 0; _i285 < _list283.size; ++_i285)
                  {
                    _elem284 = iprot.readI32();
                    struct.non_behavioral.add(_elem284);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list286.size);
                  DiscreteInputArchitecture _elem287;
                  for (int _i288 = 0; _i288 < _list286.size; ++_i288)
                  {
                    _elem287 = new DiscreteInputArchitecture();
                    _elem287.read(iprot);
                    struct.all_archs.add(_elem287);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter289 : struct.behavioral)
            {
              oprot.writeI32(_iter289);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter290 : struct.non_behavioral)
            {
              oprot.writeI32(_iter290);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter291 : struct.all_archs)
            {
              _iter291.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEADiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter292 : struct.behavioral)
            {
              oprot.writeI32(_iter292);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter293 : struct.non_behavioral)
            {
              oprot.writeI32(_iter293);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter294 : struct.all_archs)
            {
              _iter294.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list295 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list295.size);
            int _elem296;
            for (int _i297 = 0; _i297 < _list295.size; ++_i297)
            {
              _elem296 = iprot.readI32();
              struct.behavioral.add(_elem296);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list298 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list298.size);
            int _elem299;
            for (int _i300 = 0; _i300 < _list298.size; ++_i300)
            {
              _elem299 = iprot.readI32();
              struct.non_behavioral.add(_elem299);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list301.size);
            DiscreteInputArchitecture _elem302;
            for (int _i303 = 0; _i303 < _list301.size; ++_i303)
            {
              _elem302 = new DiscreteInputArchitecture();
              _elem302.read(iprot);
              struct.all_archs.add(_elem302);
            }
          }
          struct.setAll_archsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesEpsilonMOEADiscrete_result implements org.apache.thrift.TBase<getDrivingFeaturesEpsilonMOEADiscrete_result, getDrivingFeaturesEpsilonMOEADiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesEpsilonMOEADiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesEpsilonMOEADiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesEpsilonMOEADiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesEpsilonMOEADiscrete_result.class, metaDataMap);
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result() {
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesEpsilonMOEADiscrete_result(getDrivingFeaturesEpsilonMOEADiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result deepCopy() {
      return new getDrivingFeaturesEpsilonMOEADiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesEpsilonMOEADiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesEpsilonMOEADiscrete_result)
        return this.equals((getDrivingFeaturesEpsilonMOEADiscrete_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesEpsilonMOEADiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesEpsilonMOEADiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesEpsilonMOEADiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesEpsilonMOEADiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list304.size);
                  Feature _elem305;
                  for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                  {
                    _elem305 = new Feature();
                    _elem305.read(iprot);
                    struct.success.add(_elem305);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter307 : struct.success)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme getScheme() {
        return new getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesEpsilonMOEADiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesEpsilonMOEADiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter308 : struct.success)
            {
              _iter308.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesEpsilonMOEADiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list309.size);
            Feature _elem310;
            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
            {
              _elem310 = new Feature();
              _elem310.read(iprot);
              struct.success.add(_elem310);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexityOfFeatures_args implements org.apache.thrift.TBase<computeComplexityOfFeatures_args, computeComplexityOfFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexityOfFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexityOfFeatures_args");

    private static final org.apache.thrift.protocol.TField EXPRESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("expressions", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexityOfFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexityOfFeatures_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> expressions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSIONS((short)1, "expressions");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSIONS
            return EXPRESSIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSIONS, new org.apache.thrift.meta_data.FieldMetaData("expressions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexityOfFeatures_args.class, metaDataMap);
    }

    public computeComplexityOfFeatures_args() {
    }

    public computeComplexityOfFeatures_args(
      java.util.List<java.lang.String> expressions)
    {
      this();
      this.expressions = expressions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexityOfFeatures_args(computeComplexityOfFeatures_args other) {
      if (other.isSetExpressions()) {
        java.util.List<java.lang.String> __this__expressions = new java.util.ArrayList<java.lang.String>(other.expressions);
        this.expressions = __this__expressions;
      }
    }

    public computeComplexityOfFeatures_args deepCopy() {
      return new computeComplexityOfFeatures_args(this);
    }

    @Override
    public void clear() {
      this.expressions = null;
    }

    public int getExpressionsSize() {
      return (this.expressions == null) ? 0 : this.expressions.size();
    }

    public java.util.Iterator<java.lang.String> getExpressionsIterator() {
      return (this.expressions == null) ? null : this.expressions.iterator();
    }

    public void addToExpressions(java.lang.String elem) {
      if (this.expressions == null) {
        this.expressions = new java.util.ArrayList<java.lang.String>();
      }
      this.expressions.add(elem);
    }

    public java.util.List<java.lang.String> getExpressions() {
      return this.expressions;
    }

    public computeComplexityOfFeatures_args setExpressions(java.util.List<java.lang.String> expressions) {
      this.expressions = expressions;
      return this;
    }

    public void unsetExpressions() {
      this.expressions = null;
    }

    /** Returns true if field expressions is set (has been assigned a value) and false otherwise */
    public boolean isSetExpressions() {
      return this.expressions != null;
    }

    public void setExpressionsIsSet(boolean value) {
      if (!value) {
        this.expressions = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSIONS:
        if (value == null) {
          unsetExpressions();
        } else {
          setExpressions((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSIONS:
        return getExpressions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSIONS:
        return isSetExpressions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexityOfFeatures_args)
        return this.equals((computeComplexityOfFeatures_args)that);
      return false;
    }

    public boolean equals(computeComplexityOfFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expressions = true && this.isSetExpressions();
      boolean that_present_expressions = true && that.isSetExpressions();
      if (this_present_expressions || that_present_expressions) {
        if (!(this_present_expressions && that_present_expressions))
          return false;
        if (!this.expressions.equals(that.expressions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpressions()) ? 131071 : 524287);
      if (isSetExpressions())
        hashCode = hashCode * 8191 + expressions.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexityOfFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpressions()).compareTo(other.isSetExpressions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpressions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expressions, other.expressions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexityOfFeatures_args(");
      boolean first = true;

      sb.append("expressions:");
      if (this.expressions == null) {
        sb.append("null");
      } else {
        sb.append(this.expressions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexityOfFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_argsStandardScheme getScheme() {
        return new computeComplexityOfFeatures_argsStandardScheme();
      }
    }

    private static class computeComplexityOfFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexityOfFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                  struct.expressions = new java.util.ArrayList<java.lang.String>(_list312.size);
                  java.lang.String _elem313;
                  for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                  {
                    _elem313 = iprot.readString();
                    struct.expressions.add(_elem313);
                  }
                  iprot.readListEnd();
                }
                struct.setExpressionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expressions != null) {
          oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.expressions.size()));
            for (java.lang.String _iter315 : struct.expressions)
            {
              oprot.writeString(_iter315);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexityOfFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_argsTupleScheme getScheme() {
        return new computeComplexityOfFeatures_argsTupleScheme();
      }
    }

    private static class computeComplexityOfFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexityOfFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpressions()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpressions()) {
          {
            oprot.writeI32(struct.expressions.size());
            for (java.lang.String _iter316 : struct.expressions)
            {
              oprot.writeString(_iter316);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list317 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.expressions = new java.util.ArrayList<java.lang.String>(_list317.size);
            java.lang.String _elem318;
            for (int _i319 = 0; _i319 < _list317.size; ++_i319)
            {
              _elem318 = iprot.readString();
              struct.expressions.add(_elem318);
            }
          }
          struct.setExpressionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexityOfFeatures_result implements org.apache.thrift.TBase<computeComplexityOfFeatures_result, computeComplexityOfFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexityOfFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexityOfFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexityOfFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexityOfFeatures_resultTupleSchemeFactory();

    public java.util.List<java.lang.Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexityOfFeatures_result.class, metaDataMap);
    }

    public computeComplexityOfFeatures_result() {
    }

    public computeComplexityOfFeatures_result(
      java.util.List<java.lang.Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexityOfFeatures_result(computeComplexityOfFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Double> __this__success = new java.util.ArrayList<java.lang.Double>(other.success);
        this.success = __this__success;
      }
    }

    public computeComplexityOfFeatures_result deepCopy() {
      return new computeComplexityOfFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Double>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Double> getSuccess() {
      return this.success;
    }

    public computeComplexityOfFeatures_result setSuccess(java.util.List<java.lang.Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Double>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexityOfFeatures_result)
        return this.equals((computeComplexityOfFeatures_result)that);
      return false;
    }

    public boolean equals(computeComplexityOfFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexityOfFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexityOfFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexityOfFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_resultStandardScheme getScheme() {
        return new computeComplexityOfFeatures_resultStandardScheme();
      }
    }

    private static class computeComplexityOfFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexityOfFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Double>(_list320.size);
                  double _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = iprot.readDouble();
                    struct.success.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter323 : struct.success)
            {
              oprot.writeDouble(_iter323);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexityOfFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexityOfFeatures_resultTupleScheme getScheme() {
        return new computeComplexityOfFeatures_resultTupleScheme();
      }
    }

    private static class computeComplexityOfFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexityOfFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter324 : struct.success)
            {
              oprot.writeDouble(_iter324);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexityOfFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Double>(_list325.size);
            double _elem326;
            for (int _i327 = 0; _i327 < _list325.size; ++_i327)
            {
              _elem326 = iprot.readDouble();
              struct.success.add(_elem326);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicality_args implements org.apache.thrift.TBase<computeAlgebraicTypicality_args, computeAlgebraicTypicality_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicality_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicality_args");

    private static final org.apache.thrift.protocol.TField ARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("arch", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicality_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicality_argsTupleSchemeFactory();

    public BinaryInputArchitecture arch; // required
    public java.lang.String feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARCH((short)1, "arch"),
      FEATURE((short)2, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARCH
            return ARCH;
          case 2: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARCH, new org.apache.thrift.meta_data.FieldMetaData("arch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicality_args.class, metaDataMap);
    }

    public computeAlgebraicTypicality_args() {
    }

    public computeAlgebraicTypicality_args(
      BinaryInputArchitecture arch,
      java.lang.String feature)
    {
      this();
      this.arch = arch;
      this.feature = feature;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicality_args(computeAlgebraicTypicality_args other) {
      if (other.isSetArch()) {
        this.arch = new BinaryInputArchitecture(other.arch);
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
    }

    public computeAlgebraicTypicality_args deepCopy() {
      return new computeAlgebraicTypicality_args(this);
    }

    @Override
    public void clear() {
      this.arch = null;
      this.feature = null;
    }

    public BinaryInputArchitecture getArch() {
      return this.arch;
    }

    public computeAlgebraicTypicality_args setArch(BinaryInputArchitecture arch) {
      this.arch = arch;
      return this;
    }

    public void unsetArch() {
      this.arch = null;
    }

    /** Returns true if field arch is set (has been assigned a value) and false otherwise */
    public boolean isSetArch() {
      return this.arch != null;
    }

    public void setArchIsSet(boolean value) {
      if (!value) {
        this.arch = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public computeAlgebraicTypicality_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ARCH:
        if (value == null) {
          unsetArch();
        } else {
          setArch((BinaryInputArchitecture)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ARCH:
        return getArch();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ARCH:
        return isSetArch();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicality_args)
        return this.equals((computeAlgebraicTypicality_args)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicality_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_arch = true && this.isSetArch();
      boolean that_present_arch = true && that.isSetArch();
      if (this_present_arch || that_present_arch) {
        if (!(this_present_arch && that_present_arch))
          return false;
        if (!this.arch.equals(that.arch))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArch()) ? 131071 : 524287);
      if (isSetArch())
        hashCode = hashCode * 8191 + arch.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicality_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetArch()).compareTo(other.isSetArch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arch, other.arch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicality_args(");
      boolean first = true;

      sb.append("arch:");
      if (this.arch == null) {
        sb.append("null");
      } else {
        sb.append(this.arch);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arch != null) {
        arch.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicality_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_argsStandardScheme getScheme() {
        return new computeAlgebraicTypicality_argsStandardScheme();
      }
    }

    private static class computeAlgebraicTypicality_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicality_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arch = new BinaryInputArchitecture();
                struct.arch.read(iprot);
                struct.setArchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arch != null) {
          oprot.writeFieldBegin(ARCH_FIELD_DESC);
          struct.arch.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicality_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_argsTupleScheme getScheme() {
        return new computeAlgebraicTypicality_argsTupleScheme();
      }
    }

    private static class computeAlgebraicTypicality_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicality_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArch()) {
          optionals.set(0);
        }
        if (struct.isSetFeature()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArch()) {
          struct.arch.write(oprot);
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.arch = new BinaryInputArchitecture();
          struct.arch.read(iprot);
          struct.setArchIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicality_result implements org.apache.thrift.TBase<computeAlgebraicTypicality_result, computeAlgebraicTypicality_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicality_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicality_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicality_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicality_resultTupleSchemeFactory();

    public java.util.List<java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicality_result.class, metaDataMap);
    }

    public computeAlgebraicTypicality_result() {
    }

    public computeAlgebraicTypicality_result(
      java.util.List<java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicality_result(computeAlgebraicTypicality_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success.size());
        for (java.lang.Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public computeAlgebraicTypicality_result deepCopy() {
      return new computeAlgebraicTypicality_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public computeAlgebraicTypicality_result setSuccess(java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicality_result)
        return this.equals((computeAlgebraicTypicality_result)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicality_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicality_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicality_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicality_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_resultStandardScheme getScheme() {
        return new computeAlgebraicTypicality_resultStandardScheme();
      }
    }

    private static class computeAlgebraicTypicality_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicality_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list328.size);
                  int _elem329;
                  for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                  {
                    _elem329 = iprot.readI32();
                    struct.success.add(_elem329);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter331 : struct.success)
            {
              oprot.writeI32(_iter331);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicality_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicality_resultTupleScheme getScheme() {
        return new computeAlgebraicTypicality_resultTupleScheme();
      }
    }

    private static class computeAlgebraicTypicality_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicality_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter332 : struct.success)
            {
              oprot.writeI32(_iter332);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicality_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list333.size);
            int _elem334;
            for (int _i335 = 0; _i335 < _list333.size; ++_i335)
            {
              _elem334 = iprot.readI32();
              struct.success.add(_elem334);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexity_args implements org.apache.thrift.TBase<computeComplexity_args, computeComplexity_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexity_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexity_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexity_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexity_args.class, metaDataMap);
    }

    public computeComplexity_args() {
    }

    public computeComplexity_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexity_args(computeComplexity_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public computeComplexity_args deepCopy() {
      return new computeComplexity_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public computeComplexity_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexity_args)
        return this.equals((computeComplexity_args)that);
      return false;
    }

    public boolean equals(computeComplexity_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexity_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_argsStandardScheme getScheme() {
        return new computeComplexity_argsStandardScheme();
      }
    }

    private static class computeComplexity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_argsTupleScheme getScheme() {
        return new computeComplexity_argsTupleScheme();
      }
    }

    private static class computeComplexity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeComplexity_result implements org.apache.thrift.TBase<computeComplexity_result, computeComplexity_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeComplexity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeComplexity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeComplexity_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeComplexity_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeComplexity_result.class, metaDataMap);
    }

    public computeComplexity_result() {
    }

    public computeComplexity_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeComplexity_result(computeComplexity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public computeComplexity_result deepCopy() {
      return new computeComplexity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public computeComplexity_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeComplexity_result)
        return this.equals((computeComplexity_result)that);
      return false;
    }

    public boolean equals(computeComplexity_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(computeComplexity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeComplexity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeComplexity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_resultStandardScheme getScheme() {
        return new computeComplexity_resultStandardScheme();
      }
    }

    private static class computeComplexity_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeComplexity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeComplexity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeComplexity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeComplexity_resultTupleScheme getScheme() {
        return new computeComplexity_resultTupleScheme();
      }
    }

    private static class computeComplexity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeComplexity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeComplexity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToCNF_args implements org.apache.thrift.TBase<convertToCNF_args, convertToCNF_args._Fields>, java.io.Serializable, Cloneable, Comparable<convertToCNF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToCNF_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToCNF_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToCNF_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToCNF_args.class, metaDataMap);
    }

    public convertToCNF_args() {
    }

    public convertToCNF_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToCNF_args(convertToCNF_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public convertToCNF_args deepCopy() {
      return new convertToCNF_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public convertToCNF_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToCNF_args)
        return this.equals((convertToCNF_args)that);
      return false;
    }

    public boolean equals(convertToCNF_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToCNF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToCNF_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToCNF_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_argsStandardScheme getScheme() {
        return new convertToCNF_argsStandardScheme();
      }
    }

    private static class convertToCNF_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToCNF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToCNF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToCNF_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_argsTupleScheme getScheme() {
        return new convertToCNF_argsTupleScheme();
      }
    }

    private static class convertToCNF_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToCNF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToCNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToCNF_result implements org.apache.thrift.TBase<convertToCNF_result, convertToCNF_result._Fields>, java.io.Serializable, Cloneable, Comparable<convertToCNF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToCNF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToCNF_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToCNF_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToCNF_result.class, metaDataMap);
    }

    public convertToCNF_result() {
    }

    public convertToCNF_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToCNF_result(convertToCNF_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public convertToCNF_result deepCopy() {
      return new convertToCNF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public convertToCNF_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToCNF_result)
        return this.equals((convertToCNF_result)that);
      return false;
    }

    public boolean equals(convertToCNF_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToCNF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToCNF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToCNF_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_resultStandardScheme getScheme() {
        return new convertToCNF_resultStandardScheme();
      }
    }

    private static class convertToCNF_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToCNF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToCNF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToCNF_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToCNF_resultTupleScheme getScheme() {
        return new convertToCNF_resultTupleScheme();
      }
    }

    private static class convertToCNF_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToCNF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToCNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToDNF_args implements org.apache.thrift.TBase<convertToDNF_args, convertToDNF_args._Fields>, java.io.Serializable, Cloneable, Comparable<convertToDNF_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToDNF_args");

    private static final org.apache.thrift.protocol.TField EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("expression", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToDNF_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToDNF_argsTupleSchemeFactory();

    public java.lang.String expression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPRESSION((short)1, "expression");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPRESSION
            return EXPRESSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("expression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToDNF_args.class, metaDataMap);
    }

    public convertToDNF_args() {
    }

    public convertToDNF_args(
      java.lang.String expression)
    {
      this();
      this.expression = expression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToDNF_args(convertToDNF_args other) {
      if (other.isSetExpression()) {
        this.expression = other.expression;
      }
    }

    public convertToDNF_args deepCopy() {
      return new convertToDNF_args(this);
    }

    @Override
    public void clear() {
      this.expression = null;
    }

    public java.lang.String getExpression() {
      return this.expression;
    }

    public convertToDNF_args setExpression(java.lang.String expression) {
      this.expression = expression;
      return this;
    }

    public void unsetExpression() {
      this.expression = null;
    }

    /** Returns true if field expression is set (has been assigned a value) and false otherwise */
    public boolean isSetExpression() {
      return this.expression != null;
    }

    public void setExpressionIsSet(boolean value) {
      if (!value) {
        this.expression = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXPRESSION:
        if (value == null) {
          unsetExpression();
        } else {
          setExpression((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPRESSION:
        return getExpression();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXPRESSION:
        return isSetExpression();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToDNF_args)
        return this.equals((convertToDNF_args)that);
      return false;
    }

    public boolean equals(convertToDNF_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expression = true && this.isSetExpression();
      boolean that_present_expression = true && that.isSetExpression();
      if (this_present_expression || that_present_expression) {
        if (!(this_present_expression && that_present_expression))
          return false;
        if (!this.expression.equals(that.expression))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExpression()) ? 131071 : 524287);
      if (isSetExpression())
        hashCode = hashCode * 8191 + expression.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToDNF_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExpression()).compareTo(other.isSetExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expression, other.expression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToDNF_args(");
      boolean first = true;

      sb.append("expression:");
      if (this.expression == null) {
        sb.append("null");
      } else {
        sb.append(this.expression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToDNF_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_argsStandardScheme getScheme() {
        return new convertToDNF_argsStandardScheme();
      }
    }

    private static class convertToDNF_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToDNF_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.expression = iprot.readString();
                struct.setExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToDNF_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.expression != null) {
          oprot.writeFieldBegin(EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.expression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToDNF_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_argsTupleScheme getScheme() {
        return new convertToDNF_argsTupleScheme();
      }
    }

    private static class convertToDNF_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToDNF_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExpression()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpression()) {
          oprot.writeString(struct.expression);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToDNF_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expression = iprot.readString();
          struct.setExpressionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class convertToDNF_result implements org.apache.thrift.TBase<convertToDNF_result, convertToDNF_result._Fields>, java.io.Serializable, Cloneable, Comparable<convertToDNF_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("convertToDNF_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new convertToDNF_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new convertToDNF_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(convertToDNF_result.class, metaDataMap);
    }

    public convertToDNF_result() {
    }

    public convertToDNF_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public convertToDNF_result(convertToDNF_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public convertToDNF_result deepCopy() {
      return new convertToDNF_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public convertToDNF_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof convertToDNF_result)
        return this.equals((convertToDNF_result)that);
      return false;
    }

    public boolean equals(convertToDNF_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(convertToDNF_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("convertToDNF_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class convertToDNF_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_resultStandardScheme getScheme() {
        return new convertToDNF_resultStandardScheme();
      }
    }

    private static class convertToDNF_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<convertToDNF_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, convertToDNF_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class convertToDNF_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public convertToDNF_resultTupleScheme getScheme() {
        return new convertToDNF_resultTupleScheme();
      }
    }

    private static class convertToDNF_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<convertToDNF_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, convertToDNF_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicalityWithStringInput_args implements org.apache.thrift.TBase<computeAlgebraicTypicalityWithStringInput_args, computeAlgebraicTypicalityWithStringInput_args._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicalityWithStringInput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicalityWithStringInput_args");

    private static final org.apache.thrift.protocol.TField ARCHITECTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("architecture", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_argsTupleSchemeFactory();

    public java.lang.String architecture; // required
    public java.lang.String feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARCHITECTURE((short)1, "architecture"),
      FEATURE((short)2, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARCHITECTURE
            return ARCHITECTURE;
          case 2: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARCHITECTURE, new org.apache.thrift.meta_data.FieldMetaData("architecture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicalityWithStringInput_args.class, metaDataMap);
    }

    public computeAlgebraicTypicalityWithStringInput_args() {
    }

    public computeAlgebraicTypicalityWithStringInput_args(
      java.lang.String architecture,
      java.lang.String feature)
    {
      this();
      this.architecture = architecture;
      this.feature = feature;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicalityWithStringInput_args(computeAlgebraicTypicalityWithStringInput_args other) {
      if (other.isSetArchitecture()) {
        this.architecture = other.architecture;
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
    }

    public computeAlgebraicTypicalityWithStringInput_args deepCopy() {
      return new computeAlgebraicTypicalityWithStringInput_args(this);
    }

    @Override
    public void clear() {
      this.architecture = null;
      this.feature = null;
    }

    public java.lang.String getArchitecture() {
      return this.architecture;
    }

    public computeAlgebraicTypicalityWithStringInput_args setArchitecture(java.lang.String architecture) {
      this.architecture = architecture;
      return this;
    }

    public void unsetArchitecture() {
      this.architecture = null;
    }

    /** Returns true if field architecture is set (has been assigned a value) and false otherwise */
    public boolean isSetArchitecture() {
      return this.architecture != null;
    }

    public void setArchitectureIsSet(boolean value) {
      if (!value) {
        this.architecture = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public computeAlgebraicTypicalityWithStringInput_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ARCHITECTURE:
        if (value == null) {
          unsetArchitecture();
        } else {
          setArchitecture((java.lang.String)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ARCHITECTURE:
        return getArchitecture();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ARCHITECTURE:
        return isSetArchitecture();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicalityWithStringInput_args)
        return this.equals((computeAlgebraicTypicalityWithStringInput_args)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicalityWithStringInput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_architecture = true && this.isSetArchitecture();
      boolean that_present_architecture = true && that.isSetArchitecture();
      if (this_present_architecture || that_present_architecture) {
        if (!(this_present_architecture && that_present_architecture))
          return false;
        if (!this.architecture.equals(that.architecture))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetArchitecture()) ? 131071 : 524287);
      if (isSetArchitecture())
        hashCode = hashCode * 8191 + architecture.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicalityWithStringInput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetArchitecture()).compareTo(other.isSetArchitecture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchitecture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.architecture, other.architecture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicalityWithStringInput_args(");
      boolean first = true;

      sb.append("architecture:");
      if (this.architecture == null) {
        sb.append("null");
      } else {
        sb.append(this.architecture);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_argsStandardScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_argsStandardScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicalityWithStringInput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARCHITECTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.architecture = iprot.readString();
                struct.setArchitectureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.architecture != null) {
          oprot.writeFieldBegin(ARCHITECTURE_FIELD_DESC);
          oprot.writeString(struct.architecture);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicalityWithStringInput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_argsTupleScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_argsTupleScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicalityWithStringInput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetArchitecture()) {
          optionals.set(0);
        }
        if (struct.isSetFeature()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArchitecture()) {
          oprot.writeString(struct.architecture);
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.architecture = iprot.readString();
          struct.setArchitectureIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class computeAlgebraicTypicalityWithStringInput_result implements org.apache.thrift.TBase<computeAlgebraicTypicalityWithStringInput_result, computeAlgebraicTypicalityWithStringInput_result._Fields>, java.io.Serializable, Cloneable, Comparable<computeAlgebraicTypicalityWithStringInput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("computeAlgebraicTypicalityWithStringInput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new computeAlgebraicTypicalityWithStringInput_resultTupleSchemeFactory();

    public java.util.List<java.lang.Integer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(computeAlgebraicTypicalityWithStringInput_result.class, metaDataMap);
    }

    public computeAlgebraicTypicalityWithStringInput_result() {
    }

    public computeAlgebraicTypicalityWithStringInput_result(
      java.util.List<java.lang.Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public computeAlgebraicTypicalityWithStringInput_result(computeAlgebraicTypicalityWithStringInput_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.Integer> __this__success = new java.util.ArrayList<java.lang.Integer>(other.success.size());
        for (java.lang.Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public computeAlgebraicTypicalityWithStringInput_result deepCopy() {
      return new computeAlgebraicTypicalityWithStringInput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.Integer>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.Integer> getSuccess() {
      return this.success;
    }

    public computeAlgebraicTypicalityWithStringInput_result setSuccess(java.util.List<java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof computeAlgebraicTypicalityWithStringInput_result)
        return this.equals((computeAlgebraicTypicalityWithStringInput_result)that);
      return false;
    }

    public boolean equals(computeAlgebraicTypicalityWithStringInput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(computeAlgebraicTypicalityWithStringInput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("computeAlgebraicTypicalityWithStringInput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_resultStandardScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_resultStandardScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<computeAlgebraicTypicalityWithStringInput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list336 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.Integer>(_list336.size);
                  int _elem337;
                  for (int _i338 = 0; _i338 < _list336.size; ++_i338)
                  {
                    _elem337 = iprot.readI32();
                    struct.success.add(_elem337);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter339 : struct.success)
            {
              oprot.writeI32(_iter339);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class computeAlgebraicTypicalityWithStringInput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public computeAlgebraicTypicalityWithStringInput_resultTupleScheme getScheme() {
        return new computeAlgebraicTypicalityWithStringInput_resultTupleScheme();
      }
    }

    private static class computeAlgebraicTypicalityWithStringInput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<computeAlgebraicTypicalityWithStringInput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (int _iter340 : struct.success)
            {
              oprot.writeI32(_iter340);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, computeAlgebraicTypicalityWithStringInput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list341 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.Integer>(_list341.size);
            int _elem342;
            for (int _i343 = 0; _i343 < _list341.size; ++_i343)
            {
              _elem342 = iprot.readI32();
              struct.success.add(_elem342);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
