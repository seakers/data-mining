/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-29")
public class DataMiningInterface {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesConjunctiveBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesConjunctiveDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesConjunctiveBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesConjunctiveDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public java.util.List<Feature> getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesBinary();
    }

    public void send_getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesBinary", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
      receiveBase(result, "getDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesBinary failed: unknown result");
    }

    public java.util.List<Feature> runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_runAutomatedLocalSearchBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_runAutomatedLocalSearchBinary();
    }

    public void send_runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchBinary_args args = new runAutomatedLocalSearchBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("runAutomatedLocalSearchBinary", args);
    }

    public java.util.List<Feature> recv_runAutomatedLocalSearchBinary() throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
      receiveBase(result, "runAutomatedLocalSearchBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchBinary failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesConjunctiveBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesConjunctiveBinary(problem, behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesConjunctiveBinary();
    }

    public void send_getMarginalDrivingFeaturesConjunctiveBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesConjunctiveBinary_args args = new getMarginalDrivingFeaturesConjunctiveBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeature(feature);
      args.setArchs_with_feature(archs_with_feature);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesConjunctiveBinary", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesConjunctiveBinary() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesConjunctiveBinary_result result = new getMarginalDrivingFeaturesConjunctiveBinary_result();
      receiveBase(result, "getMarginalDrivingFeaturesConjunctiveBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesConjunctiveBinary failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, featureExpression, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesBinary();
    }

    public void send_getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesBinary", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesBinary() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
      receiveBase(result, "getMarginalDrivingFeaturesBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesBinary failed: unknown result");
    }

    public java.util.List<Feature> getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeaturesDiscrete();
    }

    public void send_getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
      receiveBase(result, "getDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeaturesDiscrete failed: unknown result");
    }

    public java.util.List<Feature> runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_runAutomatedLocalSearchDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_runAutomatedLocalSearchDiscrete();
    }

    public void send_runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchDiscrete_args args = new runAutomatedLocalSearchDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("runAutomatedLocalSearchDiscrete", args);
    }

    public java.util.List<Feature> recv_runAutomatedLocalSearchDiscrete() throws org.apache.thrift.TException
    {
      runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
      receiveBase(result, "runAutomatedLocalSearchDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesConjunctiveDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesConjunctiveDiscrete(problem, behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesConjunctiveDiscrete();
    }

    public void send_getMarginalDrivingFeaturesConjunctiveDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesConjunctiveDiscrete_args args = new getMarginalDrivingFeaturesConjunctiveDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeature(feature);
      args.setArchs_with_feature(archs_with_feature);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesConjunctiveDiscrete", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesConjunctiveDiscrete() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesConjunctiveDiscrete_result result = new getMarginalDrivingFeaturesConjunctiveDiscrete_result();
      receiveBase(result, "getMarginalDrivingFeaturesConjunctiveDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesConjunctiveDiscrete failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, featureExpression, supp, conf, lift);
      return recv_getMarginalDrivingFeaturesDiscrete();
    }

    public void send_getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
      args.setProblem(problem);
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeatureExpression(featureExpression);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeaturesDiscrete", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeaturesDiscrete() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
      receiveBase(result, "getMarginalDrivingFeaturesDiscrete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesDiscrete failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesBinary_call method_call = new getDrivingFeaturesBinary_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesBinary_args args = new getDrivingFeaturesBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesBinary();
      }
    }

    public void runAutomatedLocalSearchBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runAutomatedLocalSearchBinary_call method_call = new runAutomatedLocalSearchBinary_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runAutomatedLocalSearchBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public runAutomatedLocalSearchBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runAutomatedLocalSearchBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runAutomatedLocalSearchBinary_args args = new runAutomatedLocalSearchBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runAutomatedLocalSearchBinary();
      }
    }

    public void getMarginalDrivingFeaturesConjunctiveBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesConjunctiveBinary_call method_call = new getMarginalDrivingFeaturesConjunctiveBinary_call(problem, behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesConjunctiveBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String feature;
      private java.util.List<java.lang.Integer> archs_with_feature;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesConjunctiveBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.feature = feature;
        this.archs_with_feature = archs_with_feature;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesConjunctiveBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesConjunctiveBinary_args args = new getMarginalDrivingFeaturesConjunctiveBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeature(feature);
        args.setArchs_with_feature(archs_with_feature);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesConjunctiveBinary();
      }
    }

    public void getMarginalDrivingFeaturesBinary(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesBinary_call method_call = new getMarginalDrivingFeaturesBinary_call(problem, behavioral, non_behavioral, all_archs, featureExpression, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesBinary_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesBinary_args args = new getMarginalDrivingFeaturesBinary_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesBinary();
      }
    }

    public void getDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeaturesDiscrete_call method_call = new getDrivingFeaturesDiscrete_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeaturesDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeaturesDiscrete_args args = new getDrivingFeaturesDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeaturesDiscrete();
      }
    }

    public void runAutomatedLocalSearchDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      runAutomatedLocalSearchDiscrete_call method_call = new runAutomatedLocalSearchDiscrete_call(problem, behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class runAutomatedLocalSearchDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public runAutomatedLocalSearchDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("runAutomatedLocalSearchDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        runAutomatedLocalSearchDiscrete_args args = new runAutomatedLocalSearchDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_runAutomatedLocalSearchDiscrete();
      }
    }

    public void getMarginalDrivingFeaturesConjunctiveDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesConjunctiveDiscrete_call method_call = new getMarginalDrivingFeaturesConjunctiveDiscrete_call(problem, behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesConjunctiveDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private java.lang.String feature;
      private java.util.List<java.lang.Integer> archs_with_feature;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesConjunctiveDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.feature = feature;
        this.archs_with_feature = archs_with_feature;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesConjunctiveDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesConjunctiveDiscrete_args args = new getMarginalDrivingFeaturesConjunctiveDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeature(feature);
        args.setArchs_with_feature(archs_with_feature);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesConjunctiveDiscrete();
      }
    }

    public void getMarginalDrivingFeaturesDiscrete(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeaturesDiscrete_call method_call = new getMarginalDrivingFeaturesDiscrete_call(problem, behavioral, non_behavioral, all_archs, featureExpression, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeaturesDiscrete_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.lang.String problem;
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<DiscreteInputArchitecture> all_archs;
      private java.lang.String featureExpression;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeaturesDiscrete_call(java.lang.String problem, java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<DiscreteInputArchitecture> all_archs, java.lang.String featureExpression, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.problem = problem;
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.featureExpression = featureExpression;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeaturesDiscrete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeaturesDiscrete_args args = new getMarginalDrivingFeaturesDiscrete_args();
        args.setProblem(problem);
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeatureExpression(featureExpression);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeaturesDiscrete();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("runAutomatedLocalSearchBinary", new runAutomatedLocalSearchBinary());
      processMap.put("getMarginalDrivingFeaturesConjunctiveBinary", new getMarginalDrivingFeaturesConjunctiveBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("runAutomatedLocalSearchDiscrete", new runAutomatedLocalSearchDiscrete());
      processMap.put("getMarginalDrivingFeaturesConjunctiveDiscrete", new getMarginalDrivingFeaturesConjunctiveDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class getDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesBinary_args> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesBinary_result getResult(I iface, getDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
        result.success = iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class runAutomatedLocalSearchBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runAutomatedLocalSearchBinary_args> {
      public runAutomatedLocalSearchBinary() {
        super("runAutomatedLocalSearchBinary");
      }

      public runAutomatedLocalSearchBinary_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public runAutomatedLocalSearchBinary_result getResult(I iface, runAutomatedLocalSearchBinary_args args) throws org.apache.thrift.TException {
        runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
        result.success = iface.runAutomatedLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesConjunctiveBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesConjunctiveBinary_args> {
      public getMarginalDrivingFeaturesConjunctiveBinary() {
        super("getMarginalDrivingFeaturesConjunctiveBinary");
      }

      public getMarginalDrivingFeaturesConjunctiveBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesConjunctiveBinary_result getResult(I iface, getMarginalDrivingFeaturesConjunctiveBinary_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesConjunctiveBinary_result result = new getMarginalDrivingFeaturesConjunctiveBinary_result();
        result.success = iface.getMarginalDrivingFeaturesConjunctiveBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesBinary_args> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesBinary_result getResult(I iface, getMarginalDrivingFeaturesBinary_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
        result.success = iface.getMarginalDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeaturesDiscrete_args> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getDrivingFeaturesDiscrete_result getResult(I iface, getDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
        result.success = iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class runAutomatedLocalSearchDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, runAutomatedLocalSearchDiscrete_args> {
      public runAutomatedLocalSearchDiscrete() {
        super("runAutomatedLocalSearchDiscrete");
      }

      public runAutomatedLocalSearchDiscrete_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public runAutomatedLocalSearchDiscrete_result getResult(I iface, runAutomatedLocalSearchDiscrete_args args) throws org.apache.thrift.TException {
        runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
        result.success = iface.runAutomatedLocalSearchDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesConjunctiveDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesConjunctiveDiscrete_args> {
      public getMarginalDrivingFeaturesConjunctiveDiscrete() {
        super("getMarginalDrivingFeaturesConjunctiveDiscrete");
      }

      public getMarginalDrivingFeaturesConjunctiveDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesConjunctiveDiscrete_result getResult(I iface, getMarginalDrivingFeaturesConjunctiveDiscrete_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesConjunctiveDiscrete_result result = new getMarginalDrivingFeaturesConjunctiveDiscrete_result();
        result.success = iface.getMarginalDrivingFeaturesConjunctiveDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getMarginalDrivingFeaturesDiscrete_result getResult(I iface, getMarginalDrivingFeaturesDiscrete_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
        result.success = iface.getMarginalDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.supp, args.conf, args.lift);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeaturesBinary", new getDrivingFeaturesBinary());
      processMap.put("runAutomatedLocalSearchBinary", new runAutomatedLocalSearchBinary());
      processMap.put("getMarginalDrivingFeaturesConjunctiveBinary", new getMarginalDrivingFeaturesConjunctiveBinary());
      processMap.put("getMarginalDrivingFeaturesBinary", new getMarginalDrivingFeaturesBinary());
      processMap.put("getDrivingFeaturesDiscrete", new getDrivingFeaturesDiscrete());
      processMap.put("runAutomatedLocalSearchDiscrete", new runAutomatedLocalSearchDiscrete());
      processMap.put("getMarginalDrivingFeaturesConjunctiveDiscrete", new getMarginalDrivingFeaturesConjunctiveDiscrete());
      processMap.put("getMarginalDrivingFeaturesDiscrete", new getMarginalDrivingFeaturesDiscrete());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesBinary_args, java.util.List<Feature>> {
      public getDrivingFeaturesBinary() {
        super("getDrivingFeaturesBinary");
      }

      public getDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesBinary_result result = new getDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class runAutomatedLocalSearchBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runAutomatedLocalSearchBinary_args, java.util.List<Feature>> {
      public runAutomatedLocalSearchBinary() {
        super("runAutomatedLocalSearchBinary");
      }

      public runAutomatedLocalSearchBinary_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runAutomatedLocalSearchBinary_result result = new runAutomatedLocalSearchBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runAutomatedLocalSearchBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.runAutomatedLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesConjunctiveBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesConjunctiveBinary_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesConjunctiveBinary() {
        super("getMarginalDrivingFeaturesConjunctiveBinary");
      }

      public getMarginalDrivingFeaturesConjunctiveBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesConjunctiveBinary_result result = new getMarginalDrivingFeaturesConjunctiveBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesConjunctiveBinary_result result = new getMarginalDrivingFeaturesConjunctiveBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesConjunctiveBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesConjunctiveBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesBinary_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesBinary() {
        super("getMarginalDrivingFeaturesBinary");
      }

      public getMarginalDrivingFeaturesBinary_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesBinary_result result = new getMarginalDrivingFeaturesBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getDrivingFeaturesDiscrete() {
        super("getDrivingFeaturesDiscrete");
      }

      public getDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeaturesDiscrete_result result = new getDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class runAutomatedLocalSearchDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, runAutomatedLocalSearchDiscrete_args, java.util.List<Feature>> {
      public runAutomatedLocalSearchDiscrete() {
        super("runAutomatedLocalSearchDiscrete");
      }

      public runAutomatedLocalSearchDiscrete_args getEmptyArgsInstance() {
        return new runAutomatedLocalSearchDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            runAutomatedLocalSearchDiscrete_result result = new runAutomatedLocalSearchDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, runAutomatedLocalSearchDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.runAutomatedLocalSearchDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesConjunctiveDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesConjunctiveDiscrete_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesConjunctiveDiscrete() {
        super("getMarginalDrivingFeaturesConjunctiveDiscrete");
      }

      public getMarginalDrivingFeaturesConjunctiveDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesConjunctiveDiscrete_result result = new getMarginalDrivingFeaturesConjunctiveDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesConjunctiveDiscrete_result result = new getMarginalDrivingFeaturesConjunctiveDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesConjunctiveDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesConjunctiveDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeaturesDiscrete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeaturesDiscrete_args, java.util.List<Feature>> {
      public getMarginalDrivingFeaturesDiscrete() {
        super("getMarginalDrivingFeaturesDiscrete");
      }

      public getMarginalDrivingFeaturesDiscrete_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeaturesDiscrete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeaturesDiscrete_result result = new getMarginalDrivingFeaturesDiscrete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeaturesDiscrete_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.supp, args.conf, args.lift,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getDrivingFeaturesBinary_args, getDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_args() {
    }

    public getDrivingFeaturesBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_args(getDrivingFeaturesBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesBinary_args deepCopy() {
      return new getDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_args)
        return this.equals((getDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.behavioral.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list59 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list59.size);
                  int _elem60;
                  for (int _i61 = 0; _i61 < _list59.size; ++_i61)
                  {
                    _elem60 = iprot.readI32();
                    struct.non_behavioral.add(_elem60);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list62.size);
                  BinaryInputArchitecture _elem63;
                  for (int _i64 = 0; _i64 < _list62.size; ++_i64)
                  {
                    _elem63 = new BinaryInputArchitecture();
                    _elem63.read(iprot);
                    struct.all_archs.add(_elem63);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter65 : struct.behavioral)
            {
              oprot.writeI32(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter66 : struct.non_behavioral)
            {
              oprot.writeI32(_iter66);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter67 : struct.all_archs)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter68 : struct.behavioral)
            {
              oprot.writeI32(_iter68);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter69 : struct.non_behavioral)
            {
              oprot.writeI32(_iter69);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter70 : struct.all_archs)
            {
              _iter70.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list71.size);
            int _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readI32();
              struct.behavioral.add(_elem72);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list74.size);
            int _elem75;
            for (int _i76 = 0; _i76 < _list74.size; ++_i76)
            {
              _elem75 = iprot.readI32();
              struct.non_behavioral.add(_elem75);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list77.size);
            BinaryInputArchitecture _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new BinaryInputArchitecture();
              _elem78.read(iprot);
              struct.all_archs.add(_elem78);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getDrivingFeaturesBinary_result, getDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getDrivingFeaturesBinary_result() {
    }

    public getDrivingFeaturesBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesBinary_result(getDrivingFeaturesBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesBinary_result deepCopy() {
      return new getDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesBinary_result)
        return this.equals((getDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list80.size);
                  Feature _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new Feature();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list85.size);
            Feature _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new Feature();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchBinary_args implements org.apache.thrift.TBase<runAutomatedLocalSearchBinary_args, runAutomatedLocalSearchBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchBinary_args.class, metaDataMap);
    }

    public runAutomatedLocalSearchBinary_args() {
    }

    public runAutomatedLocalSearchBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchBinary_args(runAutomatedLocalSearchBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public runAutomatedLocalSearchBinary_args deepCopy() {
      return new runAutomatedLocalSearchBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public runAutomatedLocalSearchBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public runAutomatedLocalSearchBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public runAutomatedLocalSearchBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public runAutomatedLocalSearchBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public runAutomatedLocalSearchBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public runAutomatedLocalSearchBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public runAutomatedLocalSearchBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchBinary_args)
        return this.equals((runAutomatedLocalSearchBinary_args)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_argsStandardScheme getScheme() {
        return new runAutomatedLocalSearchBinary_argsStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list88.size);
                  int _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI32();
                    struct.behavioral.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list91.size);
                  int _elem92;
                  for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                  {
                    _elem92 = iprot.readI32();
                    struct.non_behavioral.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list94.size);
                  BinaryInputArchitecture _elem95;
                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                  {
                    _elem95 = new BinaryInputArchitecture();
                    _elem95.read(iprot);
                    struct.all_archs.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter97 : struct.behavioral)
            {
              oprot.writeI32(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter98 : struct.non_behavioral)
            {
              oprot.writeI32(_iter98);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter99 : struct.all_archs)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_argsTupleScheme getScheme() {
        return new runAutomatedLocalSearchBinary_argsTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter100 : struct.behavioral)
            {
              oprot.writeI32(_iter100);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter101 : struct.non_behavioral)
            {
              oprot.writeI32(_iter101);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter102 : struct.all_archs)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list103.size);
            int _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = iprot.readI32();
              struct.behavioral.add(_elem104);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list106.size);
            int _elem107;
            for (int _i108 = 0; _i108 < _list106.size; ++_i108)
            {
              _elem107 = iprot.readI32();
              struct.non_behavioral.add(_elem107);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list109.size);
            BinaryInputArchitecture _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new BinaryInputArchitecture();
              _elem110.read(iprot);
              struct.all_archs.add(_elem110);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchBinary_result implements org.apache.thrift.TBase<runAutomatedLocalSearchBinary_result, runAutomatedLocalSearchBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchBinary_result.class, metaDataMap);
    }

    public runAutomatedLocalSearchBinary_result() {
    }

    public runAutomatedLocalSearchBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchBinary_result(runAutomatedLocalSearchBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public runAutomatedLocalSearchBinary_result deepCopy() {
      return new runAutomatedLocalSearchBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public runAutomatedLocalSearchBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchBinary_result)
        return this.equals((runAutomatedLocalSearchBinary_result)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_resultStandardScheme getScheme() {
        return new runAutomatedLocalSearchBinary_resultStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list112.size);
                  Feature _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new Feature();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchBinary_resultTupleScheme getScheme() {
        return new runAutomatedLocalSearchBinary_resultTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list117.size);
            Feature _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new Feature();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesConjunctiveBinary_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesConjunctiveBinary_args, getMarginalDrivingFeaturesConjunctiveBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesConjunctiveBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesConjunctiveBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ARCHS_WITH_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("archs_with_feature", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String feature; // required
    public java.util.List<java.lang.Integer> archs_with_feature; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE((short)5, "feature"),
      ARCHS_WITH_FEATURE((short)6, "archs_with_feature"),
      SUPP((short)7, "supp"),
      CONF((short)8, "conf"),
      LIFT((short)9, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE
            return FEATURE;
          case 6: // ARCHS_WITH_FEATURE
            return ARCHS_WITH_FEATURE;
          case 7: // SUPP
            return SUPP;
          case 8: // CONF
            return CONF;
          case 9: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCHS_WITH_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("archs_with_feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesConjunctiveBinary_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args() {
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String feature,
      java.util.List<java.lang.Integer> archs_with_feature,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.feature = feature;
      this.archs_with_feature = archs_with_feature;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesConjunctiveBinary_args(getMarginalDrivingFeaturesConjunctiveBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
      if (other.isSetArchs_with_feature()) {
        java.util.List<java.lang.Integer> __this__archs_with_feature = new java.util.ArrayList<java.lang.Integer>(other.archs_with_feature.size());
        for (java.lang.Integer other_element : other.archs_with_feature) {
          __this__archs_with_feature.add(other_element);
        }
        this.archs_with_feature = __this__archs_with_feature;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args deepCopy() {
      return new getMarginalDrivingFeaturesConjunctiveBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.feature = null;
      this.archs_with_feature = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public int getArchs_with_featureSize() {
      return (this.archs_with_feature == null) ? 0 : this.archs_with_feature.size();
    }

    public java.util.Iterator<java.lang.Integer> getArchs_with_featureIterator() {
      return (this.archs_with_feature == null) ? null : this.archs_with_feature.iterator();
    }

    public void addToArchs_with_feature(int elem) {
      if (this.archs_with_feature == null) {
        this.archs_with_feature = new java.util.ArrayList<java.lang.Integer>();
      }
      this.archs_with_feature.add(elem);
    }

    public java.util.List<java.lang.Integer> getArchs_with_feature() {
      return this.archs_with_feature;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setArchs_with_feature(java.util.List<java.lang.Integer> archs_with_feature) {
      this.archs_with_feature = archs_with_feature;
      return this;
    }

    public void unsetArchs_with_feature() {
      this.archs_with_feature = null;
    }

    /** Returns true if field archs_with_feature is set (has been assigned a value) and false otherwise */
    public boolean isSetArchs_with_feature() {
      return this.archs_with_feature != null;
    }

    public void setArchs_with_featureIsSet(boolean value) {
      if (!value) {
        this.archs_with_feature = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      case ARCHS_WITH_FEATURE:
        if (value == null) {
          unsetArchs_with_feature();
        } else {
          setArchs_with_feature((java.util.List<java.lang.Integer>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE:
        return getFeature();

      case ARCHS_WITH_FEATURE:
        return getArchs_with_feature();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE:
        return isSetFeature();
      case ARCHS_WITH_FEATURE:
        return isSetArchs_with_feature();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesConjunctiveBinary_args)
        return this.equals((getMarginalDrivingFeaturesConjunctiveBinary_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesConjunctiveBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      boolean this_present_archs_with_feature = true && this.isSetArchs_with_feature();
      boolean that_present_archs_with_feature = true && that.isSetArchs_with_feature();
      if (this_present_archs_with_feature || that_present_archs_with_feature) {
        if (!(this_present_archs_with_feature && that_present_archs_with_feature))
          return false;
        if (!this.archs_with_feature.equals(that.archs_with_feature))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      hashCode = hashCode * 8191 + ((isSetArchs_with_feature()) ? 131071 : 524287);
      if (isSetArchs_with_feature())
        hashCode = hashCode * 8191 + archs_with_feature.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesConjunctiveBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArchs_with_feature()).compareTo(other.isSetArchs_with_feature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchs_with_feature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archs_with_feature, other.archs_with_feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesConjunctiveBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("archs_with_feature:");
      if (this.archs_with_feature == null) {
        sb.append("null");
      } else {
        sb.append(this.archs_with_feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveBinary_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesConjunctiveBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesConjunctiveBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list120.size);
                  int _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readI32();
                    struct.behavioral.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list123.size);
                  int _elem124;
                  for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                  {
                    _elem124 = iprot.readI32();
                    struct.non_behavioral.add(_elem124);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list126.size);
                  BinaryInputArchitecture _elem127;
                  for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                  {
                    _elem127 = new BinaryInputArchitecture();
                    _elem127.read(iprot);
                    struct.all_archs.add(_elem127);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ARCHS_WITH_FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list129 = iprot.readListBegin();
                  struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list129.size);
                  int _elem130;
                  for (int _i131 = 0; _i131 < _list129.size; ++_i131)
                  {
                    _elem130 = iprot.readI32();
                    struct.archs_with_feature.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setArchs_with_featureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesConjunctiveBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter132 : struct.behavioral)
            {
              oprot.writeI32(_iter132);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter133 : struct.non_behavioral)
            {
              oprot.writeI32(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter134 : struct.all_archs)
            {
              _iter134.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        if (struct.archs_with_feature != null) {
          oprot.writeFieldBegin(ARCHS_WITH_FEATURE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.archs_with_feature.size()));
            for (int _iter135 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter135);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveBinary_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesConjunctiveBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeature()) {
          optionals.set(4);
        }
        if (struct.isSetArchs_with_feature()) {
          optionals.set(5);
        }
        if (struct.isSetSupp()) {
          optionals.set(6);
        }
        if (struct.isSetConf()) {
          optionals.set(7);
        }
        if (struct.isSetLift()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter136 : struct.behavioral)
            {
              oprot.writeI32(_iter136);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter137 : struct.non_behavioral)
            {
              oprot.writeI32(_iter137);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter138 : struct.all_archs)
            {
              _iter138.write(oprot);
            }
          }
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
        if (struct.isSetArchs_with_feature()) {
          {
            oprot.writeI32(struct.archs_with_feature.size());
            for (int _iter139 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter139);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list140 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list140.size);
            int _elem141;
            for (int _i142 = 0; _i142 < _list140.size; ++_i142)
            {
              _elem141 = iprot.readI32();
              struct.behavioral.add(_elem141);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list143.size);
            int _elem144;
            for (int _i145 = 0; _i145 < _list143.size; ++_i145)
            {
              _elem144 = iprot.readI32();
              struct.non_behavioral.add(_elem144);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list146.size);
            BinaryInputArchitecture _elem147;
            for (int _i148 = 0; _i148 < _list146.size; ++_i148)
            {
              _elem147 = new BinaryInputArchitecture();
              _elem147.read(iprot);
              struct.all_archs.add(_elem147);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list149.size);
            int _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readI32();
              struct.archs_with_feature.add(_elem150);
            }
          }
          struct.setArchs_with_featureIsSet(true);
        }
        if (incoming.get(6)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(7)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(8)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesConjunctiveBinary_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesConjunctiveBinary_result, getMarginalDrivingFeaturesConjunctiveBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesConjunctiveBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesConjunctiveBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesConjunctiveBinary_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_result() {
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesConjunctiveBinary_result(getMarginalDrivingFeaturesConjunctiveBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_result deepCopy() {
      return new getMarginalDrivingFeaturesConjunctiveBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesConjunctiveBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesConjunctiveBinary_result)
        return this.equals((getMarginalDrivingFeaturesConjunctiveBinary_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesConjunctiveBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesConjunctiveBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesConjunctiveBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveBinary_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesConjunctiveBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesConjunctiveBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list152.size);
                  Feature _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new Feature();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesConjunctiveBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveBinary_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveBinary_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesConjunctiveBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list157.size);
            Feature _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new Feature();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_args, getMarginalDrivingFeaturesBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE_EXPRESSION((short)5, "featureExpression"),
      SUPP((short)6, "supp"),
      CONF((short)7, "conf"),
      LIFT((short)8, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 6: // SUPP
            return SUPP;
          case 7: // CONF
            return CONF;
          case 8: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_args() {
    }

    public getMarginalDrivingFeaturesBinary_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String featureExpression,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_args(getMarginalDrivingFeaturesBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesBinary_args deepCopy() {
      return new getMarginalDrivingFeaturesBinary_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesBinary_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesBinary_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesBinary_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesBinary_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesBinary_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesBinary_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesBinary_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_args)
        return this.equals((getMarginalDrivingFeaturesBinary_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list160.size);
                  int _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = iprot.readI32();
                    struct.behavioral.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list163.size);
                  int _elem164;
                  for (int _i165 = 0; _i165 < _list163.size; ++_i165)
                  {
                    _elem164 = iprot.readI32();
                    struct.non_behavioral.add(_elem164);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list166.size);
                  BinaryInputArchitecture _elem167;
                  for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                  {
                    _elem167 = new BinaryInputArchitecture();
                    _elem167.read(iprot);
                    struct.all_archs.add(_elem167);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter169 : struct.behavioral)
            {
              oprot.writeI32(_iter169);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter170 : struct.non_behavioral)
            {
              oprot.writeI32(_iter170);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter171 : struct.all_archs)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(4);
        }
        if (struct.isSetSupp()) {
          optionals.set(5);
        }
        if (struct.isSetConf()) {
          optionals.set(6);
        }
        if (struct.isSetLift()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter172 : struct.behavioral)
            {
              oprot.writeI32(_iter172);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter173 : struct.non_behavioral)
            {
              oprot.writeI32(_iter173);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter174 : struct.all_archs)
            {
              _iter174.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list175.size);
            int _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              _elem176 = iprot.readI32();
              struct.behavioral.add(_elem176);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list178.size);
            int _elem179;
            for (int _i180 = 0; _i180 < _list178.size; ++_i180)
            {
              _elem179 = iprot.readI32();
              struct.non_behavioral.add(_elem179);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list181.size);
            BinaryInputArchitecture _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new BinaryInputArchitecture();
              _elem182.read(iprot);
              struct.all_archs.add(_elem182);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(6)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesBinary_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesBinary_result, getMarginalDrivingFeaturesBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesBinary_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesBinary_result() {
    }

    public getMarginalDrivingFeaturesBinary_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesBinary_result(getMarginalDrivingFeaturesBinary_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesBinary_result deepCopy() {
      return new getMarginalDrivingFeaturesBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesBinary_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesBinary_result)
        return this.equals((getMarginalDrivingFeaturesBinary_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list184.size);
                  Feature _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new Feature();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesBinary_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesBinary_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list189.size);
            Feature _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new Feature();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_args, getDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_args() {
    }

    public getDrivingFeaturesDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_args(getDrivingFeaturesDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeaturesDiscrete_args deepCopy() {
      return new getDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeaturesDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeaturesDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeaturesDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_args)
        return this.equals((getDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list192.size);
                  int _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = iprot.readI32();
                    struct.behavioral.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list195.size);
                  int _elem196;
                  for (int _i197 = 0; _i197 < _list195.size; ++_i197)
                  {
                    _elem196 = iprot.readI32();
                    struct.non_behavioral.add(_elem196);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list198 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list198.size);
                  DiscreteInputArchitecture _elem199;
                  for (int _i200 = 0; _i200 < _list198.size; ++_i200)
                  {
                    _elem199 = new DiscreteInputArchitecture();
                    _elem199.read(iprot);
                    struct.all_archs.add(_elem199);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter201 : struct.behavioral)
            {
              oprot.writeI32(_iter201);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter202 : struct.non_behavioral)
            {
              oprot.writeI32(_iter202);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter203 : struct.all_archs)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter204 : struct.behavioral)
            {
              oprot.writeI32(_iter204);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter205 : struct.non_behavioral)
            {
              oprot.writeI32(_iter205);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter206 : struct.all_archs)
            {
              _iter206.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list207.size);
            int _elem208;
            for (int _i209 = 0; _i209 < _list207.size; ++_i209)
            {
              _elem208 = iprot.readI32();
              struct.behavioral.add(_elem208);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list210 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list210.size);
            int _elem211;
            for (int _i212 = 0; _i212 < _list210.size; ++_i212)
            {
              _elem211 = iprot.readI32();
              struct.non_behavioral.add(_elem211);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list213.size);
            DiscreteInputArchitecture _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new DiscreteInputArchitecture();
              _elem214.read(iprot);
              struct.all_archs.add(_elem214);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getDrivingFeaturesDiscrete_result, getDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getDrivingFeaturesDiscrete_result() {
    }

    public getDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeaturesDiscrete_result(getDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeaturesDiscrete_result deepCopy() {
      return new getDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeaturesDiscrete_result)
        return this.equals((getDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list216.size);
                  Feature _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new Feature();
                    _elem217.read(iprot);
                    struct.success.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter219 : struct.success)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter220 : struct.success)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list221.size);
            Feature _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new Feature();
              _elem222.read(iprot);
              struct.success.add(_elem222);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchDiscrete_args implements org.apache.thrift.TBase<runAutomatedLocalSearchDiscrete_args, runAutomatedLocalSearchDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      SUPP((short)5, "supp"),
      CONF((short)6, "conf"),
      LIFT((short)7, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // SUPP
            return SUPP;
          case 6: // CONF
            return CONF;
          case 7: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchDiscrete_args.class, metaDataMap);
    }

    public runAutomatedLocalSearchDiscrete_args() {
    }

    public runAutomatedLocalSearchDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchDiscrete_args(runAutomatedLocalSearchDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public runAutomatedLocalSearchDiscrete_args deepCopy() {
      return new runAutomatedLocalSearchDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public runAutomatedLocalSearchDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public runAutomatedLocalSearchDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public runAutomatedLocalSearchDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public runAutomatedLocalSearchDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public runAutomatedLocalSearchDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public runAutomatedLocalSearchDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public runAutomatedLocalSearchDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchDiscrete_args)
        return this.equals((runAutomatedLocalSearchDiscrete_args)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_argsStandardScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_argsStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list224.size);
                  int _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = iprot.readI32();
                    struct.behavioral.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list227 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list227.size);
                  int _elem228;
                  for (int _i229 = 0; _i229 < _list227.size; ++_i229)
                  {
                    _elem228 = iprot.readI32();
                    struct.non_behavioral.add(_elem228);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list230.size);
                  DiscreteInputArchitecture _elem231;
                  for (int _i232 = 0; _i232 < _list230.size; ++_i232)
                  {
                    _elem231 = new DiscreteInputArchitecture();
                    _elem231.read(iprot);
                    struct.all_archs.add(_elem231);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter233 : struct.behavioral)
            {
              oprot.writeI32(_iter233);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter234 : struct.non_behavioral)
            {
              oprot.writeI32(_iter234);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter235 : struct.all_archs)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_argsTupleScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_argsTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetSupp()) {
          optionals.set(4);
        }
        if (struct.isSetConf()) {
          optionals.set(5);
        }
        if (struct.isSetLift()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter236 : struct.behavioral)
            {
              oprot.writeI32(_iter236);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter237 : struct.non_behavioral)
            {
              oprot.writeI32(_iter237);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter238 : struct.all_archs)
            {
              _iter238.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list239.size);
            int _elem240;
            for (int _i241 = 0; _i241 < _list239.size; ++_i241)
            {
              _elem240 = iprot.readI32();
              struct.behavioral.add(_elem240);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list242 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list242.size);
            int _elem243;
            for (int _i244 = 0; _i244 < _list242.size; ++_i244)
            {
              _elem243 = iprot.readI32();
              struct.non_behavioral.add(_elem243);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list245.size);
            DiscreteInputArchitecture _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new DiscreteInputArchitecture();
              _elem246.read(iprot);
              struct.all_archs.add(_elem246);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(5)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(6)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class runAutomatedLocalSearchDiscrete_result implements org.apache.thrift.TBase<runAutomatedLocalSearchDiscrete_result, runAutomatedLocalSearchDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<runAutomatedLocalSearchDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("runAutomatedLocalSearchDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new runAutomatedLocalSearchDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(runAutomatedLocalSearchDiscrete_result.class, metaDataMap);
    }

    public runAutomatedLocalSearchDiscrete_result() {
    }

    public runAutomatedLocalSearchDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public runAutomatedLocalSearchDiscrete_result(runAutomatedLocalSearchDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public runAutomatedLocalSearchDiscrete_result deepCopy() {
      return new runAutomatedLocalSearchDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public runAutomatedLocalSearchDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof runAutomatedLocalSearchDiscrete_result)
        return this.equals((runAutomatedLocalSearchDiscrete_result)that);
      return false;
    }

    public boolean equals(runAutomatedLocalSearchDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(runAutomatedLocalSearchDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("runAutomatedLocalSearchDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_resultStandardScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_resultStandardScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<runAutomatedLocalSearchDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list248.size);
                  Feature _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new Feature();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class runAutomatedLocalSearchDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public runAutomatedLocalSearchDiscrete_resultTupleScheme getScheme() {
        return new runAutomatedLocalSearchDiscrete_resultTupleScheme();
      }
    }

    private static class runAutomatedLocalSearchDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<runAutomatedLocalSearchDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, runAutomatedLocalSearchDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list253.size);
            Feature _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new Feature();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesConjunctiveDiscrete_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesConjunctiveDiscrete_args, getMarginalDrivingFeaturesConjunctiveDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesConjunctiveDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesConjunctiveDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ARCHS_WITH_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("archs_with_feature", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public java.lang.String feature; // required
    public java.util.List<java.lang.Integer> archs_with_feature; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE((short)5, "feature"),
      ARCHS_WITH_FEATURE((short)6, "archs_with_feature"),
      SUPP((short)7, "supp"),
      CONF((short)8, "conf"),
      LIFT((short)9, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE
            return FEATURE;
          case 6: // ARCHS_WITH_FEATURE
            return ARCHS_WITH_FEATURE;
          case 7: // SUPP
            return SUPP;
          case 8: // CONF
            return CONF;
          case 9: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCHS_WITH_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("archs_with_feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesConjunctiveDiscrete_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args() {
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      java.lang.String feature,
      java.util.List<java.lang.Integer> archs_with_feature,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.feature = feature;
      this.archs_with_feature = archs_with_feature;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesConjunctiveDiscrete_args(getMarginalDrivingFeaturesConjunctiveDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
      if (other.isSetArchs_with_feature()) {
        java.util.List<java.lang.Integer> __this__archs_with_feature = new java.util.ArrayList<java.lang.Integer>(other.archs_with_feature.size());
        for (java.lang.Integer other_element : other.archs_with_feature) {
          __this__archs_with_feature.add(other_element);
        }
        this.archs_with_feature = __this__archs_with_feature;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args deepCopy() {
      return new getMarginalDrivingFeaturesConjunctiveDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.feature = null;
      this.archs_with_feature = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public int getArchs_with_featureSize() {
      return (this.archs_with_feature == null) ? 0 : this.archs_with_feature.size();
    }

    public java.util.Iterator<java.lang.Integer> getArchs_with_featureIterator() {
      return (this.archs_with_feature == null) ? null : this.archs_with_feature.iterator();
    }

    public void addToArchs_with_feature(int elem) {
      if (this.archs_with_feature == null) {
        this.archs_with_feature = new java.util.ArrayList<java.lang.Integer>();
      }
      this.archs_with_feature.add(elem);
    }

    public java.util.List<java.lang.Integer> getArchs_with_feature() {
      return this.archs_with_feature;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setArchs_with_feature(java.util.List<java.lang.Integer> archs_with_feature) {
      this.archs_with_feature = archs_with_feature;
      return this;
    }

    public void unsetArchs_with_feature() {
      this.archs_with_feature = null;
    }

    /** Returns true if field archs_with_feature is set (has been assigned a value) and false otherwise */
    public boolean isSetArchs_with_feature() {
      return this.archs_with_feature != null;
    }

    public void setArchs_with_featureIsSet(boolean value) {
      if (!value) {
        this.archs_with_feature = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      case ARCHS_WITH_FEATURE:
        if (value == null) {
          unsetArchs_with_feature();
        } else {
          setArchs_with_feature((java.util.List<java.lang.Integer>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE:
        return getFeature();

      case ARCHS_WITH_FEATURE:
        return getArchs_with_feature();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE:
        return isSetFeature();
      case ARCHS_WITH_FEATURE:
        return isSetArchs_with_feature();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesConjunctiveDiscrete_args)
        return this.equals((getMarginalDrivingFeaturesConjunctiveDiscrete_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesConjunctiveDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      boolean this_present_archs_with_feature = true && this.isSetArchs_with_feature();
      boolean that_present_archs_with_feature = true && that.isSetArchs_with_feature();
      if (this_present_archs_with_feature || that_present_archs_with_feature) {
        if (!(this_present_archs_with_feature && that_present_archs_with_feature))
          return false;
        if (!this.archs_with_feature.equals(that.archs_with_feature))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      hashCode = hashCode * 8191 + ((isSetArchs_with_feature()) ? 131071 : 524287);
      if (isSetArchs_with_feature())
        hashCode = hashCode * 8191 + archs_with_feature.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesConjunctiveDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArchs_with_feature()).compareTo(other.isSetArchs_with_feature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchs_with_feature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archs_with_feature, other.archs_with_feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesConjunctiveDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("archs_with_feature:");
      if (this.archs_with_feature == null) {
        sb.append("null");
      } else {
        sb.append(this.archs_with_feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveDiscrete_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesConjunctiveDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesConjunctiveDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list256.size);
                  int _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = iprot.readI32();
                    struct.behavioral.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list259 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list259.size);
                  int _elem260;
                  for (int _i261 = 0; _i261 < _list259.size; ++_i261)
                  {
                    _elem260 = iprot.readI32();
                    struct.non_behavioral.add(_elem260);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list262.size);
                  DiscreteInputArchitecture _elem263;
                  for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                  {
                    _elem263 = new DiscreteInputArchitecture();
                    _elem263.read(iprot);
                    struct.all_archs.add(_elem263);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ARCHS_WITH_FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list265 = iprot.readListBegin();
                  struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list265.size);
                  int _elem266;
                  for (int _i267 = 0; _i267 < _list265.size; ++_i267)
                  {
                    _elem266 = iprot.readI32();
                    struct.archs_with_feature.add(_elem266);
                  }
                  iprot.readListEnd();
                }
                struct.setArchs_with_featureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesConjunctiveDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter268 : struct.behavioral)
            {
              oprot.writeI32(_iter268);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter269 : struct.non_behavioral)
            {
              oprot.writeI32(_iter269);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter270 : struct.all_archs)
            {
              _iter270.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        if (struct.archs_with_feature != null) {
          oprot.writeFieldBegin(ARCHS_WITH_FEATURE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.archs_with_feature.size()));
            for (int _iter271 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter271);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveDiscrete_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesConjunctiveDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeature()) {
          optionals.set(4);
        }
        if (struct.isSetArchs_with_feature()) {
          optionals.set(5);
        }
        if (struct.isSetSupp()) {
          optionals.set(6);
        }
        if (struct.isSetConf()) {
          optionals.set(7);
        }
        if (struct.isSetLift()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter272 : struct.behavioral)
            {
              oprot.writeI32(_iter272);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter273 : struct.non_behavioral)
            {
              oprot.writeI32(_iter273);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter274 : struct.all_archs)
            {
              _iter274.write(oprot);
            }
          }
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
        if (struct.isSetArchs_with_feature()) {
          {
            oprot.writeI32(struct.archs_with_feature.size());
            for (int _iter275 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter275);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list276 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list276.size);
            int _elem277;
            for (int _i278 = 0; _i278 < _list276.size; ++_i278)
            {
              _elem277 = iprot.readI32();
              struct.behavioral.add(_elem277);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list279.size);
            int _elem280;
            for (int _i281 = 0; _i281 < _list279.size; ++_i281)
            {
              _elem280 = iprot.readI32();
              struct.non_behavioral.add(_elem280);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list282 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list282.size);
            DiscreteInputArchitecture _elem283;
            for (int _i284 = 0; _i284 < _list282.size; ++_i284)
            {
              _elem283 = new DiscreteInputArchitecture();
              _elem283.read(iprot);
              struct.all_archs.add(_elem283);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list285.size);
            int _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = iprot.readI32();
              struct.archs_with_feature.add(_elem286);
            }
          }
          struct.setArchs_with_featureIsSet(true);
        }
        if (incoming.get(6)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(7)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(8)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesConjunctiveDiscrete_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesConjunctiveDiscrete_result, getMarginalDrivingFeaturesConjunctiveDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesConjunctiveDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesConjunctiveDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesConjunctiveDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesConjunctiveDiscrete_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_result() {
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesConjunctiveDiscrete_result(getMarginalDrivingFeaturesConjunctiveDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_result deepCopy() {
      return new getMarginalDrivingFeaturesConjunctiveDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesConjunctiveDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesConjunctiveDiscrete_result)
        return this.equals((getMarginalDrivingFeaturesConjunctiveDiscrete_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesConjunctiveDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesConjunctiveDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesConjunctiveDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveDiscrete_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesConjunctiveDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesConjunctiveDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list288.size);
                  Feature _elem289;
                  for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                  {
                    _elem289 = new Feature();
                    _elem289.read(iprot);
                    struct.success.add(_elem289);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesConjunctiveDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter291 : struct.success)
            {
              _iter291.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesConjunctiveDiscrete_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesConjunctiveDiscrete_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesConjunctiveDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesConjunctiveDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter292 : struct.success)
            {
              _iter292.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesConjunctiveDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list293.size);
            Feature _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = new Feature();
              _elem294.read(iprot);
              struct.success.add(_elem294);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_args implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_args, getMarginalDrivingFeaturesDiscrete_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_args");

    private static final org.apache.thrift.protocol.TField PROBLEM_FIELD_DESC = new org.apache.thrift.protocol.TField("problem", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField FEATURE_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("featureExpression", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory();

    public java.lang.String problem; // required
    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<DiscreteInputArchitecture> all_archs; // required
    public java.lang.String featureExpression; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROBLEM((short)1, "problem"),
      BEHAVIORAL((short)2, "behavioral"),
      NON_BEHAVIORAL((short)3, "non_behavioral"),
      ALL_ARCHS((short)4, "all_archs"),
      FEATURE_EXPRESSION((short)5, "featureExpression"),
      SUPP((short)6, "supp"),
      CONF((short)7, "conf"),
      LIFT((short)8, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROBLEM
            return PROBLEM;
          case 2: // BEHAVIORAL
            return BEHAVIORAL;
          case 3: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 4: // ALL_ARCHS
            return ALL_ARCHS;
          case 5: // FEATURE_EXPRESSION
            return FEATURE_EXPRESSION;
          case 6: // SUPP
            return SUPP;
          case 7: // CONF
            return CONF;
          case 8: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROBLEM, new org.apache.thrift.meta_data.FieldMetaData("problem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DiscreteInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("featureExpression", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_args.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_args() {
    }

    public getMarginalDrivingFeaturesDiscrete_args(
      java.lang.String problem,
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<DiscreteInputArchitecture> all_archs,
      java.lang.String featureExpression,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.problem = problem;
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.featureExpression = featureExpression;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_args(getMarginalDrivingFeaturesDiscrete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProblem()) {
        this.problem = other.problem;
      }
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<DiscreteInputArchitecture> __this__all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(other.all_archs.size());
        for (DiscreteInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new DiscreteInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeatureExpression()) {
        this.featureExpression = other.featureExpression;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeaturesDiscrete_args deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_args(this);
    }

    @Override
    public void clear() {
      this.problem = null;
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.featureExpression = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public java.lang.String getProblem() {
      return this.problem;
    }

    public getMarginalDrivingFeaturesDiscrete_args setProblem(java.lang.String problem) {
      this.problem = problem;
      return this;
    }

    public void unsetProblem() {
      this.problem = null;
    }

    /** Returns true if field problem is set (has been assigned a value) and false otherwise */
    public boolean isSetProblem() {
      return this.problem != null;
    }

    public void setProblemIsSet(boolean value) {
      if (!value) {
        this.problem = null;
      }
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeaturesDiscrete_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<DiscreteInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(DiscreteInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<DiscreteInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeaturesDiscrete_args setAll_archs(java.util.List<DiscreteInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeatureExpression() {
      return this.featureExpression;
    }

    public getMarginalDrivingFeaturesDiscrete_args setFeatureExpression(java.lang.String featureExpression) {
      this.featureExpression = featureExpression;
      return this;
    }

    public void unsetFeatureExpression() {
      this.featureExpression = null;
    }

    /** Returns true if field featureExpression is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureExpression() {
      return this.featureExpression != null;
    }

    public void setFeatureExpressionIsSet(boolean value) {
      if (!value) {
        this.featureExpression = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeaturesDiscrete_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeaturesDiscrete_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeaturesDiscrete_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROBLEM:
        if (value == null) {
          unsetProblem();
        } else {
          setProblem((java.lang.String)value);
        }
        break;

      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<DiscreteInputArchitecture>)value);
        }
        break;

      case FEATURE_EXPRESSION:
        if (value == null) {
          unsetFeatureExpression();
        } else {
          setFeatureExpression((java.lang.String)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROBLEM:
        return getProblem();

      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE_EXPRESSION:
        return getFeatureExpression();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROBLEM:
        return isSetProblem();
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE_EXPRESSION:
        return isSetFeatureExpression();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_args)
        return this.equals((getMarginalDrivingFeaturesDiscrete_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_problem = true && this.isSetProblem();
      boolean that_present_problem = true && that.isSetProblem();
      if (this_present_problem || that_present_problem) {
        if (!(this_present_problem && that_present_problem))
          return false;
        if (!this.problem.equals(that.problem))
          return false;
      }

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_featureExpression = true && this.isSetFeatureExpression();
      boolean that_present_featureExpression = true && that.isSetFeatureExpression();
      if (this_present_featureExpression || that_present_featureExpression) {
        if (!(this_present_featureExpression && that_present_featureExpression))
          return false;
        if (!this.featureExpression.equals(that.featureExpression))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProblem()) ? 131071 : 524287);
      if (isSetProblem())
        hashCode = hashCode * 8191 + problem.hashCode();

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatureExpression()) ? 131071 : 524287);
      if (isSetFeatureExpression())
        hashCode = hashCode * 8191 + featureExpression.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProblem()).compareTo(other.isSetProblem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProblem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.problem, other.problem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatureExpression()).compareTo(other.isSetFeatureExpression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureExpression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featureExpression, other.featureExpression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_args(");
      boolean first = true;

      sb.append("problem:");
      if (this.problem == null) {
        sb.append("null");
      } else {
        sb.append(this.problem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("featureExpression:");
      if (this.featureExpression == null) {
        sb.append("null");
      } else {
        sb.append(this.featureExpression);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROBLEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.problem = iprot.readString();
                struct.setProblemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list296.size);
                  int _elem297;
                  for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                  {
                    _elem297 = iprot.readI32();
                    struct.behavioral.add(_elem297);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list299 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list299.size);
                  int _elem300;
                  for (int _i301 = 0; _i301 < _list299.size; ++_i301)
                  {
                    _elem300 = iprot.readI32();
                    struct.non_behavioral.add(_elem300);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list302 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list302.size);
                  DiscreteInputArchitecture _elem303;
                  for (int _i304 = 0; _i304 < _list302.size; ++_i304)
                  {
                    _elem303 = new DiscreteInputArchitecture();
                    _elem303.read(iprot);
                    struct.all_archs.add(_elem303);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FEATURE_EXPRESSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.featureExpression = iprot.readString();
                struct.setFeatureExpressionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.problem != null) {
          oprot.writeFieldBegin(PROBLEM_FIELD_DESC);
          oprot.writeString(struct.problem);
          oprot.writeFieldEnd();
        }
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter305 : struct.behavioral)
            {
              oprot.writeI32(_iter305);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter306 : struct.non_behavioral)
            {
              oprot.writeI32(_iter306);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (DiscreteInputArchitecture _iter307 : struct.all_archs)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.featureExpression != null) {
          oprot.writeFieldBegin(FEATURE_EXPRESSION_FIELD_DESC);
          oprot.writeString(struct.featureExpression);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProblem()) {
          optionals.set(0);
        }
        if (struct.isSetBehavioral()) {
          optionals.set(1);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(2);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(3);
        }
        if (struct.isSetFeatureExpression()) {
          optionals.set(4);
        }
        if (struct.isSetSupp()) {
          optionals.set(5);
        }
        if (struct.isSetConf()) {
          optionals.set(6);
        }
        if (struct.isSetLift()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetProblem()) {
          oprot.writeString(struct.problem);
        }
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter308 : struct.behavioral)
            {
              oprot.writeI32(_iter308);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter309 : struct.non_behavioral)
            {
              oprot.writeI32(_iter309);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (DiscreteInputArchitecture _iter310 : struct.all_archs)
            {
              _iter310.write(oprot);
            }
          }
        }
        if (struct.isSetFeatureExpression()) {
          oprot.writeString(struct.featureExpression);
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.problem = iprot.readString();
          struct.setProblemIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list311.size);
            int _elem312;
            for (int _i313 = 0; _i313 < _list311.size; ++_i313)
            {
              _elem312 = iprot.readI32();
              struct.behavioral.add(_elem312);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list314 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list314.size);
            int _elem315;
            for (int _i316 = 0; _i316 < _list314.size; ++_i316)
            {
              _elem315 = iprot.readI32();
              struct.non_behavioral.add(_elem315);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list317 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<DiscreteInputArchitecture>(_list317.size);
            DiscreteInputArchitecture _elem318;
            for (int _i319 = 0; _i319 < _list317.size; ++_i319)
            {
              _elem318 = new DiscreteInputArchitecture();
              _elem318.read(iprot);
              struct.all_archs.add(_elem318);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.featureExpression = iprot.readString();
          struct.setFeatureExpressionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(6)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeaturesDiscrete_result implements org.apache.thrift.TBase<getMarginalDrivingFeaturesDiscrete_result, getMarginalDrivingFeaturesDiscrete_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeaturesDiscrete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeaturesDiscrete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeaturesDiscrete_result.class, metaDataMap);
    }

    public getMarginalDrivingFeaturesDiscrete_result() {
    }

    public getMarginalDrivingFeaturesDiscrete_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeaturesDiscrete_result(getMarginalDrivingFeaturesDiscrete_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeaturesDiscrete_result deepCopy() {
      return new getMarginalDrivingFeaturesDiscrete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeaturesDiscrete_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeaturesDiscrete_result)
        return this.equals((getMarginalDrivingFeaturesDiscrete_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeaturesDiscrete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeaturesDiscrete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeaturesDiscrete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeaturesDiscrete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list320.size);
                  Feature _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = new Feature();
                    _elem321.read(iprot);
                    struct.success.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter323 : struct.success)
            {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeaturesDiscrete_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeaturesDiscrete_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeaturesDiscrete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeaturesDiscrete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter324 : struct.success)
            {
              _iter324.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeaturesDiscrete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list325.size);
            Feature _elem326;
            for (int _i327 = 0; _i327 < _list325.size; ++_i327)
            {
              _elem326 = new Feature();
              _elem326.read(iprot);
              struct.success.add(_elem326);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
