/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package javaInterface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-25")
public class DataMiningInterface {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public java.util.List<Feature> getDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException;

    public java.util.List<Feature> getMarginalDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

    public void getMarginalDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public java.util.List<Feature> getDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getDrivingFeatures(behavioral, non_behavioral, all_archs, supp, conf, lift);
      return recv_getDrivingFeatures();
    }

    public void send_getDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getDrivingFeatures_args args = new getDrivingFeatures_args();
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getDrivingFeatures", args);
    }

    public java.util.List<Feature> recv_getDrivingFeatures() throws org.apache.thrift.TException
    {
      getDrivingFeatures_result result = new getDrivingFeatures_result();
      receiveBase(result, "getDrivingFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDrivingFeatures failed: unknown result");
    }

    public java.util.List<Feature> getMarginalDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      send_getMarginalDrivingFeatures(behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift);
      return recv_getMarginalDrivingFeatures();
    }

    public void send_getMarginalDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift) throws org.apache.thrift.TException
    {
      getMarginalDrivingFeatures_args args = new getMarginalDrivingFeatures_args();
      args.setBehavioral(behavioral);
      args.setNon_behavioral(non_behavioral);
      args.setAll_archs(all_archs);
      args.setFeature(feature);
      args.setArchs_with_feature(archs_with_feature);
      args.setSupp(supp);
      args.setConf(conf);
      args.setLift(lift);
      sendBase("getMarginalDrivingFeatures", args);
    }

    public java.util.List<Feature> recv_getMarginalDrivingFeatures() throws org.apache.thrift.TException
    {
      getMarginalDrivingFeatures_result result = new getMarginalDrivingFeatures_result();
      receiveBase(result, "getMarginalDrivingFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMarginalDrivingFeatures failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDrivingFeatures_call method_call = new getDrivingFeatures_call(behavioral, non_behavioral, all_archs, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDrivingFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private double supp;
      private double conf;
      private double lift;
      public getDrivingFeatures_call(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDrivingFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDrivingFeatures_args args = new getDrivingFeatures_args();
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDrivingFeatures();
      }
    }

    public void getMarginalDrivingFeatures(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMarginalDrivingFeatures_call method_call = new getMarginalDrivingFeatures_call(behavioral, non_behavioral, all_archs, feature, archs_with_feature, supp, conf, lift, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMarginalDrivingFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Feature>> {
      private java.util.List<java.lang.Integer> behavioral;
      private java.util.List<java.lang.Integer> non_behavioral;
      private java.util.List<BinaryInputArchitecture> all_archs;
      private java.lang.String feature;
      private java.util.List<java.lang.Integer> archs_with_feature;
      private double supp;
      private double conf;
      private double lift;
      public getMarginalDrivingFeatures_call(java.util.List<java.lang.Integer> behavioral, java.util.List<java.lang.Integer> non_behavioral, java.util.List<BinaryInputArchitecture> all_archs, java.lang.String feature, java.util.List<java.lang.Integer> archs_with_feature, double supp, double conf, double lift, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.behavioral = behavioral;
        this.non_behavioral = non_behavioral;
        this.all_archs = all_archs;
        this.feature = feature;
        this.archs_with_feature = archs_with_feature;
        this.supp = supp;
        this.conf = conf;
        this.lift = lift;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMarginalDrivingFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMarginalDrivingFeatures_args args = new getMarginalDrivingFeatures_args();
        args.setBehavioral(behavioral);
        args.setNon_behavioral(non_behavioral);
        args.setAll_archs(all_archs);
        args.setFeature(feature);
        args.setArchs_with_feature(archs_with_feature);
        args.setSupp(supp);
        args.setConf(conf);
        args.setLift(lift);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Feature> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMarginalDrivingFeatures();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeatures", new getDrivingFeatures());
      processMap.put("getMarginalDrivingFeatures", new getMarginalDrivingFeatures());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class getDrivingFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDrivingFeatures_args> {
      public getDrivingFeatures() {
        super("getDrivingFeatures");
      }

      public getDrivingFeatures_args getEmptyArgsInstance() {
        return new getDrivingFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDrivingFeatures_result getResult(I iface, getDrivingFeatures_args args) throws org.apache.thrift.TException {
        getDrivingFeatures_result result = new getDrivingFeatures_result();
        result.success = iface.getDrivingFeatures(args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift);
        return result;
      }
    }

    public static class getMarginalDrivingFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMarginalDrivingFeatures_args> {
      public getMarginalDrivingFeatures() {
        super("getMarginalDrivingFeatures");
      }

      public getMarginalDrivingFeatures_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMarginalDrivingFeatures_result getResult(I iface, getMarginalDrivingFeatures_args args) throws org.apache.thrift.TException {
        getMarginalDrivingFeatures_result result = new getMarginalDrivingFeatures_result();
        result.success = iface.getMarginalDrivingFeatures(args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getDrivingFeatures", new getDrivingFeatures());
      processMap.put("getMarginalDrivingFeatures", new getMarginalDrivingFeatures());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getDrivingFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDrivingFeatures_args, java.util.List<Feature>> {
      public getDrivingFeatures() {
        super("getDrivingFeatures");
      }

      public getDrivingFeatures_args getEmptyArgsInstance() {
        return new getDrivingFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getDrivingFeatures_result result = new getDrivingFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDrivingFeatures_result result = new getDrivingFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDrivingFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getDrivingFeatures(args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift,resultHandler);
      }
    }

    public static class getMarginalDrivingFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMarginalDrivingFeatures_args, java.util.List<Feature>> {
      public getMarginalDrivingFeatures() {
        super("getMarginalDrivingFeatures");
      }

      public getMarginalDrivingFeatures_args getEmptyArgsInstance() {
        return new getMarginalDrivingFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>>() { 
          public void onComplete(java.util.List<Feature> o) {
            getMarginalDrivingFeatures_result result = new getMarginalDrivingFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMarginalDrivingFeatures_result result = new getMarginalDrivingFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMarginalDrivingFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Feature>> resultHandler) throws org.apache.thrift.TException {
        iface.getMarginalDrivingFeatures(args.behavioral, args.non_behavioral, args.all_archs, args.feature, args.archs_with_feature, args.supp, args.conf, args.lift,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeatures_args implements org.apache.thrift.TBase<getDrivingFeatures_args, getDrivingFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeatures_args");

    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeatures_argsTupleSchemeFactory();

    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEHAVIORAL((short)1, "behavioral"),
      NON_BEHAVIORAL((short)2, "non_behavioral"),
      ALL_ARCHS((short)3, "all_archs"),
      SUPP((short)4, "supp"),
      CONF((short)5, "conf"),
      LIFT((short)6, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEHAVIORAL
            return BEHAVIORAL;
          case 2: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 3: // ALL_ARCHS
            return ALL_ARCHS;
          case 4: // SUPP
            return SUPP;
          case 5: // CONF
            return CONF;
          case 6: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeatures_args.class, metaDataMap);
    }

    public getDrivingFeatures_args() {
    }

    public getDrivingFeatures_args(
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeatures_args(getDrivingFeatures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getDrivingFeatures_args deepCopy() {
      return new getDrivingFeatures_args(this);
    }

    @Override
    public void clear() {
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getDrivingFeatures_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getDrivingFeatures_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getDrivingFeatures_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getDrivingFeatures_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getDrivingFeatures_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getDrivingFeatures_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeatures_args)
        return this.equals((getDrivingFeatures_args)that);
      return false;
    }

    public boolean equals(getDrivingFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeatures_args(");
      boolean first = true;

      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeatures_argsStandardScheme getScheme() {
        return new getDrivingFeatures_argsStandardScheme();
      }
    }

    private static class getDrivingFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list40.size);
                  int _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readI32();
                    struct.behavioral.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list43.size);
                  int _elem44;
                  for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                  {
                    _elem44 = iprot.readI32();
                    struct.non_behavioral.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list46.size);
                  BinaryInputArchitecture _elem47;
                  for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                  {
                    _elem47 = new BinaryInputArchitecture();
                    _elem47.read(iprot);
                    struct.all_archs.add(_elem47);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter49 : struct.behavioral)
            {
              oprot.writeI32(_iter49);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter50 : struct.non_behavioral)
            {
              oprot.writeI32(_iter50);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter51 : struct.all_archs)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeatures_argsTupleScheme getScheme() {
        return new getDrivingFeatures_argsTupleScheme();
      }
    }

    private static class getDrivingFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBehavioral()) {
          optionals.set(0);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(1);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(2);
        }
        if (struct.isSetSupp()) {
          optionals.set(3);
        }
        if (struct.isSetConf()) {
          optionals.set(4);
        }
        if (struct.isSetLift()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter52 : struct.behavioral)
            {
              oprot.writeI32(_iter52);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter53 : struct.non_behavioral)
            {
              oprot.writeI32(_iter53);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter54 : struct.all_archs)
            {
              _iter54.write(oprot);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list55.size);
            int _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readI32();
              struct.behavioral.add(_elem56);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list58.size);
            int _elem59;
            for (int _i60 = 0; _i60 < _list58.size; ++_i60)
            {
              _elem59 = iprot.readI32();
              struct.non_behavioral.add(_elem59);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list61.size);
            BinaryInputArchitecture _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new BinaryInputArchitecture();
              _elem62.read(iprot);
              struct.all_archs.add(_elem62);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(4)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(5)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDrivingFeatures_result implements org.apache.thrift.TBase<getDrivingFeatures_result, getDrivingFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDrivingFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDrivingFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDrivingFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDrivingFeatures_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDrivingFeatures_result.class, metaDataMap);
    }

    public getDrivingFeatures_result() {
    }

    public getDrivingFeatures_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDrivingFeatures_result(getDrivingFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getDrivingFeatures_result deepCopy() {
      return new getDrivingFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getDrivingFeatures_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDrivingFeatures_result)
        return this.equals((getDrivingFeatures_result)that);
      return false;
    }

    public boolean equals(getDrivingFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDrivingFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDrivingFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDrivingFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeatures_resultStandardScheme getScheme() {
        return new getDrivingFeatures_resultStandardScheme();
      }
    }

    private static class getDrivingFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDrivingFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list64.size);
                  Feature _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new Feature();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDrivingFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDrivingFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDrivingFeatures_resultTupleScheme getScheme() {
        return new getDrivingFeatures_resultTupleScheme();
      }
    }

    private static class getDrivingFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDrivingFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list69.size);
            Feature _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new Feature();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeatures_args implements org.apache.thrift.TBase<getMarginalDrivingFeatures_args, getMarginalDrivingFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeatures_args");

    private static final org.apache.thrift.protocol.TField BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("behavioral", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField NON_BEHAVIORAL_FIELD_DESC = new org.apache.thrift.protocol.TField("non_behavioral", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ALL_ARCHS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_archs", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHS_WITH_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("archs_with_feature", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField SUPP_FIELD_DESC = new org.apache.thrift.protocol.TField("supp", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("conf", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField LIFT_FIELD_DESC = new org.apache.thrift.protocol.TField("lift", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeatures_argsTupleSchemeFactory();

    public java.util.List<java.lang.Integer> behavioral; // required
    public java.util.List<java.lang.Integer> non_behavioral; // required
    public java.util.List<BinaryInputArchitecture> all_archs; // required
    public java.lang.String feature; // required
    public java.util.List<java.lang.Integer> archs_with_feature; // required
    public double supp; // required
    public double conf; // required
    public double lift; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BEHAVIORAL((short)1, "behavioral"),
      NON_BEHAVIORAL((short)2, "non_behavioral"),
      ALL_ARCHS((short)3, "all_archs"),
      FEATURE((short)4, "feature"),
      ARCHS_WITH_FEATURE((short)5, "archs_with_feature"),
      SUPP((short)6, "supp"),
      CONF((short)7, "conf"),
      LIFT((short)8, "lift");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BEHAVIORAL
            return BEHAVIORAL;
          case 2: // NON_BEHAVIORAL
            return NON_BEHAVIORAL;
          case 3: // ALL_ARCHS
            return ALL_ARCHS;
          case 4: // FEATURE
            return FEATURE;
          case 5: // ARCHS_WITH_FEATURE
            return ARCHS_WITH_FEATURE;
          case 6: // SUPP
            return SUPP;
          case 7: // CONF
            return CONF;
          case 8: // LIFT
            return LIFT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUPP_ISSET_ID = 0;
    private static final int __CONF_ISSET_ID = 1;
    private static final int __LIFT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.NON_BEHAVIORAL, new org.apache.thrift.meta_data.FieldMetaData("non_behavioral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.ALL_ARCHS, new org.apache.thrift.meta_data.FieldMetaData("all_archs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BinaryInputArchitecture.class))));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARCHS_WITH_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("archs_with_feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32              , "int"))));
      tmpMap.put(_Fields.SUPP, new org.apache.thrift.meta_data.FieldMetaData("supp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.CONF, new org.apache.thrift.meta_data.FieldMetaData("conf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LIFT, new org.apache.thrift.meta_data.FieldMetaData("lift", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeatures_args.class, metaDataMap);
    }

    public getMarginalDrivingFeatures_args() {
    }

    public getMarginalDrivingFeatures_args(
      java.util.List<java.lang.Integer> behavioral,
      java.util.List<java.lang.Integer> non_behavioral,
      java.util.List<BinaryInputArchitecture> all_archs,
      java.lang.String feature,
      java.util.List<java.lang.Integer> archs_with_feature,
      double supp,
      double conf,
      double lift)
    {
      this();
      this.behavioral = behavioral;
      this.non_behavioral = non_behavioral;
      this.all_archs = all_archs;
      this.feature = feature;
      this.archs_with_feature = archs_with_feature;
      this.supp = supp;
      setSuppIsSet(true);
      this.conf = conf;
      setConfIsSet(true);
      this.lift = lift;
      setLiftIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeatures_args(getMarginalDrivingFeatures_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBehavioral()) {
        java.util.List<java.lang.Integer> __this__behavioral = new java.util.ArrayList<java.lang.Integer>(other.behavioral.size());
        for (java.lang.Integer other_element : other.behavioral) {
          __this__behavioral.add(other_element);
        }
        this.behavioral = __this__behavioral;
      }
      if (other.isSetNon_behavioral()) {
        java.util.List<java.lang.Integer> __this__non_behavioral = new java.util.ArrayList<java.lang.Integer>(other.non_behavioral.size());
        for (java.lang.Integer other_element : other.non_behavioral) {
          __this__non_behavioral.add(other_element);
        }
        this.non_behavioral = __this__non_behavioral;
      }
      if (other.isSetAll_archs()) {
        java.util.List<BinaryInputArchitecture> __this__all_archs = new java.util.ArrayList<BinaryInputArchitecture>(other.all_archs.size());
        for (BinaryInputArchitecture other_element : other.all_archs) {
          __this__all_archs.add(new BinaryInputArchitecture(other_element));
        }
        this.all_archs = __this__all_archs;
      }
      if (other.isSetFeature()) {
        this.feature = other.feature;
      }
      if (other.isSetArchs_with_feature()) {
        java.util.List<java.lang.Integer> __this__archs_with_feature = new java.util.ArrayList<java.lang.Integer>(other.archs_with_feature.size());
        for (java.lang.Integer other_element : other.archs_with_feature) {
          __this__archs_with_feature.add(other_element);
        }
        this.archs_with_feature = __this__archs_with_feature;
      }
      this.supp = other.supp;
      this.conf = other.conf;
      this.lift = other.lift;
    }

    public getMarginalDrivingFeatures_args deepCopy() {
      return new getMarginalDrivingFeatures_args(this);
    }

    @Override
    public void clear() {
      this.behavioral = null;
      this.non_behavioral = null;
      this.all_archs = null;
      this.feature = null;
      this.archs_with_feature = null;
      setSuppIsSet(false);
      this.supp = 0.0;
      setConfIsSet(false);
      this.conf = 0.0;
      setLiftIsSet(false);
      this.lift = 0.0;
    }

    public int getBehavioralSize() {
      return (this.behavioral == null) ? 0 : this.behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getBehavioralIterator() {
      return (this.behavioral == null) ? null : this.behavioral.iterator();
    }

    public void addToBehavioral(int elem) {
      if (this.behavioral == null) {
        this.behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getBehavioral() {
      return this.behavioral;
    }

    public getMarginalDrivingFeatures_args setBehavioral(java.util.List<java.lang.Integer> behavioral) {
      this.behavioral = behavioral;
      return this;
    }

    public void unsetBehavioral() {
      this.behavioral = null;
    }

    /** Returns true if field behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetBehavioral() {
      return this.behavioral != null;
    }

    public void setBehavioralIsSet(boolean value) {
      if (!value) {
        this.behavioral = null;
      }
    }

    public int getNon_behavioralSize() {
      return (this.non_behavioral == null) ? 0 : this.non_behavioral.size();
    }

    public java.util.Iterator<java.lang.Integer> getNon_behavioralIterator() {
      return (this.non_behavioral == null) ? null : this.non_behavioral.iterator();
    }

    public void addToNon_behavioral(int elem) {
      if (this.non_behavioral == null) {
        this.non_behavioral = new java.util.ArrayList<java.lang.Integer>();
      }
      this.non_behavioral.add(elem);
    }

    public java.util.List<java.lang.Integer> getNon_behavioral() {
      return this.non_behavioral;
    }

    public getMarginalDrivingFeatures_args setNon_behavioral(java.util.List<java.lang.Integer> non_behavioral) {
      this.non_behavioral = non_behavioral;
      return this;
    }

    public void unsetNon_behavioral() {
      this.non_behavioral = null;
    }

    /** Returns true if field non_behavioral is set (has been assigned a value) and false otherwise */
    public boolean isSetNon_behavioral() {
      return this.non_behavioral != null;
    }

    public void setNon_behavioralIsSet(boolean value) {
      if (!value) {
        this.non_behavioral = null;
      }
    }

    public int getAll_archsSize() {
      return (this.all_archs == null) ? 0 : this.all_archs.size();
    }

    public java.util.Iterator<BinaryInputArchitecture> getAll_archsIterator() {
      return (this.all_archs == null) ? null : this.all_archs.iterator();
    }

    public void addToAll_archs(BinaryInputArchitecture elem) {
      if (this.all_archs == null) {
        this.all_archs = new java.util.ArrayList<BinaryInputArchitecture>();
      }
      this.all_archs.add(elem);
    }

    public java.util.List<BinaryInputArchitecture> getAll_archs() {
      return this.all_archs;
    }

    public getMarginalDrivingFeatures_args setAll_archs(java.util.List<BinaryInputArchitecture> all_archs) {
      this.all_archs = all_archs;
      return this;
    }

    public void unsetAll_archs() {
      this.all_archs = null;
    }

    /** Returns true if field all_archs is set (has been assigned a value) and false otherwise */
    public boolean isSetAll_archs() {
      return this.all_archs != null;
    }

    public void setAll_archsIsSet(boolean value) {
      if (!value) {
        this.all_archs = null;
      }
    }

    public java.lang.String getFeature() {
      return this.feature;
    }

    public getMarginalDrivingFeatures_args setFeature(java.lang.String feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public int getArchs_with_featureSize() {
      return (this.archs_with_feature == null) ? 0 : this.archs_with_feature.size();
    }

    public java.util.Iterator<java.lang.Integer> getArchs_with_featureIterator() {
      return (this.archs_with_feature == null) ? null : this.archs_with_feature.iterator();
    }

    public void addToArchs_with_feature(int elem) {
      if (this.archs_with_feature == null) {
        this.archs_with_feature = new java.util.ArrayList<java.lang.Integer>();
      }
      this.archs_with_feature.add(elem);
    }

    public java.util.List<java.lang.Integer> getArchs_with_feature() {
      return this.archs_with_feature;
    }

    public getMarginalDrivingFeatures_args setArchs_with_feature(java.util.List<java.lang.Integer> archs_with_feature) {
      this.archs_with_feature = archs_with_feature;
      return this;
    }

    public void unsetArchs_with_feature() {
      this.archs_with_feature = null;
    }

    /** Returns true if field archs_with_feature is set (has been assigned a value) and false otherwise */
    public boolean isSetArchs_with_feature() {
      return this.archs_with_feature != null;
    }

    public void setArchs_with_featureIsSet(boolean value) {
      if (!value) {
        this.archs_with_feature = null;
      }
    }

    public double getSupp() {
      return this.supp;
    }

    public getMarginalDrivingFeatures_args setSupp(double supp) {
      this.supp = supp;
      setSuppIsSet(true);
      return this;
    }

    public void unsetSupp() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    /** Returns true if field supp is set (has been assigned a value) and false otherwise */
    public boolean isSetSupp() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPP_ISSET_ID);
    }

    public void setSuppIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPP_ISSET_ID, value);
    }

    public double getConf() {
      return this.conf;
    }

    public getMarginalDrivingFeatures_args setConf(double conf) {
      this.conf = conf;
      setConfIsSet(true);
      return this;
    }

    public void unsetConf() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    /** Returns true if field conf is set (has been assigned a value) and false otherwise */
    public boolean isSetConf() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONF_ISSET_ID);
    }

    public void setConfIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONF_ISSET_ID, value);
    }

    public double getLift() {
      return this.lift;
    }

    public getMarginalDrivingFeatures_args setLift(double lift) {
      this.lift = lift;
      setLiftIsSet(true);
      return this;
    }

    public void unsetLift() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    /** Returns true if field lift is set (has been assigned a value) and false otherwise */
    public boolean isSetLift() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIFT_ISSET_ID);
    }

    public void setLiftIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIFT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BEHAVIORAL:
        if (value == null) {
          unsetBehavioral();
        } else {
          setBehavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case NON_BEHAVIORAL:
        if (value == null) {
          unsetNon_behavioral();
        } else {
          setNon_behavioral((java.util.List<java.lang.Integer>)value);
        }
        break;

      case ALL_ARCHS:
        if (value == null) {
          unsetAll_archs();
        } else {
          setAll_archs((java.util.List<BinaryInputArchitecture>)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.lang.String)value);
        }
        break;

      case ARCHS_WITH_FEATURE:
        if (value == null) {
          unsetArchs_with_feature();
        } else {
          setArchs_with_feature((java.util.List<java.lang.Integer>)value);
        }
        break;

      case SUPP:
        if (value == null) {
          unsetSupp();
        } else {
          setSupp((java.lang.Double)value);
        }
        break;

      case CONF:
        if (value == null) {
          unsetConf();
        } else {
          setConf((java.lang.Double)value);
        }
        break;

      case LIFT:
        if (value == null) {
          unsetLift();
        } else {
          setLift((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BEHAVIORAL:
        return getBehavioral();

      case NON_BEHAVIORAL:
        return getNon_behavioral();

      case ALL_ARCHS:
        return getAll_archs();

      case FEATURE:
        return getFeature();

      case ARCHS_WITH_FEATURE:
        return getArchs_with_feature();

      case SUPP:
        return getSupp();

      case CONF:
        return getConf();

      case LIFT:
        return getLift();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BEHAVIORAL:
        return isSetBehavioral();
      case NON_BEHAVIORAL:
        return isSetNon_behavioral();
      case ALL_ARCHS:
        return isSetAll_archs();
      case FEATURE:
        return isSetFeature();
      case ARCHS_WITH_FEATURE:
        return isSetArchs_with_feature();
      case SUPP:
        return isSetSupp();
      case CONF:
        return isSetConf();
      case LIFT:
        return isSetLift();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeatures_args)
        return this.equals((getMarginalDrivingFeatures_args)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_behavioral = true && this.isSetBehavioral();
      boolean that_present_behavioral = true && that.isSetBehavioral();
      if (this_present_behavioral || that_present_behavioral) {
        if (!(this_present_behavioral && that_present_behavioral))
          return false;
        if (!this.behavioral.equals(that.behavioral))
          return false;
      }

      boolean this_present_non_behavioral = true && this.isSetNon_behavioral();
      boolean that_present_non_behavioral = true && that.isSetNon_behavioral();
      if (this_present_non_behavioral || that_present_non_behavioral) {
        if (!(this_present_non_behavioral && that_present_non_behavioral))
          return false;
        if (!this.non_behavioral.equals(that.non_behavioral))
          return false;
      }

      boolean this_present_all_archs = true && this.isSetAll_archs();
      boolean that_present_all_archs = true && that.isSetAll_archs();
      if (this_present_all_archs || that_present_all_archs) {
        if (!(this_present_all_archs && that_present_all_archs))
          return false;
        if (!this.all_archs.equals(that.all_archs))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      boolean this_present_archs_with_feature = true && this.isSetArchs_with_feature();
      boolean that_present_archs_with_feature = true && that.isSetArchs_with_feature();
      if (this_present_archs_with_feature || that_present_archs_with_feature) {
        if (!(this_present_archs_with_feature && that_present_archs_with_feature))
          return false;
        if (!this.archs_with_feature.equals(that.archs_with_feature))
          return false;
      }

      boolean this_present_supp = true;
      boolean that_present_supp = true;
      if (this_present_supp || that_present_supp) {
        if (!(this_present_supp && that_present_supp))
          return false;
        if (this.supp != that.supp)
          return false;
      }

      boolean this_present_conf = true;
      boolean that_present_conf = true;
      if (this_present_conf || that_present_conf) {
        if (!(this_present_conf && that_present_conf))
          return false;
        if (this.conf != that.conf)
          return false;
      }

      boolean this_present_lift = true;
      boolean that_present_lift = true;
      if (this_present_lift || that_present_lift) {
        if (!(this_present_lift && that_present_lift))
          return false;
        if (this.lift != that.lift)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBehavioral()) ? 131071 : 524287);
      if (isSetBehavioral())
        hashCode = hashCode * 8191 + behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetNon_behavioral()) ? 131071 : 524287);
      if (isSetNon_behavioral())
        hashCode = hashCode * 8191 + non_behavioral.hashCode();

      hashCode = hashCode * 8191 + ((isSetAll_archs()) ? 131071 : 524287);
      if (isSetAll_archs())
        hashCode = hashCode * 8191 + all_archs.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      hashCode = hashCode * 8191 + ((isSetArchs_with_feature()) ? 131071 : 524287);
      if (isSetArchs_with_feature())
        hashCode = hashCode * 8191 + archs_with_feature.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supp);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(conf);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lift);

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBehavioral()).compareTo(other.isSetBehavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBehavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.behavioral, other.behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNon_behavioral()).compareTo(other.isSetNon_behavioral());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNon_behavioral()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.non_behavioral, other.non_behavioral);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAll_archs()).compareTo(other.isSetAll_archs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAll_archs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_archs, other.all_archs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArchs_with_feature()).compareTo(other.isSetArchs_with_feature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchs_with_feature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archs_with_feature, other.archs_with_feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSupp()).compareTo(other.isSetSupp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSupp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supp, other.supp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConf()).compareTo(other.isSetConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf, other.conf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLift()).compareTo(other.isSetLift());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLift()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lift, other.lift);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeatures_args(");
      boolean first = true;

      sb.append("behavioral:");
      if (this.behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("non_behavioral:");
      if (this.non_behavioral == null) {
        sb.append("null");
      } else {
        sb.append(this.non_behavioral);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("all_archs:");
      if (this.all_archs == null) {
        sb.append("null");
      } else {
        sb.append(this.all_archs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        sb.append(this.feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("archs_with_feature:");
      if (this.archs_with_feature == null) {
        sb.append("null");
      } else {
        sb.append(this.archs_with_feature);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("supp:");
      sb.append(this.supp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("conf:");
      sb.append(this.conf);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lift:");
      sb.append(this.lift);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeatures_argsStandardScheme getScheme() {
        return new getMarginalDrivingFeatures_argsStandardScheme();
      }
    }

    private static class getMarginalDrivingFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list72.size);
                  int _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = iprot.readI32();
                    struct.behavioral.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setBehavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NON_BEHAVIORAL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                  struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list75.size);
                  int _elem76;
                  for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                  {
                    _elem76 = iprot.readI32();
                    struct.non_behavioral.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setNon_behavioralIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALL_ARCHS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                  struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list78.size);
                  BinaryInputArchitecture _elem79;
                  for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                  {
                    _elem79 = new BinaryInputArchitecture();
                    _elem79.read(iprot);
                    struct.all_archs.add(_elem79);
                  }
                  iprot.readListEnd();
                }
                struct.setAll_archsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readString();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHS_WITH_FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                  struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list81.size);
                  int _elem82;
                  for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                  {
                    _elem82 = iprot.readI32();
                    struct.archs_with_feature.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setArchs_with_featureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SUPP
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.supp = iprot.readDouble();
                struct.setSuppIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.conf = iprot.readDouble();
                struct.setConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LIFT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lift = iprot.readDouble();
                struct.setLiftIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.behavioral != null) {
          oprot.writeFieldBegin(BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.behavioral.size()));
            for (int _iter84 : struct.behavioral)
            {
              oprot.writeI32(_iter84);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.non_behavioral != null) {
          oprot.writeFieldBegin(NON_BEHAVIORAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.non_behavioral.size()));
            for (int _iter85 : struct.non_behavioral)
            {
              oprot.writeI32(_iter85);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.all_archs != null) {
          oprot.writeFieldBegin(ALL_ARCHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.all_archs.size()));
            for (BinaryInputArchitecture _iter86 : struct.all_archs)
            {
              _iter86.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeString(struct.feature);
          oprot.writeFieldEnd();
        }
        if (struct.archs_with_feature != null) {
          oprot.writeFieldBegin(ARCHS_WITH_FEATURE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.archs_with_feature.size()));
            for (int _iter87 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUPP_FIELD_DESC);
        oprot.writeDouble(struct.supp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_FIELD_DESC);
        oprot.writeDouble(struct.conf);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LIFT_FIELD_DESC);
        oprot.writeDouble(struct.lift);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeatures_argsTupleScheme getScheme() {
        return new getMarginalDrivingFeatures_argsTupleScheme();
      }
    }

    private static class getMarginalDrivingFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBehavioral()) {
          optionals.set(0);
        }
        if (struct.isSetNon_behavioral()) {
          optionals.set(1);
        }
        if (struct.isSetAll_archs()) {
          optionals.set(2);
        }
        if (struct.isSetFeature()) {
          optionals.set(3);
        }
        if (struct.isSetArchs_with_feature()) {
          optionals.set(4);
        }
        if (struct.isSetSupp()) {
          optionals.set(5);
        }
        if (struct.isSetConf()) {
          optionals.set(6);
        }
        if (struct.isSetLift()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetBehavioral()) {
          {
            oprot.writeI32(struct.behavioral.size());
            for (int _iter88 : struct.behavioral)
            {
              oprot.writeI32(_iter88);
            }
          }
        }
        if (struct.isSetNon_behavioral()) {
          {
            oprot.writeI32(struct.non_behavioral.size());
            for (int _iter89 : struct.non_behavioral)
            {
              oprot.writeI32(_iter89);
            }
          }
        }
        if (struct.isSetAll_archs()) {
          {
            oprot.writeI32(struct.all_archs.size());
            for (BinaryInputArchitecture _iter90 : struct.all_archs)
            {
              _iter90.write(oprot);
            }
          }
        }
        if (struct.isSetFeature()) {
          oprot.writeString(struct.feature);
        }
        if (struct.isSetArchs_with_feature()) {
          {
            oprot.writeI32(struct.archs_with_feature.size());
            for (int _iter91 : struct.archs_with_feature)
            {
              oprot.writeI32(_iter91);
            }
          }
        }
        if (struct.isSetSupp()) {
          oprot.writeDouble(struct.supp);
        }
        if (struct.isSetConf()) {
          oprot.writeDouble(struct.conf);
        }
        if (struct.isSetLift()) {
          oprot.writeDouble(struct.lift);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.behavioral = new java.util.ArrayList<java.lang.Integer>(_list92.size);
            int _elem93;
            for (int _i94 = 0; _i94 < _list92.size; ++_i94)
            {
              _elem93 = iprot.readI32();
              struct.behavioral.add(_elem93);
            }
          }
          struct.setBehavioralIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.non_behavioral = new java.util.ArrayList<java.lang.Integer>(_list95.size);
            int _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = iprot.readI32();
              struct.non_behavioral.add(_elem96);
            }
          }
          struct.setNon_behavioralIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.all_archs = new java.util.ArrayList<BinaryInputArchitecture>(_list98.size);
            BinaryInputArchitecture _elem99;
            for (int _i100 = 0; _i100 < _list98.size; ++_i100)
            {
              _elem99 = new BinaryInputArchitecture();
              _elem99.read(iprot);
              struct.all_archs.add(_elem99);
            }
          }
          struct.setAll_archsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.feature = iprot.readString();
          struct.setFeatureIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.archs_with_feature = new java.util.ArrayList<java.lang.Integer>(_list101.size);
            int _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI32();
              struct.archs_with_feature.add(_elem102);
            }
          }
          struct.setArchs_with_featureIsSet(true);
        }
        if (incoming.get(5)) {
          struct.supp = iprot.readDouble();
          struct.setSuppIsSet(true);
        }
        if (incoming.get(6)) {
          struct.conf = iprot.readDouble();
          struct.setConfIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lift = iprot.readDouble();
          struct.setLiftIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMarginalDrivingFeatures_result implements org.apache.thrift.TBase<getMarginalDrivingFeatures_result, getMarginalDrivingFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMarginalDrivingFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMarginalDrivingFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMarginalDrivingFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMarginalDrivingFeatures_resultTupleSchemeFactory();

    public java.util.List<Feature> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feature.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMarginalDrivingFeatures_result.class, metaDataMap);
    }

    public getMarginalDrivingFeatures_result() {
    }

    public getMarginalDrivingFeatures_result(
      java.util.List<Feature> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMarginalDrivingFeatures_result(getMarginalDrivingFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Feature> __this__success = new java.util.ArrayList<Feature>(other.success.size());
        for (Feature other_element : other.success) {
          __this__success.add(new Feature(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMarginalDrivingFeatures_result deepCopy() {
      return new getMarginalDrivingFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Feature> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Feature elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Feature>();
      }
      this.success.add(elem);
    }

    public java.util.List<Feature> getSuccess() {
      return this.success;
    }

    public getMarginalDrivingFeatures_result setSuccess(java.util.List<Feature> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMarginalDrivingFeatures_result)
        return this.equals((getMarginalDrivingFeatures_result)that);
      return false;
    }

    public boolean equals(getMarginalDrivingFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMarginalDrivingFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMarginalDrivingFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMarginalDrivingFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeatures_resultStandardScheme getScheme() {
        return new getMarginalDrivingFeatures_resultStandardScheme();
      }
    }

    private static class getMarginalDrivingFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMarginalDrivingFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMarginalDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Feature>(_list104.size);
                  Feature _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new Feature();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMarginalDrivingFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Feature _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMarginalDrivingFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMarginalDrivingFeatures_resultTupleScheme getScheme() {
        return new getMarginalDrivingFeatures_resultTupleScheme();
      }
    }

    private static class getMarginalDrivingFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMarginalDrivingFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Feature _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMarginalDrivingFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Feature>(_list109.size);
            Feature _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new Feature();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
