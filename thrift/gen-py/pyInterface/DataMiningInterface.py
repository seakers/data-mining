#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def ping(self):
        pass

    def getDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        pass

    def runAutomatedLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        pass

    def getMarginalDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
         - logical_connective
         - supp
         - conf
         - lift
        """
        pass

    def getDrivingFeaturesEpsilonMOEABinary(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        pass

    def getDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        pass

    def runAutomatedLocalSearchDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        pass

    def getMarginalDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
         - logical_connective
         - supp
         - conf
         - lift
        """
        pass

    def getDrivingFeaturesEpsilonMOEADiscrete(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        pass

    def getDrivingFeaturesContinuous(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        pass

    def getDrivingFeaturesEpsilonMOEAContinuous(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        pass

    def computeComplexityOfFeatures(self, problem, expressions):
        """
        Parameters:
         - problem
         - expressions
        """
        pass

    def computeAlgebraicTypicality(self, problem, arch, feature):
        """
        Parameters:
         - problem
         - arch
         - feature
        """
        pass

    def computeComplexity(self, problem, expression):
        """
        Parameters:
         - problem
         - expression
        """
        pass

    def convertToCNF(self, expression):
        """
        Parameters:
         - expression
        """
        pass

    def convertToDNF(self, expression):
        """
        Parameters:
         - expression
        """
        pass

    def computeAlgebraicTypicalityWithStringInput(self, problem, architecture, feature):
        """
        Parameters:
         - problem
         - architecture
         - feature
        """
        pass

    def getDrivingFeaturesWithGeneralizationBinary(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        pass

    def runInputGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
        """
        pass

    def runFeatureGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
        """
        pass

    def setAssigningProblemParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        pass

    def setAssigningProblemExtendedParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        pass

    def getAssigningProblemParameters(self, problem):
        """
        Parameters:
         - problem
        """
        pass

    def setPartitioningAndAssigningProblemParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        pass

    def getPartitioningAndAssigningProblemParameters(self, problem):
        """
        Parameters:
         - problem
        """
        pass

    def getAssigningProblemTaxonomicScheme(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def ping(self):
        self.send_ping()
        self.recv_ping()

    def send_ping(self):
        self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ping(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        self.send_getDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift)
        return self.recv_getDrivingFeaturesBinary()

    def send_getDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        self._oprot.writeMessageBegin('getDrivingFeaturesBinary', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesBinary failed: unknown result")

    def runAutomatedLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        self.send_runAutomatedLocalSearchBinary(problem, behavioral, non_behavioral, all_archs, supp, conf, lift)
        return self.recv_runAutomatedLocalSearchBinary()

    def send_runAutomatedLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        self._oprot.writeMessageBegin('runAutomatedLocalSearchBinary', TMessageType.CALL, self._seqid)
        args = runAutomatedLocalSearchBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_runAutomatedLocalSearchBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = runAutomatedLocalSearchBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchBinary failed: unknown result")

    def getMarginalDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
         - logical_connective
         - supp
         - conf
         - lift
        """
        self.send_getMarginalDrivingFeaturesBinary(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift)
        return self.recv_getMarginalDrivingFeaturesBinary()

    def send_getMarginalDrivingFeaturesBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        self._oprot.writeMessageBegin('getMarginalDrivingFeaturesBinary', TMessageType.CALL, self._seqid)
        args = getMarginalDrivingFeaturesBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.featureExpression = featureExpression
        args.logical_connective = logical_connective
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMarginalDrivingFeaturesBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMarginalDrivingFeaturesBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesBinary failed: unknown result")

    def getDrivingFeaturesEpsilonMOEABinary(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        self.send_getDrivingFeaturesEpsilonMOEABinary(problem, behavioral, non_behavioral, all_archs)
        return self.recv_getDrivingFeaturesEpsilonMOEABinary()

    def send_getDrivingFeaturesEpsilonMOEABinary(self, problem, behavioral, non_behavioral, all_archs):
        self._oprot.writeMessageBegin('getDrivingFeaturesEpsilonMOEABinary', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesEpsilonMOEABinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesEpsilonMOEABinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesEpsilonMOEABinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEABinary failed: unknown result")

    def getDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        self.send_getDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift)
        return self.recv_getDrivingFeaturesDiscrete()

    def send_getDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        self._oprot.writeMessageBegin('getDrivingFeaturesDiscrete', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesDiscrete_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesDiscrete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesDiscrete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesDiscrete failed: unknown result")

    def runAutomatedLocalSearchDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        self.send_runAutomatedLocalSearchDiscrete(problem, behavioral, non_behavioral, all_archs, supp, conf, lift)
        return self.recv_runAutomatedLocalSearchDiscrete()

    def send_runAutomatedLocalSearchDiscrete(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        self._oprot.writeMessageBegin('runAutomatedLocalSearchDiscrete', TMessageType.CALL, self._seqid)
        args = runAutomatedLocalSearchDiscrete_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_runAutomatedLocalSearchDiscrete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = runAutomatedLocalSearchDiscrete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "runAutomatedLocalSearchDiscrete failed: unknown result")

    def getMarginalDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
         - logical_connective
         - supp
         - conf
         - lift
        """
        self.send_getMarginalDrivingFeaturesDiscrete(problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift)
        return self.recv_getMarginalDrivingFeaturesDiscrete()

    def send_getMarginalDrivingFeaturesDiscrete(self, problem, behavioral, non_behavioral, all_archs, featureExpression, logical_connective, supp, conf, lift):
        self._oprot.writeMessageBegin('getMarginalDrivingFeaturesDiscrete', TMessageType.CALL, self._seqid)
        args = getMarginalDrivingFeaturesDiscrete_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.featureExpression = featureExpression
        args.logical_connective = logical_connective
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMarginalDrivingFeaturesDiscrete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMarginalDrivingFeaturesDiscrete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMarginalDrivingFeaturesDiscrete failed: unknown result")

    def getDrivingFeaturesEpsilonMOEADiscrete(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        self.send_getDrivingFeaturesEpsilonMOEADiscrete(problem, behavioral, non_behavioral, all_archs)
        return self.recv_getDrivingFeaturesEpsilonMOEADiscrete()

    def send_getDrivingFeaturesEpsilonMOEADiscrete(self, problem, behavioral, non_behavioral, all_archs):
        self._oprot.writeMessageBegin('getDrivingFeaturesEpsilonMOEADiscrete', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesEpsilonMOEADiscrete_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesEpsilonMOEADiscrete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesEpsilonMOEADiscrete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEADiscrete failed: unknown result")

    def getDrivingFeaturesContinuous(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - supp
         - conf
         - lift
        """
        self.send_getDrivingFeaturesContinuous(problem, behavioral, non_behavioral, all_archs, supp, conf, lift)
        return self.recv_getDrivingFeaturesContinuous()

    def send_getDrivingFeaturesContinuous(self, problem, behavioral, non_behavioral, all_archs, supp, conf, lift):
        self._oprot.writeMessageBegin('getDrivingFeaturesContinuous', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesContinuous_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.supp = supp
        args.conf = conf
        args.lift = lift
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesContinuous(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesContinuous_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesContinuous failed: unknown result")

    def getDrivingFeaturesEpsilonMOEAContinuous(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        self.send_getDrivingFeaturesEpsilonMOEAContinuous(problem, behavioral, non_behavioral, all_archs)
        return self.recv_getDrivingFeaturesEpsilonMOEAContinuous()

    def send_getDrivingFeaturesEpsilonMOEAContinuous(self, problem, behavioral, non_behavioral, all_archs):
        self._oprot.writeMessageBegin('getDrivingFeaturesEpsilonMOEAContinuous', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesEpsilonMOEAContinuous_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesEpsilonMOEAContinuous(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesEpsilonMOEAContinuous_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesEpsilonMOEAContinuous failed: unknown result")

    def computeComplexityOfFeatures(self, problem, expressions):
        """
        Parameters:
         - problem
         - expressions
        """
        self.send_computeComplexityOfFeatures(problem, expressions)
        return self.recv_computeComplexityOfFeatures()

    def send_computeComplexityOfFeatures(self, problem, expressions):
        self._oprot.writeMessageBegin('computeComplexityOfFeatures', TMessageType.CALL, self._seqid)
        args = computeComplexityOfFeatures_args()
        args.problem = problem
        args.expressions = expressions
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_computeComplexityOfFeatures(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = computeComplexityOfFeatures_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "computeComplexityOfFeatures failed: unknown result")

    def computeAlgebraicTypicality(self, problem, arch, feature):
        """
        Parameters:
         - problem
         - arch
         - feature
        """
        self.send_computeAlgebraicTypicality(problem, arch, feature)
        return self.recv_computeAlgebraicTypicality()

    def send_computeAlgebraicTypicality(self, problem, arch, feature):
        self._oprot.writeMessageBegin('computeAlgebraicTypicality', TMessageType.CALL, self._seqid)
        args = computeAlgebraicTypicality_args()
        args.problem = problem
        args.arch = arch
        args.feature = feature
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_computeAlgebraicTypicality(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = computeAlgebraicTypicality_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "computeAlgebraicTypicality failed: unknown result")

    def computeComplexity(self, problem, expression):
        """
        Parameters:
         - problem
         - expression
        """
        self.send_computeComplexity(problem, expression)
        return self.recv_computeComplexity()

    def send_computeComplexity(self, problem, expression):
        self._oprot.writeMessageBegin('computeComplexity', TMessageType.CALL, self._seqid)
        args = computeComplexity_args()
        args.problem = problem
        args.expression = expression
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_computeComplexity(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = computeComplexity_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "computeComplexity failed: unknown result")

    def convertToCNF(self, expression):
        """
        Parameters:
         - expression
        """
        self.send_convertToCNF(expression)
        return self.recv_convertToCNF()

    def send_convertToCNF(self, expression):
        self._oprot.writeMessageBegin('convertToCNF', TMessageType.CALL, self._seqid)
        args = convertToCNF_args()
        args.expression = expression
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_convertToCNF(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = convertToCNF_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "convertToCNF failed: unknown result")

    def convertToDNF(self, expression):
        """
        Parameters:
         - expression
        """
        self.send_convertToDNF(expression)
        return self.recv_convertToDNF()

    def send_convertToDNF(self, expression):
        self._oprot.writeMessageBegin('convertToDNF', TMessageType.CALL, self._seqid)
        args = convertToDNF_args()
        args.expression = expression
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_convertToDNF(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = convertToDNF_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "convertToDNF failed: unknown result")

    def computeAlgebraicTypicalityWithStringInput(self, problem, architecture, feature):
        """
        Parameters:
         - problem
         - architecture
         - feature
        """
        self.send_computeAlgebraicTypicalityWithStringInput(problem, architecture, feature)
        return self.recv_computeAlgebraicTypicalityWithStringInput()

    def send_computeAlgebraicTypicalityWithStringInput(self, problem, architecture, feature):
        self._oprot.writeMessageBegin('computeAlgebraicTypicalityWithStringInput', TMessageType.CALL, self._seqid)
        args = computeAlgebraicTypicalityWithStringInput_args()
        args.problem = problem
        args.architecture = architecture
        args.feature = feature
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_computeAlgebraicTypicalityWithStringInput(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = computeAlgebraicTypicalityWithStringInput_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "computeAlgebraicTypicalityWithStringInput failed: unknown result")

    def getDrivingFeaturesWithGeneralizationBinary(self, problem, behavioral, non_behavioral, all_archs):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
        """
        self.send_getDrivingFeaturesWithGeneralizationBinary(problem, behavioral, non_behavioral, all_archs)
        return self.recv_getDrivingFeaturesWithGeneralizationBinary()

    def send_getDrivingFeaturesWithGeneralizationBinary(self, problem, behavioral, non_behavioral, all_archs):
        self._oprot.writeMessageBegin('getDrivingFeaturesWithGeneralizationBinary', TMessageType.CALL, self._seqid)
        args = getDrivingFeaturesWithGeneralizationBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDrivingFeaturesWithGeneralizationBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDrivingFeaturesWithGeneralizationBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDrivingFeaturesWithGeneralizationBinary failed: unknown result")

    def runInputGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
        """
        self.send_runInputGeneralizationLocalSearchBinary(problem, behavioral, non_behavioral, all_archs, featureExpression)
        return self.recv_runInputGeneralizationLocalSearchBinary()

    def send_runInputGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        self._oprot.writeMessageBegin('runInputGeneralizationLocalSearchBinary', TMessageType.CALL, self._seqid)
        args = runInputGeneralizationLocalSearchBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.featureExpression = featureExpression
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_runInputGeneralizationLocalSearchBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = runInputGeneralizationLocalSearchBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "runInputGeneralizationLocalSearchBinary failed: unknown result")

    def runFeatureGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        """
        Parameters:
         - problem
         - behavioral
         - non_behavioral
         - all_archs
         - featureExpression
        """
        self.send_runFeatureGeneralizationLocalSearchBinary(problem, behavioral, non_behavioral, all_archs, featureExpression)
        return self.recv_runFeatureGeneralizationLocalSearchBinary()

    def send_runFeatureGeneralizationLocalSearchBinary(self, problem, behavioral, non_behavioral, all_archs, featureExpression):
        self._oprot.writeMessageBegin('runFeatureGeneralizationLocalSearchBinary', TMessageType.CALL, self._seqid)
        args = runFeatureGeneralizationLocalSearchBinary_args()
        args.problem = problem
        args.behavioral = behavioral
        args.non_behavioral = non_behavioral
        args.all_archs = all_archs
        args.featureExpression = featureExpression
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_runFeatureGeneralizationLocalSearchBinary(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = runFeatureGeneralizationLocalSearchBinary_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "runFeatureGeneralizationLocalSearchBinary failed: unknown result")

    def setAssigningProblemParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        self.send_setAssigningProblemParameters(problem, params)
        return self.recv_setAssigningProblemParameters()

    def send_setAssigningProblemParameters(self, problem, params):
        self._oprot.writeMessageBegin('setAssigningProblemParameters', TMessageType.CALL, self._seqid)
        args = setAssigningProblemParameters_args()
        args.problem = problem
        args.params = params
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setAssigningProblemParameters(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setAssigningProblemParameters_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setAssigningProblemParameters failed: unknown result")

    def setAssigningProblemExtendedParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        self.send_setAssigningProblemExtendedParameters(problem, params)
        return self.recv_setAssigningProblemExtendedParameters()

    def send_setAssigningProblemExtendedParameters(self, problem, params):
        self._oprot.writeMessageBegin('setAssigningProblemExtendedParameters', TMessageType.CALL, self._seqid)
        args = setAssigningProblemExtendedParameters_args()
        args.problem = problem
        args.params = params
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setAssigningProblemExtendedParameters(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setAssigningProblemExtendedParameters_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setAssigningProblemExtendedParameters failed: unknown result")

    def getAssigningProblemParameters(self, problem):
        """
        Parameters:
         - problem
        """
        self.send_getAssigningProblemParameters(problem)
        return self.recv_getAssigningProblemParameters()

    def send_getAssigningProblemParameters(self, problem):
        self._oprot.writeMessageBegin('getAssigningProblemParameters', TMessageType.CALL, self._seqid)
        args = getAssigningProblemParameters_args()
        args.problem = problem
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAssigningProblemParameters(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAssigningProblemParameters_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAssigningProblemParameters failed: unknown result")

    def setPartitioningAndAssigningProblemParameters(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        self.send_setPartitioningAndAssigningProblemParameters(problem, params)
        return self.recv_setPartitioningAndAssigningProblemParameters()

    def send_setPartitioningAndAssigningProblemParameters(self, problem, params):
        self._oprot.writeMessageBegin('setPartitioningAndAssigningProblemParameters', TMessageType.CALL, self._seqid)
        args = setPartitioningAndAssigningProblemParameters_args()
        args.problem = problem
        args.params = params
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setPartitioningAndAssigningProblemParameters(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setPartitioningAndAssigningProblemParameters_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "setPartitioningAndAssigningProblemParameters failed: unknown result")

    def getPartitioningAndAssigningProblemParameters(self, problem):
        """
        Parameters:
         - problem
        """
        self.send_getPartitioningAndAssigningProblemParameters(problem)
        return self.recv_getPartitioningAndAssigningProblemParameters()

    def send_getPartitioningAndAssigningProblemParameters(self, problem):
        self._oprot.writeMessageBegin('getPartitioningAndAssigningProblemParameters', TMessageType.CALL, self._seqid)
        args = getPartitioningAndAssigningProblemParameters_args()
        args.problem = problem
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPartitioningAndAssigningProblemParameters(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPartitioningAndAssigningProblemParameters_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPartitioningAndAssigningProblemParameters failed: unknown result")

    def getAssigningProblemTaxonomicScheme(self, problem, params):
        """
        Parameters:
         - problem
         - params
        """
        self.send_getAssigningProblemTaxonomicScheme(problem, params)
        return self.recv_getAssigningProblemTaxonomicScheme()

    def send_getAssigningProblemTaxonomicScheme(self, problem, params):
        self._oprot.writeMessageBegin('getAssigningProblemTaxonomicScheme', TMessageType.CALL, self._seqid)
        args = getAssigningProblemTaxonomicScheme_args()
        args.problem = problem
        args.params = params
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAssigningProblemTaxonomicScheme(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAssigningProblemTaxonomicScheme_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAssigningProblemTaxonomicScheme failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["ping"] = Processor.process_ping
        self._processMap["getDrivingFeaturesBinary"] = Processor.process_getDrivingFeaturesBinary
        self._processMap["runAutomatedLocalSearchBinary"] = Processor.process_runAutomatedLocalSearchBinary
        self._processMap["getMarginalDrivingFeaturesBinary"] = Processor.process_getMarginalDrivingFeaturesBinary
        self._processMap["getDrivingFeaturesEpsilonMOEABinary"] = Processor.process_getDrivingFeaturesEpsilonMOEABinary
        self._processMap["getDrivingFeaturesDiscrete"] = Processor.process_getDrivingFeaturesDiscrete
        self._processMap["runAutomatedLocalSearchDiscrete"] = Processor.process_runAutomatedLocalSearchDiscrete
        self._processMap["getMarginalDrivingFeaturesDiscrete"] = Processor.process_getMarginalDrivingFeaturesDiscrete
        self._processMap["getDrivingFeaturesEpsilonMOEADiscrete"] = Processor.process_getDrivingFeaturesEpsilonMOEADiscrete
        self._processMap["getDrivingFeaturesContinuous"] = Processor.process_getDrivingFeaturesContinuous
        self._processMap["getDrivingFeaturesEpsilonMOEAContinuous"] = Processor.process_getDrivingFeaturesEpsilonMOEAContinuous
        self._processMap["computeComplexityOfFeatures"] = Processor.process_computeComplexityOfFeatures
        self._processMap["computeAlgebraicTypicality"] = Processor.process_computeAlgebraicTypicality
        self._processMap["computeComplexity"] = Processor.process_computeComplexity
        self._processMap["convertToCNF"] = Processor.process_convertToCNF
        self._processMap["convertToDNF"] = Processor.process_convertToDNF
        self._processMap["computeAlgebraicTypicalityWithStringInput"] = Processor.process_computeAlgebraicTypicalityWithStringInput
        self._processMap["getDrivingFeaturesWithGeneralizationBinary"] = Processor.process_getDrivingFeaturesWithGeneralizationBinary
        self._processMap["runInputGeneralizationLocalSearchBinary"] = Processor.process_runInputGeneralizationLocalSearchBinary
        self._processMap["runFeatureGeneralizationLocalSearchBinary"] = Processor.process_runFeatureGeneralizationLocalSearchBinary
        self._processMap["setAssigningProblemParameters"] = Processor.process_setAssigningProblemParameters
        self._processMap["setAssigningProblemExtendedParameters"] = Processor.process_setAssigningProblemExtendedParameters
        self._processMap["getAssigningProblemParameters"] = Processor.process_getAssigningProblemParameters
        self._processMap["setPartitioningAndAssigningProblemParameters"] = Processor.process_setPartitioningAndAssigningProblemParameters
        self._processMap["getPartitioningAndAssigningProblemParameters"] = Processor.process_getPartitioningAndAssigningProblemParameters
        self._processMap["getAssigningProblemTaxonomicScheme"] = Processor.process_getAssigningProblemTaxonomicScheme

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        try:
            self._handler.ping()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesBinary(self, seqid, iprot, oprot):
        args = getDrivingFeaturesBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesBinary_result()
        try:
            result.success = self._handler.getDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_runAutomatedLocalSearchBinary(self, seqid, iprot, oprot):
        args = runAutomatedLocalSearchBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = runAutomatedLocalSearchBinary_result()
        try:
            result.success = self._handler.runAutomatedLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("runAutomatedLocalSearchBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMarginalDrivingFeaturesBinary(self, seqid, iprot, oprot):
        args = getMarginalDrivingFeaturesBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMarginalDrivingFeaturesBinary_result()
        try:
            result.success = self._handler.getMarginalDrivingFeaturesBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMarginalDrivingFeaturesBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesEpsilonMOEABinary(self, seqid, iprot, oprot):
        args = getDrivingFeaturesEpsilonMOEABinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesEpsilonMOEABinary_result()
        try:
            result.success = self._handler.getDrivingFeaturesEpsilonMOEABinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesEpsilonMOEABinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesDiscrete(self, seqid, iprot, oprot):
        args = getDrivingFeaturesDiscrete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesDiscrete_result()
        try:
            result.success = self._handler.getDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesDiscrete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_runAutomatedLocalSearchDiscrete(self, seqid, iprot, oprot):
        args = runAutomatedLocalSearchDiscrete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = runAutomatedLocalSearchDiscrete_result()
        try:
            result.success = self._handler.runAutomatedLocalSearchDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("runAutomatedLocalSearchDiscrete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMarginalDrivingFeaturesDiscrete(self, seqid, iprot, oprot):
        args = getMarginalDrivingFeaturesDiscrete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMarginalDrivingFeaturesDiscrete_result()
        try:
            result.success = self._handler.getMarginalDrivingFeaturesDiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression, args.logical_connective, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMarginalDrivingFeaturesDiscrete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesEpsilonMOEADiscrete(self, seqid, iprot, oprot):
        args = getDrivingFeaturesEpsilonMOEADiscrete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesEpsilonMOEADiscrete_result()
        try:
            result.success = self._handler.getDrivingFeaturesEpsilonMOEADiscrete(args.problem, args.behavioral, args.non_behavioral, args.all_archs)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesEpsilonMOEADiscrete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesContinuous(self, seqid, iprot, oprot):
        args = getDrivingFeaturesContinuous_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesContinuous_result()
        try:
            result.success = self._handler.getDrivingFeaturesContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.supp, args.conf, args.lift)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesContinuous", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesEpsilonMOEAContinuous(self, seqid, iprot, oprot):
        args = getDrivingFeaturesEpsilonMOEAContinuous_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesEpsilonMOEAContinuous_result()
        try:
            result.success = self._handler.getDrivingFeaturesEpsilonMOEAContinuous(args.problem, args.behavioral, args.non_behavioral, args.all_archs)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesEpsilonMOEAContinuous", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_computeComplexityOfFeatures(self, seqid, iprot, oprot):
        args = computeComplexityOfFeatures_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = computeComplexityOfFeatures_result()
        try:
            result.success = self._handler.computeComplexityOfFeatures(args.problem, args.expressions)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("computeComplexityOfFeatures", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_computeAlgebraicTypicality(self, seqid, iprot, oprot):
        args = computeAlgebraicTypicality_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = computeAlgebraicTypicality_result()
        try:
            result.success = self._handler.computeAlgebraicTypicality(args.problem, args.arch, args.feature)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("computeAlgebraicTypicality", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_computeComplexity(self, seqid, iprot, oprot):
        args = computeComplexity_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = computeComplexity_result()
        try:
            result.success = self._handler.computeComplexity(args.problem, args.expression)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("computeComplexity", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_convertToCNF(self, seqid, iprot, oprot):
        args = convertToCNF_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = convertToCNF_result()
        try:
            result.success = self._handler.convertToCNF(args.expression)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("convertToCNF", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_convertToDNF(self, seqid, iprot, oprot):
        args = convertToDNF_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = convertToDNF_result()
        try:
            result.success = self._handler.convertToDNF(args.expression)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("convertToDNF", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_computeAlgebraicTypicalityWithStringInput(self, seqid, iprot, oprot):
        args = computeAlgebraicTypicalityWithStringInput_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = computeAlgebraicTypicalityWithStringInput_result()
        try:
            result.success = self._handler.computeAlgebraicTypicalityWithStringInput(args.problem, args.architecture, args.feature)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("computeAlgebraicTypicalityWithStringInput", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDrivingFeaturesWithGeneralizationBinary(self, seqid, iprot, oprot):
        args = getDrivingFeaturesWithGeneralizationBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDrivingFeaturesWithGeneralizationBinary_result()
        try:
            result.success = self._handler.getDrivingFeaturesWithGeneralizationBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDrivingFeaturesWithGeneralizationBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_runInputGeneralizationLocalSearchBinary(self, seqid, iprot, oprot):
        args = runInputGeneralizationLocalSearchBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = runInputGeneralizationLocalSearchBinary_result()
        try:
            result.success = self._handler.runInputGeneralizationLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("runInputGeneralizationLocalSearchBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_runFeatureGeneralizationLocalSearchBinary(self, seqid, iprot, oprot):
        args = runFeatureGeneralizationLocalSearchBinary_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = runFeatureGeneralizationLocalSearchBinary_result()
        try:
            result.success = self._handler.runFeatureGeneralizationLocalSearchBinary(args.problem, args.behavioral, args.non_behavioral, args.all_archs, args.featureExpression)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("runFeatureGeneralizationLocalSearchBinary", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setAssigningProblemParameters(self, seqid, iprot, oprot):
        args = setAssigningProblemParameters_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setAssigningProblemParameters_result()
        try:
            result.success = self._handler.setAssigningProblemParameters(args.problem, args.params)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setAssigningProblemParameters", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setAssigningProblemExtendedParameters(self, seqid, iprot, oprot):
        args = setAssigningProblemExtendedParameters_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setAssigningProblemExtendedParameters_result()
        try:
            result.success = self._handler.setAssigningProblemExtendedParameters(args.problem, args.params)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setAssigningProblemExtendedParameters", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAssigningProblemParameters(self, seqid, iprot, oprot):
        args = getAssigningProblemParameters_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAssigningProblemParameters_result()
        try:
            result.success = self._handler.getAssigningProblemParameters(args.problem)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAssigningProblemParameters", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_setPartitioningAndAssigningProblemParameters(self, seqid, iprot, oprot):
        args = setPartitioningAndAssigningProblemParameters_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setPartitioningAndAssigningProblemParameters_result()
        try:
            result.success = self._handler.setPartitioningAndAssigningProblemParameters(args.problem, args.params)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setPartitioningAndAssigningProblemParameters", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPartitioningAndAssigningProblemParameters(self, seqid, iprot, oprot):
        args = getPartitioningAndAssigningProblemParameters_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPartitioningAndAssigningProblemParameters_result()
        try:
            result.success = self._handler.getPartitioningAndAssigningProblemParameters(args.problem)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPartitioningAndAssigningProblemParameters", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAssigningProblemTaxonomicScheme(self, seqid, iprot, oprot):
        args = getAssigningProblemTaxonomicScheme_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAssigningProblemTaxonomicScheme_result()
        try:
            result.success = self._handler.getAssigningProblemTaxonomicScheme(args.problem, args.params)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAssigningProblemTaxonomicScheme", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class ping_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_args)
ping_args.thrift_spec = (
)


class ping_result(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_result)
ping_result.thrift_spec = (
)


class getDrivingFeaturesBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype126, _size123) = iprot.readListBegin()
                    for _i127 in range(_size123):
                        _elem128 = iprot.readI32()
                        self.behavioral.append(_elem128)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype132, _size129) = iprot.readListBegin()
                    for _i133 in range(_size129):
                        _elem134 = iprot.readI32()
                        self.non_behavioral.append(_elem134)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype138, _size135) = iprot.readListBegin()
                    for _i139 in range(_size135):
                        _elem140 = BinaryInputArchitecture()
                        _elem140.read(iprot)
                        self.all_archs.append(_elem140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter141 in self.behavioral:
                oprot.writeI32(iter141)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter142 in self.non_behavioral:
                oprot.writeI32(iter142)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter143 in self.all_archs:
                iter143.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 5)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 6)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesBinary_args)
getDrivingFeaturesBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
    (5, TType.DOUBLE, 'supp', None, None, ),  # 5
    (6, TType.DOUBLE, 'conf', None, None, ),  # 6
    (7, TType.DOUBLE, 'lift', None, None, ),  # 7
)


class getDrivingFeaturesBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype147, _size144) = iprot.readListBegin()
                    for _i148 in range(_size144):
                        _elem149 = Feature()
                        _elem149.read(iprot)
                        self.success.append(_elem149)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter150 in self.success:
                iter150.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesBinary_result)
getDrivingFeaturesBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class runAutomatedLocalSearchBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype154, _size151) = iprot.readListBegin()
                    for _i155 in range(_size151):
                        _elem156 = iprot.readI32()
                        self.behavioral.append(_elem156)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype160, _size157) = iprot.readListBegin()
                    for _i161 in range(_size157):
                        _elem162 = iprot.readI32()
                        self.non_behavioral.append(_elem162)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype166, _size163) = iprot.readListBegin()
                    for _i167 in range(_size163):
                        _elem168 = BinaryInputArchitecture()
                        _elem168.read(iprot)
                        self.all_archs.append(_elem168)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runAutomatedLocalSearchBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter169 in self.behavioral:
                oprot.writeI32(iter169)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter170 in self.non_behavioral:
                oprot.writeI32(iter170)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter171 in self.all_archs:
                iter171.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 5)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 6)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runAutomatedLocalSearchBinary_args)
runAutomatedLocalSearchBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
    (5, TType.DOUBLE, 'supp', None, None, ),  # 5
    (6, TType.DOUBLE, 'conf', None, None, ),  # 6
    (7, TType.DOUBLE, 'lift', None, None, ),  # 7
)


class runAutomatedLocalSearchBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype175, _size172) = iprot.readListBegin()
                    for _i176 in range(_size172):
                        _elem177 = Feature()
                        _elem177.read(iprot)
                        self.success.append(_elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runAutomatedLocalSearchBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter178 in self.success:
                iter178.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runAutomatedLocalSearchBinary_result)
runAutomatedLocalSearchBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getMarginalDrivingFeaturesBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - featureExpression
     - logical_connective
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, featureExpression=None, logical_connective=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.featureExpression = featureExpression
        self.logical_connective = logical_connective
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype182, _size179) = iprot.readListBegin()
                    for _i183 in range(_size179):
                        _elem184 = iprot.readI32()
                        self.behavioral.append(_elem184)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype188, _size185) = iprot.readListBegin()
                    for _i189 in range(_size185):
                        _elem190 = iprot.readI32()
                        self.non_behavioral.append(_elem190)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype194, _size191) = iprot.readListBegin()
                    for _i195 in range(_size191):
                        _elem196 = BinaryInputArchitecture()
                        _elem196.read(iprot)
                        self.all_archs.append(_elem196)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.featureExpression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.logical_connective = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMarginalDrivingFeaturesBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter197 in self.behavioral:
                oprot.writeI32(iter197)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter198 in self.non_behavioral:
                oprot.writeI32(iter198)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter199 in self.all_archs:
                iter199.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureExpression is not None:
            oprot.writeFieldBegin('featureExpression', TType.STRING, 5)
            oprot.writeString(self.featureExpression.encode('utf-8') if sys.version_info[0] == 2 else self.featureExpression)
            oprot.writeFieldEnd()
        if self.logical_connective is not None:
            oprot.writeFieldBegin('logical_connective', TType.STRING, 6)
            oprot.writeString(self.logical_connective.encode('utf-8') if sys.version_info[0] == 2 else self.logical_connective)
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 7)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 8)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 9)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMarginalDrivingFeaturesBinary_args)
getMarginalDrivingFeaturesBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
    (5, TType.STRING, 'featureExpression', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'logical_connective', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'supp', None, None, ),  # 7
    (8, TType.DOUBLE, 'conf', None, None, ),  # 8
    (9, TType.DOUBLE, 'lift', None, None, ),  # 9
)


class getMarginalDrivingFeaturesBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype203, _size200) = iprot.readListBegin()
                    for _i204 in range(_size200):
                        _elem205 = Feature()
                        _elem205.read(iprot)
                        self.success.append(_elem205)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMarginalDrivingFeaturesBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter206 in self.success:
                iter206.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMarginalDrivingFeaturesBinary_result)
getMarginalDrivingFeaturesBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getDrivingFeaturesEpsilonMOEABinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype210, _size207) = iprot.readListBegin()
                    for _i211 in range(_size207):
                        _elem212 = iprot.readI32()
                        self.behavioral.append(_elem212)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype216, _size213) = iprot.readListBegin()
                    for _i217 in range(_size213):
                        _elem218 = iprot.readI32()
                        self.non_behavioral.append(_elem218)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype222, _size219) = iprot.readListBegin()
                    for _i223 in range(_size219):
                        _elem224 = BinaryInputArchitecture()
                        _elem224.read(iprot)
                        self.all_archs.append(_elem224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEABinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter225 in self.behavioral:
                oprot.writeI32(iter225)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter226 in self.non_behavioral:
                oprot.writeI32(iter226)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter227 in self.all_archs:
                iter227.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEABinary_args)
getDrivingFeaturesEpsilonMOEABinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
)


class getDrivingFeaturesEpsilonMOEABinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype231, _size228) = iprot.readListBegin()
                    for _i232 in range(_size228):
                        _elem233 = Feature()
                        _elem233.read(iprot)
                        self.success.append(_elem233)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEABinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter234 in self.success:
                iter234.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEABinary_result)
getDrivingFeaturesEpsilonMOEABinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getDrivingFeaturesDiscrete_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype238, _size235) = iprot.readListBegin()
                    for _i239 in range(_size235):
                        _elem240 = iprot.readI32()
                        self.behavioral.append(_elem240)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype244, _size241) = iprot.readListBegin()
                    for _i245 in range(_size241):
                        _elem246 = iprot.readI32()
                        self.non_behavioral.append(_elem246)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype250, _size247) = iprot.readListBegin()
                    for _i251 in range(_size247):
                        _elem252 = DiscreteInputArchitecture()
                        _elem252.read(iprot)
                        self.all_archs.append(_elem252)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesDiscrete_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter253 in self.behavioral:
                oprot.writeI32(iter253)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter254 in self.non_behavioral:
                oprot.writeI32(iter254)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter255 in self.all_archs:
                iter255.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 5)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 6)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesDiscrete_args)
getDrivingFeaturesDiscrete_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [DiscreteInputArchitecture, None], False), None, ),  # 4
    (5, TType.DOUBLE, 'supp', None, None, ),  # 5
    (6, TType.DOUBLE, 'conf', None, None, ),  # 6
    (7, TType.DOUBLE, 'lift', None, None, ),  # 7
)


class getDrivingFeaturesDiscrete_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype259, _size256) = iprot.readListBegin()
                    for _i260 in range(_size256):
                        _elem261 = Feature()
                        _elem261.read(iprot)
                        self.success.append(_elem261)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesDiscrete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter262 in self.success:
                iter262.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesDiscrete_result)
getDrivingFeaturesDiscrete_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class runAutomatedLocalSearchDiscrete_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype266, _size263) = iprot.readListBegin()
                    for _i267 in range(_size263):
                        _elem268 = iprot.readI32()
                        self.behavioral.append(_elem268)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype272, _size269) = iprot.readListBegin()
                    for _i273 in range(_size269):
                        _elem274 = iprot.readI32()
                        self.non_behavioral.append(_elem274)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype278, _size275) = iprot.readListBegin()
                    for _i279 in range(_size275):
                        _elem280 = DiscreteInputArchitecture()
                        _elem280.read(iprot)
                        self.all_archs.append(_elem280)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runAutomatedLocalSearchDiscrete_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter281 in self.behavioral:
                oprot.writeI32(iter281)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter282 in self.non_behavioral:
                oprot.writeI32(iter282)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter283 in self.all_archs:
                iter283.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 5)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 6)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runAutomatedLocalSearchDiscrete_args)
runAutomatedLocalSearchDiscrete_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [DiscreteInputArchitecture, None], False), None, ),  # 4
    (5, TType.DOUBLE, 'supp', None, None, ),  # 5
    (6, TType.DOUBLE, 'conf', None, None, ),  # 6
    (7, TType.DOUBLE, 'lift', None, None, ),  # 7
)


class runAutomatedLocalSearchDiscrete_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype287, _size284) = iprot.readListBegin()
                    for _i288 in range(_size284):
                        _elem289 = Feature()
                        _elem289.read(iprot)
                        self.success.append(_elem289)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runAutomatedLocalSearchDiscrete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter290 in self.success:
                iter290.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runAutomatedLocalSearchDiscrete_result)
runAutomatedLocalSearchDiscrete_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getMarginalDrivingFeaturesDiscrete_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - featureExpression
     - logical_connective
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, featureExpression=None, logical_connective=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.featureExpression = featureExpression
        self.logical_connective = logical_connective
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype294, _size291) = iprot.readListBegin()
                    for _i295 in range(_size291):
                        _elem296 = iprot.readI32()
                        self.behavioral.append(_elem296)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype300, _size297) = iprot.readListBegin()
                    for _i301 in range(_size297):
                        _elem302 = iprot.readI32()
                        self.non_behavioral.append(_elem302)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype306, _size303) = iprot.readListBegin()
                    for _i307 in range(_size303):
                        _elem308 = DiscreteInputArchitecture()
                        _elem308.read(iprot)
                        self.all_archs.append(_elem308)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.featureExpression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.logical_connective = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMarginalDrivingFeaturesDiscrete_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter309 in self.behavioral:
                oprot.writeI32(iter309)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter310 in self.non_behavioral:
                oprot.writeI32(iter310)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter311 in self.all_archs:
                iter311.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureExpression is not None:
            oprot.writeFieldBegin('featureExpression', TType.STRING, 5)
            oprot.writeString(self.featureExpression.encode('utf-8') if sys.version_info[0] == 2 else self.featureExpression)
            oprot.writeFieldEnd()
        if self.logical_connective is not None:
            oprot.writeFieldBegin('logical_connective', TType.STRING, 6)
            oprot.writeString(self.logical_connective.encode('utf-8') if sys.version_info[0] == 2 else self.logical_connective)
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 7)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 8)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 9)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMarginalDrivingFeaturesDiscrete_args)
getMarginalDrivingFeaturesDiscrete_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [DiscreteInputArchitecture, None], False), None, ),  # 4
    (5, TType.STRING, 'featureExpression', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'logical_connective', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'supp', None, None, ),  # 7
    (8, TType.DOUBLE, 'conf', None, None, ),  # 8
    (9, TType.DOUBLE, 'lift', None, None, ),  # 9
)


class getMarginalDrivingFeaturesDiscrete_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype315, _size312) = iprot.readListBegin()
                    for _i316 in range(_size312):
                        _elem317 = Feature()
                        _elem317.read(iprot)
                        self.success.append(_elem317)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMarginalDrivingFeaturesDiscrete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter318 in self.success:
                iter318.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMarginalDrivingFeaturesDiscrete_result)
getMarginalDrivingFeaturesDiscrete_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getDrivingFeaturesEpsilonMOEADiscrete_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype322, _size319) = iprot.readListBegin()
                    for _i323 in range(_size319):
                        _elem324 = iprot.readI32()
                        self.behavioral.append(_elem324)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype328, _size325) = iprot.readListBegin()
                    for _i329 in range(_size325):
                        _elem330 = iprot.readI32()
                        self.non_behavioral.append(_elem330)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype334, _size331) = iprot.readListBegin()
                    for _i335 in range(_size331):
                        _elem336 = DiscreteInputArchitecture()
                        _elem336.read(iprot)
                        self.all_archs.append(_elem336)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEADiscrete_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter337 in self.behavioral:
                oprot.writeI32(iter337)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter338 in self.non_behavioral:
                oprot.writeI32(iter338)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter339 in self.all_archs:
                iter339.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEADiscrete_args)
getDrivingFeaturesEpsilonMOEADiscrete_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [DiscreteInputArchitecture, None], False), None, ),  # 4
)


class getDrivingFeaturesEpsilonMOEADiscrete_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype343, _size340) = iprot.readListBegin()
                    for _i344 in range(_size340):
                        _elem345 = Feature()
                        _elem345.read(iprot)
                        self.success.append(_elem345)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEADiscrete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter346 in self.success:
                iter346.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEADiscrete_result)
getDrivingFeaturesEpsilonMOEADiscrete_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getDrivingFeaturesContinuous_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - supp
     - conf
     - lift
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, supp=None, conf=None, lift=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.supp = supp
        self.conf = conf
        self.lift = lift

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype350, _size347) = iprot.readListBegin()
                    for _i351 in range(_size347):
                        _elem352 = iprot.readI32()
                        self.behavioral.append(_elem352)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype356, _size353) = iprot.readListBegin()
                    for _i357 in range(_size353):
                        _elem358 = iprot.readI32()
                        self.non_behavioral.append(_elem358)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype362, _size359) = iprot.readListBegin()
                    for _i363 in range(_size359):
                        _elem364 = ContinuousInputArchitecture()
                        _elem364.read(iprot)
                        self.all_archs.append(_elem364)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.supp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.lift = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesContinuous_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter365 in self.behavioral:
                oprot.writeI32(iter365)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter366 in self.non_behavioral:
                oprot.writeI32(iter366)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter367 in self.all_archs:
                iter367.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.supp is not None:
            oprot.writeFieldBegin('supp', TType.DOUBLE, 5)
            oprot.writeDouble(self.supp)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 6)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        if self.lift is not None:
            oprot.writeFieldBegin('lift', TType.DOUBLE, 7)
            oprot.writeDouble(self.lift)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesContinuous_args)
getDrivingFeaturesContinuous_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [ContinuousInputArchitecture, None], False), None, ),  # 4
    (5, TType.DOUBLE, 'supp', None, None, ),  # 5
    (6, TType.DOUBLE, 'conf', None, None, ),  # 6
    (7, TType.DOUBLE, 'lift', None, None, ),  # 7
)


class getDrivingFeaturesContinuous_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype371, _size368) = iprot.readListBegin()
                    for _i372 in range(_size368):
                        _elem373 = Feature()
                        _elem373.read(iprot)
                        self.success.append(_elem373)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesContinuous_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter374 in self.success:
                iter374.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesContinuous_result)
getDrivingFeaturesContinuous_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class getDrivingFeaturesEpsilonMOEAContinuous_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype378, _size375) = iprot.readListBegin()
                    for _i379 in range(_size375):
                        _elem380 = iprot.readI32()
                        self.behavioral.append(_elem380)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype384, _size381) = iprot.readListBegin()
                    for _i385 in range(_size381):
                        _elem386 = iprot.readI32()
                        self.non_behavioral.append(_elem386)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype390, _size387) = iprot.readListBegin()
                    for _i391 in range(_size387):
                        _elem392 = ContinuousInputArchitecture()
                        _elem392.read(iprot)
                        self.all_archs.append(_elem392)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEAContinuous_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter393 in self.behavioral:
                oprot.writeI32(iter393)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter394 in self.non_behavioral:
                oprot.writeI32(iter394)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter395 in self.all_archs:
                iter395.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEAContinuous_args)
getDrivingFeaturesEpsilonMOEAContinuous_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [ContinuousInputArchitecture, None], False), None, ),  # 4
)


class getDrivingFeaturesEpsilonMOEAContinuous_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype399, _size396) = iprot.readListBegin()
                    for _i400 in range(_size396):
                        _elem401 = Feature()
                        _elem401.read(iprot)
                        self.success.append(_elem401)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesEpsilonMOEAContinuous_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter402 in self.success:
                iter402.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesEpsilonMOEAContinuous_result)
getDrivingFeaturesEpsilonMOEAContinuous_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class computeComplexityOfFeatures_args(object):
    """
    Attributes:
     - problem
     - expressions
    """


    def __init__(self, problem=None, expressions=None,):
        self.problem = problem
        self.expressions = expressions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.expressions = []
                    (_etype406, _size403) = iprot.readListBegin()
                    for _i407 in range(_size403):
                        _elem408 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.expressions.append(_elem408)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeComplexityOfFeatures_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.expressions is not None:
            oprot.writeFieldBegin('expressions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.expressions))
            for iter409 in self.expressions:
                oprot.writeString(iter409.encode('utf-8') if sys.version_info[0] == 2 else iter409)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeComplexityOfFeatures_args)
computeComplexityOfFeatures_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'expressions', (TType.STRING, 'UTF8', False), None, ),  # 2
)


class computeComplexityOfFeatures_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype413, _size410) = iprot.readListBegin()
                    for _i414 in range(_size410):
                        _elem415 = iprot.readDouble()
                        self.success.append(_elem415)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeComplexityOfFeatures_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.DOUBLE, len(self.success))
            for iter416 in self.success:
                oprot.writeDouble(iter416)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeComplexityOfFeatures_result)
computeComplexityOfFeatures_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.DOUBLE, None, False), None, ),  # 0
)


class computeAlgebraicTypicality_args(object):
    """
    Attributes:
     - problem
     - arch
     - feature
    """


    def __init__(self, problem=None, arch=None, feature=None,):
        self.problem = problem
        self.arch = arch
        self.feature = feature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.arch = BinaryInputArchitecture()
                    self.arch.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.feature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeAlgebraicTypicality_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.arch is not None:
            oprot.writeFieldBegin('arch', TType.STRUCT, 2)
            self.arch.write(oprot)
            oprot.writeFieldEnd()
        if self.feature is not None:
            oprot.writeFieldBegin('feature', TType.STRING, 3)
            oprot.writeString(self.feature.encode('utf-8') if sys.version_info[0] == 2 else self.feature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeAlgebraicTypicality_args)
computeAlgebraicTypicality_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'arch', [BinaryInputArchitecture, None], None, ),  # 2
    (3, TType.STRING, 'feature', 'UTF8', None, ),  # 3
)


class computeAlgebraicTypicality_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype420, _size417) = iprot.readListBegin()
                    for _i421 in range(_size417):
                        _elem422 = iprot.readI32()
                        self.success.append(_elem422)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeAlgebraicTypicality_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter423 in self.success:
                oprot.writeI32(iter423)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeAlgebraicTypicality_result)
computeAlgebraicTypicality_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
)


class computeComplexity_args(object):
    """
    Attributes:
     - problem
     - expression
    """


    def __init__(self, problem=None, expression=None,):
        self.problem = problem
        self.expression = expression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.expression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeComplexity_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.expression is not None:
            oprot.writeFieldBegin('expression', TType.STRING, 2)
            oprot.writeString(self.expression.encode('utf-8') if sys.version_info[0] == 2 else self.expression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeComplexity_args)
computeComplexity_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'expression', 'UTF8', None, ),  # 2
)


class computeComplexity_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeComplexity_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeComplexity_result)
computeComplexity_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ),  # 0
)


class convertToCNF_args(object):
    """
    Attributes:
     - expression
    """


    def __init__(self, expression=None,):
        self.expression = expression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.expression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertToCNF_args')
        if self.expression is not None:
            oprot.writeFieldBegin('expression', TType.STRING, 1)
            oprot.writeString(self.expression.encode('utf-8') if sys.version_info[0] == 2 else self.expression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(convertToCNF_args)
convertToCNF_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'expression', 'UTF8', None, ),  # 1
)


class convertToCNF_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertToCNF_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(convertToCNF_result)
convertToCNF_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class convertToDNF_args(object):
    """
    Attributes:
     - expression
    """


    def __init__(self, expression=None,):
        self.expression = expression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.expression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertToDNF_args')
        if self.expression is not None:
            oprot.writeFieldBegin('expression', TType.STRING, 1)
            oprot.writeString(self.expression.encode('utf-8') if sys.version_info[0] == 2 else self.expression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(convertToDNF_args)
convertToDNF_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'expression', 'UTF8', None, ),  # 1
)


class convertToDNF_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('convertToDNF_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(convertToDNF_result)
convertToDNF_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
)


class computeAlgebraicTypicalityWithStringInput_args(object):
    """
    Attributes:
     - problem
     - architecture
     - feature
    """


    def __init__(self, problem=None, architecture=None, feature=None,):
        self.problem = problem
        self.architecture = architecture
        self.feature = feature

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.architecture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.feature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeAlgebraicTypicalityWithStringInput_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.architecture is not None:
            oprot.writeFieldBegin('architecture', TType.STRING, 2)
            oprot.writeString(self.architecture.encode('utf-8') if sys.version_info[0] == 2 else self.architecture)
            oprot.writeFieldEnd()
        if self.feature is not None:
            oprot.writeFieldBegin('feature', TType.STRING, 3)
            oprot.writeString(self.feature.encode('utf-8') if sys.version_info[0] == 2 else self.feature)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeAlgebraicTypicalityWithStringInput_args)
computeAlgebraicTypicalityWithStringInput_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'architecture', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'feature', 'UTF8', None, ),  # 3
)


class computeAlgebraicTypicalityWithStringInput_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype427, _size424) = iprot.readListBegin()
                    for _i428 in range(_size424):
                        _elem429 = iprot.readI32()
                        self.success.append(_elem429)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('computeAlgebraicTypicalityWithStringInput_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter430 in self.success:
                oprot.writeI32(iter430)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(computeAlgebraicTypicalityWithStringInput_result)
computeAlgebraicTypicalityWithStringInput_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
)


class getDrivingFeaturesWithGeneralizationBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype434, _size431) = iprot.readListBegin()
                    for _i435 in range(_size431):
                        _elem436 = iprot.readI32()
                        self.behavioral.append(_elem436)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype440, _size437) = iprot.readListBegin()
                    for _i441 in range(_size437):
                        _elem442 = iprot.readI32()
                        self.non_behavioral.append(_elem442)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype446, _size443) = iprot.readListBegin()
                    for _i447 in range(_size443):
                        _elem448 = BinaryInputArchitecture()
                        _elem448.read(iprot)
                        self.all_archs.append(_elem448)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesWithGeneralizationBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter449 in self.behavioral:
                oprot.writeI32(iter449)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter450 in self.non_behavioral:
                oprot.writeI32(iter450)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter451 in self.all_archs:
                iter451.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesWithGeneralizationBinary_args)
getDrivingFeaturesWithGeneralizationBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
)


class getDrivingFeaturesWithGeneralizationBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype455, _size452) = iprot.readListBegin()
                    for _i456 in range(_size452):
                        _elem457 = Feature()
                        _elem457.read(iprot)
                        self.success.append(_elem457)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDrivingFeaturesWithGeneralizationBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter458 in self.success:
                iter458.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDrivingFeaturesWithGeneralizationBinary_result)
getDrivingFeaturesWithGeneralizationBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class runInputGeneralizationLocalSearchBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - featureExpression
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, featureExpression=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.featureExpression = featureExpression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype462, _size459) = iprot.readListBegin()
                    for _i463 in range(_size459):
                        _elem464 = iprot.readI32()
                        self.behavioral.append(_elem464)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype468, _size465) = iprot.readListBegin()
                    for _i469 in range(_size465):
                        _elem470 = iprot.readI32()
                        self.non_behavioral.append(_elem470)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype474, _size471) = iprot.readListBegin()
                    for _i475 in range(_size471):
                        _elem476 = BinaryInputArchitecture()
                        _elem476.read(iprot)
                        self.all_archs.append(_elem476)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.featureExpression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runInputGeneralizationLocalSearchBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter477 in self.behavioral:
                oprot.writeI32(iter477)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter478 in self.non_behavioral:
                oprot.writeI32(iter478)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter479 in self.all_archs:
                iter479.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureExpression is not None:
            oprot.writeFieldBegin('featureExpression', TType.STRING, 5)
            oprot.writeString(self.featureExpression.encode('utf-8') if sys.version_info[0] == 2 else self.featureExpression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runInputGeneralizationLocalSearchBinary_args)
runInputGeneralizationLocalSearchBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
    (5, TType.STRING, 'featureExpression', 'UTF8', None, ),  # 5
)


class runInputGeneralizationLocalSearchBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype483, _size480) = iprot.readListBegin()
                    for _i484 in range(_size480):
                        _elem485 = Feature()
                        _elem485.read(iprot)
                        self.success.append(_elem485)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runInputGeneralizationLocalSearchBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter486 in self.success:
                iter486.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runInputGeneralizationLocalSearchBinary_result)
runInputGeneralizationLocalSearchBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class runFeatureGeneralizationLocalSearchBinary_args(object):
    """
    Attributes:
     - problem
     - behavioral
     - non_behavioral
     - all_archs
     - featureExpression
    """


    def __init__(self, problem=None, behavioral=None, non_behavioral=None, all_archs=None, featureExpression=None,):
        self.problem = problem
        self.behavioral = behavioral
        self.non_behavioral = non_behavioral
        self.all_archs = all_archs
        self.featureExpression = featureExpression

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.behavioral = []
                    (_etype490, _size487) = iprot.readListBegin()
                    for _i491 in range(_size487):
                        _elem492 = iprot.readI32()
                        self.behavioral.append(_elem492)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.non_behavioral = []
                    (_etype496, _size493) = iprot.readListBegin()
                    for _i497 in range(_size493):
                        _elem498 = iprot.readI32()
                        self.non_behavioral.append(_elem498)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.all_archs = []
                    (_etype502, _size499) = iprot.readListBegin()
                    for _i503 in range(_size499):
                        _elem504 = BinaryInputArchitecture()
                        _elem504.read(iprot)
                        self.all_archs.append(_elem504)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.featureExpression = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runFeatureGeneralizationLocalSearchBinary_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.behavioral is not None:
            oprot.writeFieldBegin('behavioral', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.behavioral))
            for iter505 in self.behavioral:
                oprot.writeI32(iter505)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.non_behavioral is not None:
            oprot.writeFieldBegin('non_behavioral', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.non_behavioral))
            for iter506 in self.non_behavioral:
                oprot.writeI32(iter506)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_archs is not None:
            oprot.writeFieldBegin('all_archs', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.all_archs))
            for iter507 in self.all_archs:
                iter507.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureExpression is not None:
            oprot.writeFieldBegin('featureExpression', TType.STRING, 5)
            oprot.writeString(self.featureExpression.encode('utf-8') if sys.version_info[0] == 2 else self.featureExpression)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runFeatureGeneralizationLocalSearchBinary_args)
runFeatureGeneralizationLocalSearchBinary_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'behavioral', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'non_behavioral', (TType.I32, None, False), None, ),  # 3
    (4, TType.LIST, 'all_archs', (TType.STRUCT, [BinaryInputArchitecture, None], False), None, ),  # 4
    (5, TType.STRING, 'featureExpression', 'UTF8', None, ),  # 5
)


class runFeatureGeneralizationLocalSearchBinary_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype511, _size508) = iprot.readListBegin()
                    for _i512 in range(_size508):
                        _elem513 = Feature()
                        _elem513.read(iprot)
                        self.success.append(_elem513)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('runFeatureGeneralizationLocalSearchBinary_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter514 in self.success:
                iter514.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(runFeatureGeneralizationLocalSearchBinary_result)
runFeatureGeneralizationLocalSearchBinary_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Feature, None], False), None, ),  # 0
)


class setAssigningProblemParameters_args(object):
    """
    Attributes:
     - problem
     - params
    """


    def __init__(self, problem=None, params=None,):
        self.problem = problem
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.params = AssigningProblemParameters()
                    self.params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setAssigningProblemParameters_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRUCT, 2)
            self.params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setAssigningProblemParameters_args)
setAssigningProblemParameters_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'params', [AssigningProblemParameters, None], None, ),  # 2
)


class setAssigningProblemParameters_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setAssigningProblemParameters_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setAssigningProblemParameters_result)
setAssigningProblemParameters_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class setAssigningProblemExtendedParameters_args(object):
    """
    Attributes:
     - problem
     - params
    """


    def __init__(self, problem=None, params=None,):
        self.problem = problem
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.params = AssigningProblemParameters()
                    self.params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setAssigningProblemExtendedParameters_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRUCT, 2)
            self.params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setAssigningProblemExtendedParameters_args)
setAssigningProblemExtendedParameters_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'params', [AssigningProblemParameters, None], None, ),  # 2
)


class setAssigningProblemExtendedParameters_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setAssigningProblemExtendedParameters_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setAssigningProblemExtendedParameters_result)
setAssigningProblemExtendedParameters_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class getAssigningProblemParameters_args(object):
    """
    Attributes:
     - problem
    """


    def __init__(self, problem=None,):
        self.problem = problem

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAssigningProblemParameters_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAssigningProblemParameters_args)
getAssigningProblemParameters_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
)


class getAssigningProblemParameters_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AssigningProblemParameters()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAssigningProblemParameters_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAssigningProblemParameters_result)
getAssigningProblemParameters_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [AssigningProblemParameters, None], None, ),  # 0
)


class setPartitioningAndAssigningProblemParameters_args(object):
    """
    Attributes:
     - problem
     - params
    """


    def __init__(self, problem=None, params=None,):
        self.problem = problem
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.params = PartitioningAndAssigningProblemParameters()
                    self.params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPartitioningAndAssigningProblemParameters_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRUCT, 2)
            self.params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPartitioningAndAssigningProblemParameters_args)
setPartitioningAndAssigningProblemParameters_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'params', [PartitioningAndAssigningProblemParameters, None], None, ),  # 2
)


class setPartitioningAndAssigningProblemParameters_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setPartitioningAndAssigningProblemParameters_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setPartitioningAndAssigningProblemParameters_result)
setPartitioningAndAssigningProblemParameters_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class getPartitioningAndAssigningProblemParameters_args(object):
    """
    Attributes:
     - problem
    """


    def __init__(self, problem=None,):
        self.problem = problem

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPartitioningAndAssigningProblemParameters_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPartitioningAndAssigningProblemParameters_args)
getPartitioningAndAssigningProblemParameters_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
)


class getPartitioningAndAssigningProblemParameters_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PartitioningAndAssigningProblemParameters()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPartitioningAndAssigningProblemParameters_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPartitioningAndAssigningProblemParameters_result)
getPartitioningAndAssigningProblemParameters_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [PartitioningAndAssigningProblemParameters, None], None, ),  # 0
)


class getAssigningProblemTaxonomicScheme_args(object):
    """
    Attributes:
     - problem
     - params
    """


    def __init__(self, problem=None, params=None,):
        self.problem = problem
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.problem = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.params = AssigningProblemParameters()
                    self.params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAssigningProblemTaxonomicScheme_args')
        if self.problem is not None:
            oprot.writeFieldBegin('problem', TType.STRING, 1)
            oprot.writeString(self.problem.encode('utf-8') if sys.version_info[0] == 2 else self.problem)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.STRUCT, 2)
            self.params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAssigningProblemTaxonomicScheme_args)
getAssigningProblemTaxonomicScheme_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'problem', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'params', [AssigningProblemParameters, None], None, ),  # 2
)


class getAssigningProblemTaxonomicScheme_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TaxonomicScheme()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAssigningProblemTaxonomicScheme_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAssigningProblemTaxonomicScheme_result)
getAssigningProblemTaxonomicScheme_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TaxonomicScheme, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

